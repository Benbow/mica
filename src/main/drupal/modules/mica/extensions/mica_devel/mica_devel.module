<?php

/**
 * @file
 * Code for the mica_devel feature.
 */

include_once('mica_devel.features.inc');

function mica_devel_menu() {
  $items = array();
  $items['admin/config/development/mica_modules_graph'] = array(
    'title' => 'Mica module dependencies graph',
    'description' => 'Graph of dependencies of mica modules',
    'page callback' => '_mica_devel_modules_graph',
    'access arguments' => array('administer site configuration'),
  );
  $items['admin/config/development/mica'] = array(
    'title' => 'Mica Devel',
    'description' => 'development tools for Mica',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_mica_devel_form'),
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

function _mica_devel_form() {

  $form['menu_rebuild'] = array(
    '#type' => 'fieldset',
    '#title' => t('Rebuild menus'),
    '#description' => t('(Re)populate the database tables used by various menu functions.'),
  );
  $form['menu_rebuild']['rebuild'] = array(
    '#type' => 'submit',
    '#value' => t('Rebuild menus'),
    '#submit' => array('menu_rebuild'),
  );

  $form['rebuild_registry'] = array(
    '#type' => 'fieldset',
    '#title' => t('Rebuild registry'),
    '#description' => t('Rescans all code in modules or includes directories, storing the location of each interface or class in the database.'),
  );
  $form['rebuild_registry']['rebuild'] = array(
    '#type' => 'submit',
    '#value' => t('Rebuild'),
    '#submit' => array('_mica_devel_rebuild_registry'),
  );

  $form['large_data'] = array(
    '#type' => 'fieldset',
    '#title' => t('Test Mica with 100K+ variables'),
    '#description' => t('Test Mica with 100K+ variables'),
  );
  $form['large_data']['generate'] = array(
    '#type' => 'submit',
    '#value' => t('Generate content'),
    '#submit' => array('_mica_devel_large_data'),
  );

  $form['dummy'] = array(
    '#type' => 'fieldset',
    '#title' => t('Example'),
    '#description' => t('Form example to run custom actions'),
  );
  $form['dummy']['run'] = array(
    '#type' => 'submit',
    '#value' => t('Run dummy method'),
    '#submit' => array('_mica_devel_dummy_run'),
  );

  return $form;
}

function _mica_devel_rebuild_registry() {
  module_load_install('mica_core');
  _mica_core_rebuild_registry();
}

function _mica_devel_modules_graph() {
  $graph = array();
  $modules = system_rebuild_module_data();
  foreach ($modules as $module => $data) {
    if (_mica_devel_is_mica_module($module) && (!isset($data->info['hidden']) || !$data->info['hidden'])) {
      $graph[$module]['edges'] = array();
      foreach ($data->info['dependencies'] as $key) {
        if (_mica_devel_is_mica_module($key) && $module != $key) {
          $graph[$module]['edges'][$key] = 1;
        }
      }
      $graph[$module]['data'] = array(
        'title' => $module,
        'content' => print_r($data, TRUE),
        'background-color' => "#00ff00",
      );
    }
  }
  //  dpm($graph);
  $config = array(
    'id' => 'mica_modules_graph',
    'width' => 900,
    'height' => 700,
    'engine' => 'graph_phyz',
    'menu' => TRUE,
    'background-color' => '#ccc',
    'animate' => TRUE,
    'randomize' => TRUE,
    'showForces' => FALSE,
    'applyAttractToCenter' => TRUE,
    'applyBoundingBox' => TRUE,
    'applyBoxOverlap' => TRUE,
    'applyCoulombsLaw' => TRUE,
    'applyDamping' => TRUE,
    'applyHookesLaw' => TRUE,
    'applyCompass' => TRUE,
  );
  return theme('graphapi_dispatch', array('graph' => $graph, 'config' => $config));
}

function _mica_devel_is_mica_module($module) {
  return substr($module, 0, strlen("mica")) === "mica";
}

function _mica_devel_large_data() {
  set_time_limit(0);

  define('NB_STUDIES', 20);
  define('NB_POP', 2);
  define('NB_DCE_DATASETS', 1);
  define('NB_VARIABLES', 1000);

  $pop_ids = array();
  $studies = array();
  for ($i = 0; $i < NB_STUDIES; $i++) {
    $study = _mica_devel_generate_node('study', $i);
    $study->field_study_populations['und'] = array();
    $study->field_acroym['und'][0]['value'] = devel_create_greeking(mt_rand(1, 2), TRUE);
    $study->field_authorising_person_name['und'][0]['value'] = devel_create_greeking(mt_rand(2, 3), TRUE);
    $study->field_authorising_person_name_m['und'][0]['value'] = devel_create_greeking(mt_rand(2, 3), TRUE);
    $study->field_info_design_follow_up['und'][0]['value'] = devel_create_greeking(mt_rand(4, 7), TRUE);
    $study->field_recruitment_other_sp['und'][0]['value'] = devel_create_greeking(mt_rand(1, 12), TRUE);
    $study->field_marker_paper['und'][0]['value'] = devel_create_greeking(mt_rand(1, 4), TRUE);
    $study->field_pubmedid['und'][0]['value'] = devel_create_greeking(mt_rand(1, 1), TRUE);

    for ($j = 0; $j < NB_POP; $j++) {
      $population = _mica_devel_generate_node('population', "$i-$j");
      $population->field_pop_study['und'] = array();
      $population->field_pop_study['und'][] = array('nid' => $study->nid);

      foreach(array_keys($population->field_pop_ethnic_origin['und']) as $id){
        $population->field_pop_ethnic_origin['und'][$id]['value'] = devel_create_greeking(mt_rand(1, 4), TRUE);
      }
      foreach(array_keys($population->field_pop_health_status['und']) as $id){
        $population->field_pop_health_status['und'][$id]['value'] = devel_create_greeking(mt_rand(1, 4), TRUE);
      }
      foreach(array_keys($population->field_pop_exist_study_part['und']) as $id){
        $population->field_pop_exist_study_part['und'][$id]['value'] = devel_create_greeking(mt_rand(1, 12), TRUE);
      }

      $population->field_pop_dce['und'] = array();
      node_save($population);

      $pop_ids[] = $population->nid;
      $study->field_study_populations['und'][] = array('nid' => $population->nid);
    }
    node_save($study);
    $studies[] = $study->nid;
  }

  // Generate DCE and Datasets
  foreach ($pop_ids as $k => $pop_id) {
    for ($i = 0; $i < NB_DCE_DATASETS; $i++) {
      $dataset = _mica_devel_generate_node('dataset', "$k-$i");
      for ($j = 0; $j < NB_VARIABLES; $j++) {
        $variable = _mica_devel_generate_variable("$k-$i-$j");

        $variable->field_dataset = array();
        $variable->field_dataset['und'][] = array('nid' => $dataset->nid);
        node_save($variable);

        $dataset->field_dataset_variables['und'][] = array('nid' => $variable->nid);
      }
      node_save($dataset);

      $dce = _mica_devel_generate_node('data_collection_event', "$k-$i");
      $dce->field_dce_data_sources_sp['und'][0]['value'] = devel_create_greeking(mt_rand(1, 8), TRUE);
      $dce->field_dce_tissues_sp['und'][0]['value'] = devel_create_greeking(mt_rand(1, 2), TRUE);
      $dce->field_dce_population['und'] = array();
      $dce->field_dce_population['und'][] = array('nid' => $pop_id);

      $dce->field_dce_dataset['und'] = array();
      $dce->field_dce_dataset['und'][] = array('nid' => $dataset->nid);

      node_save($dce);
    }
  }
}

function _mica_devel_dummy_run() {
  drupal_set_message(t("Run dummy method..."));
}

function _mica_devel_generate_node($node_type, $id) {
  // Copied code from: devel_generate.module:devel_generate_content_add_node(&$results)
  $node = new stdClass();
  $node->nid = NULL;

  // Insert new data:
  $node->type = $node_type;
  node_object_prepare($node);
//  $users = $results['users'];
  module_load_include('inc', 'devel_generate', 'devel_generate');

  $node->uid = 1;
  $type = node_type_get_type($node);
  $node->title = $type->has_title ? $node_type . '_' . $id : '';
  $node->status = 1;

  // Avoid NOTICE.
  if (!isset($results['time_range'])) {
    $results['time_range'] = 0;
  }

  $node->published = 1;
  $node->language = LANGUAGE_NONE;
  $node->created = REQUEST_TIME - mt_rand(0, $results['time_range']);

  // A flag to let hook_nodeapi() implementations know that this is a generated node.
  $node->devel_generate = $results;

  // Populate all core fields on behalf of field.module
  module_load_include('inc', 'devel_generate', 'devel_generate.fields');

  devel_generate_fields($node, 'node', $node->type);
  //devel_generate_add_terms($node);

  // See devel_generate_nodeapi() for actions that happen before and after this save.
  node_save($node);
  return $node;
}

function _mica_devel_generate_variable($id) {
  // Copied code from: devel_generate.module:devel_generate_content_add_node(&$results)
  $node = new stdClass();
  $node->nid = NULL;

  // Insert new data:
  $node->type = 'variable';
  node_object_prepare($node);
//  $users = $results['users'];
  module_load_include('inc', 'devel_generate', 'devel_generate');

  $node->uid = 1;
  $node->title = 'variable_' . $id;
  $node->status = 1;

  // Avoid NOTICE.
  if (!isset($results['time_range'])) {
    $results['time_range'] = 0;
  }

  $node->language = LANGUAGE_NONE;
  $node->created = REQUEST_TIME - mt_rand(0, $results['time_range']);

  $node->field_label['und'][0]['value'] = devel_create_greeking(mt_rand(1, 2), TRUE);
  $node->field_unit['und'][0]['value'] = devel_create_greeking(mt_rand(1, 1), TRUE);
  $node->field_value_type = 'text';

  // Fill taxonomies terms
  $node->field_disease_history['und'][0]['tid'] =  mt_rand(65, 97);
  $node->field_early_life['und'][0]['tid'] =  mt_rand(98, 104);
  $node->field_essence['und'][0]['tid'] =  mt_rand(105, 108);
  $node->field_individual_participant_mea['und'][0]['tid'] =  mt_rand(109, 113);
  $node->field_laboratory_measures['und'][0]['tid'] =  mt_rand(114, 125);
  $node->field_life_habits_behaviours['und'][0]['tid'] =  mt_rand(126, 148);
  $node->field_measure['und'][0]['tid'] =  mt_rand(149, 153);
  $node->field_medical_health_interv['und'][0]['tid'] =  mt_rand(154, 216);
  $node->field_medication['und'][0]['tid'] =  mt_rand(217, 232);
  $node->field_perception_of_health['und'][0]['tid'] =  mt_rand(233, 234);

//  // A flag to let hook_nodeapi() implementations know that this is a generated node.
//  $node->devel_generate = $results;

  // Populate all core fields on behalf of field.module
  module_load_include('inc', 'devel_generate', 'devel_generate.fields');
  devel_generate_add_terms($node);

  // See devel_generate_nodeapi() for actions that happen before and after this save.
//  node_save($node);

  return $node;
}