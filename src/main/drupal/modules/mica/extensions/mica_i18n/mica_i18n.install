<?php
/**
 * Copyright 2012(c) OBiBa, All rights reserved.
 *
 * This program and the accompanying materials are made available under the terms of the GNU Public License v3.0.
 * You should have received a copy of the GNU General Public License along with
 * this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/**
 * @file
 * Install Mica i18n module.
 */

include_once 'mica_i18n.features.inc';

/**
 * Implements hook_enable().
 * Manually set those variables because they are not set by features-strongarm (?)
 */
function mica_i18n_install() {

  $value = array(
    'locale-url' => array(
      'callbacks' => array(
        'language' => 'locale_language_from_url',
        'switcher' => 'locale_language_switcher_url',
        'url_rewrite' => 'locale_language_url_rewrite_url',
      ),
      'file' => 'includes/locale.inc',
    ),
    'language-default' => array(
      'callbacks' => array(
        'language' => 'language_from_default',
      ),
    ),
  );
  variable_set('language_negotiation_language', $value);

  $value = array(
    'locale-interface' => array(
      'callbacks' => array(
        'language' => 'locale_language_from_interface',
      ),
      'file' => 'includes/locale.inc',
    ),
    'language-default' => array(
      'callbacks' => array(
        'language' => 'language_from_default',
      ),
    ),
  );
  variable_set('language_negotiation_language_content', $value);

  $value = array(
    'node' => 'node',
    'taxonomy_term' => 'taxonomy_term',
    'comment' => 0,
    'user' => 0,
  );
  variable_set('entity_translation_entity_types', $value);

  // node/1 will be seen as the home page so the breadcrumb 'Home' wil lbe hidden
  i18n_variable_set('site_frontpage', 'node/1', language_default()->language);

  // Configuration to do only once
  module_enable(array('l10n_update'));
  module_enable(array('lang_dropdown'));

  mica_i18n_fix_entity_display();

  // Explicitly set 'Default translated' display format for all fields of type list_text
  mica_i18n_fix_views_display();

  // set all taxonomies to be localizable
  mica_i18n_taxonomy_localizable();

  // Modify all search index... Add language field and processors
  mica_i18n_search_index_update();
}

function mica_i18n_fix_views_display() {
  $views = views_get_all_views();
  foreach ($views as $view) {
    $save = FALSE;

    // Set translation of list items for page and default
    foreach (array_keys($view->display) as $display) {
      if (isset($view->display[$display]) && isset($view->display[$display]->display_options['fields'])) {
        foreach (array_keys($view->display[$display]->display_options['fields']) as $key) {
          // If the field is a list type
          $info = field_info_field($key);
          if (isset($info['type']) && $info['type'] === 'list_text') {
            $view->display[$display]->display_options['fields'][$key]['type'] = 'i18n_list_default';
            $save = TRUE;
          }
        }
      }
    }

    if ($save) {
      $view->save();
    }
  }
}

/**
 * Set variable to enable translated content types, hide language fields from all view modes,
 * change display type for lists and texts to enable translation
 */
function mica_i18n_fix_entity_display() {

  $types = node_type_get_types();
  $translatables_widget_types = mica_i18n_get_translatables_widget_types();
  foreach ($types as $type) {
    // Enable multilingual support (field translation) and locked options
    variable_set('i18n_node_extended_' . $type->type, I18N_LANGUAGE_ENABLED);
    variable_set('i18n_node_options_' . $type->type, array('current')); // No constant found in in i18n_node.variable
    variable_set('language_content_type_' . $type->type, I18N_MODE_TRANSLATE);
    variable_set('entity_translation_comment_filter_' . $type->type, FALSE);
    variable_set('entity_translation_node_metadata_' . $type->type, FALSE);

    // Remove language from all display
    mica_i18n_hide_language_display($type->type);

    // Set all display to default translated
    $instances = field_read_instances(array('entity_type' => 'node', 'bundle' => $type->type));
    foreach ($instances as $instance) {

      // Configure fields that should be 'translatable'
      $info = field_info_field_by_id($instance['field_id']);
      // Exclude field_dataset
      if (in_array($instance['widget']['type'], $translatables_widget_types)) {

        // only update the field if not already translatables
        if (empty($info['translatable'])) { // Returns true when array is empty or when contains '0'
          $info['translatable'] = '1';
          field_update_field($info);
        }
      }
      else {
        // Explicitly set translatables to FALSE
        if (isset($info['translatable']) && $info['translatable'] === '1') {
          $info['translatable'] = '0';
          field_update_field($info);
        }
      }

      // Configure 'Field Display'
      $update = FALSE;
      foreach (array_keys($instance['display']) as $display) {
        if ($instance['display'][$display]['type'] === 'list_default') {
          $update = TRUE;
          $instance['display'][$display]['type'] = 'i18n_list_default';
          $instance['display'][$display]['module'] = 'i18n_field';
        }
        else {
          if ($instance['display'][$display]['type'] === 'text_default') {
            $update = TRUE;
            $instance['display'][$display]['type'] = 'i18n_text_default';
            $instance['display'][$display]['module'] = 'NULL';
          }
          else {
            if ($instance['display'][$display]['type'] === 'taxonomy_term_reference_plain') {
              $update = TRUE;
              $instance['display'][$display]['type'] = 'i18n_taxonomy_term_reference_plain';
              $instance['display'][$display]['module'] = 'i18n_taxonomy';
            }
          }
        }
      }
      if ($update) {
        field_update_instance($instance);
      }
    }
  }
}


function mica_i18n_hide_language_display($type) {
  $settings = field_bundle_settings('node', $type);

  if (!array_key_exists('language', $settings['extra_fields']['display'])) {
    $settings['extra_fields']['display']['language'] = array();
  }

  foreach (array_keys(field_view_mode_settings('node', $type)) as $view_mode) {
    $settings['extra_fields']['display']['language'][$view_mode] = array(
      'weight' => 0,
      'visible' => FALSE,
    );
  }

  // set default view_mode also
  $settings['extra_fields']['display']['language']['default'] = array(
    'weight' => 0,
    'visible' => FALSE,
  );

  field_bundle_settings('node', $type, $settings);
}

function mica_i18n_taxonomy_localizable() {
  $taxonomies = taxonomy_get_vocabularies();
  foreach ($taxonomies as $taxonomy) {
    $taxonomy->i18n_mode = I18N_MODE_LOCALIZE;
    taxonomy_vocabulary_save($taxonomy);
  }
}

function mica_i18n_search_index_update() {
  $indexes = search_api_index_load_multiple(FALSE);

  foreach ($indexes as $index) {

    $index->options['fields']['language'] = array('type' => 'string');
    $index->options['data_alter_callbacks']['search_api_alter_language_control'] = array(
      'status' => 1,
      'weight' => '0',
      'settings' => array(
        'lang_field' => 'language',
        'languages' => array()
      ),
    );

    module_load_include('admin.inc', 'search_api');
    uasort($index->options['data_alter_callbacks'], 'search_api_admin_element_compare');

    $index->save();
    $index->reindex();

  }
}

function mica_i18n_get_translatables_widget_types() {
  /*
   * These are all widget types that are currently used by Mica:
   * 'text_textarea_with_summary', 'date_popup','file_generic','link_field','text_textfield','number',
   * 'node_reference_autocomplete','options_buttons','text_textarea','options_select','autocomplete_deluxe_taxonomy',
   * 'category_field_default_widget','name_widget','email_textfield','options_onoff','viewreference_select',
   * 'noderefcreate_autocomplete', 'multiselect', 'date_select', 'image_image', 'taxonomy_autocomplete',
   */

  // Translatables types are
  $types = array(
    'text_textarea_with_summary',
    'text_textfield',
    'text_textarea',
  );

  return $types;
}
