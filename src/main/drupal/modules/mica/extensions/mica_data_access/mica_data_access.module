<?php
/**
 * @file
 * Code for the Mica Data Access feature.
 */

include_once('mica_data_access.features.inc');

/**
 * Implements hook_form().
 */
function mica_data_access_form($node, &$form_state) {
  return node_content_form($node, $form_state);
}

/**
 * Implements hook_menu().
 */
function mica_data_access_menu() {
  $items = array();

  $items['data-access/request'] = array(
    'title' => 'Request for Data Access',
    'page callback' => 'mica_data_access_request_add',
    'access callback' => TRUE,
    'type' => MENU_LOCAL_ACTION,
    'file path' => drupal_get_path('module', 'node'),
    'file' => 'node.pages.inc',
  );

  $items['node/%node/review'] = array(
    'title' => 'Review Data Access Request',
    'page callback' => 'mica_data_access_request_review',
    'page arguments' => array(1),
    'access callback' => 'mica_data_access_request_review_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_ACTION,
  );

  return $items;
}

/**
 * Implements hook_node_access().
 */
function mica_data_access_node_access($node, $op, $account) {
  $type = is_string($node) ? $node : $node->type;
  if ($type === 'data_access_request' && $op === 'update' && !mica_data_access_can_edit_request($node)) {
    return NODE_ACCESS_DENY;
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function mica_data_access_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  $links = array();

  if ($root_path == 'data-access/approved' || $root_path == 'node/%/queries/%' || $root_path == 'data-access/requests') {
    if (node_access('create', 'data_access_request')) {

      $href = url('data-access/request');
      if ($root_path == 'node/%/queries/%') {
        $dataset_node = $router_item['page_arguments'][0];
        $href = url('data-access/request', array('query' => array('field_dataset_access' => $dataset_node->nid)));
      }

      $links['add-data-access-request'] = array(
        '#theme' => 'menu_local_action',
        '#link' => array(
           'title' => t('<a href="@url">Request for Data Access</a>', array('@url' => $href)),
           'localized_options' => array('html' => TRUE),
      ),
      );
    }
  }

  if ($root_path == 'data-access/request') {
    global $user;
    if ($user->uid == 0 && !node_access('create', 'data_access_request')) {
      $links['login'] = array(
        '#theme' => 'menu_local_action',
        '#link' => array(
          'title' => t('<a href="@login">Log in</a> or <a href="@register">Register</a> to submit a Data Access Request.', array(
            '@login' => url('user/login', array('query' => drupal_get_destination())),
            '@register' => url('user/register', array('query' => drupal_get_destination())),
      )),
         'localized_options' => array('html' => TRUE),
      ),
      );
    }
  }

  if ($root_path === 'node/%') {
    $explode=explode('/', $data['tabs'][0]['output'][0]['#link']['href']);
    $node = node_load($explode[1]);
     
    if ($node && $node->type === 'data_access_request') {
      $href='javascript:window.print();';
      $links['print'] = array(
        '#theme' => 'menu_local_action',
        '#link' => array(
          'title' => t('<a href="@url">Print</a>', array('@url' => $href)),
          'localized_options' => array('html' => TRUE),
      ),
      );
    }
  }

  $data['actions']['output'] = array_merge($data['actions']['output'], $links);
}

function mica_data_access_can_edit_request($node) {
  $node_loaded = node_load($node->nid);
  if (isset($node_loaded->field_data_access_review[LANGUAGE_NONE][0]['nid'])) {
    $review_id = $node_loaded->field_data_access_review[LANGUAGE_NONE][0]['nid'];
    $result = db_query("SELECT * from field_data_field_review_status WHERE ".
                  "entity_type = 'node' AND ".
                  "bundle = 'data_access_review' AND ".
                  "entity_id = ".$review_id." AND ".
                  "field_review_status_value IN ('accepted', 'rejected', 'submitted') ");
    return $result->rowCount() == 0;
  } else {
    return true;
  }
}

/**
 * Implements hook_field_attach_form()
 */
function mica_data_access_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {
  if ($entity_type == 'node' && $entity->type == 'data_access_request') {
    // remove the data access review field
    unset($form['field_data_access_review']);
    // set default values provided as arguments (if any)
    if (array_key_exists('field_dataset_access', $_GET)) {
      $form['field_dataset_access'][LANGUAGE_NONE]['#default_value'] = array($_GET['field_dataset_access']);
    }
  }
  elseif ($entity_type == 'node' && $entity->type == 'data_access_review') {
    unset($form['field_data_access']);
    unset($form['title']);
  }
}


function mica_data_access_request_add() {
  if (node_access('create', 'data_access_request')) {
    $content = node_add('data_access_request');
    drupal_set_title(t('Request for Data Access'));
    return $content;
  }
  else {
    global $user;
    drupal_set_title(t('Request for Data Access is restricted'));
    $output = 'You must have an account before submitting any data access application to the Data Access Officer.';
    if ($user->uid != 0) {
      $output = '<div><p>' . t('Submitting a Data Access Request is restricted to authorized users.') . '</p></div>';
    }
    return $output;
  }
}

function mica_data_access_request_review_access($node,$op = NULL) {
  if ($node->type != 'data_access_request') {
    return FALSE;
  }

  if (!empty($node->field_data_access_review)) {
    return FALSE;
  }

  return node_access('create', 'data_access_review');
}


function mica_data_access_request_review($node) {
  global $user;

  if (empty($node->field_data_access_review)) {
    // create a data access review associated to this request
    $review_node = new stdClass();
    $review_node->type = 'data_access_review';
    node_object_prepare($review_node);
    $review_node->title = $node->title;
    $review_node->language = $node->language;
    $review_node->uid = $user->uid; // current user is the author
    $review_node->status = $node->status; // same publication status
    $review_node->field_data_access[$node->language] = array(array('nid' => $node->nid));
    $review_node->field_review_status[$node->language] = array(array('value' => 'submitted'));

    node_save($review_node);

    watchdog('mica', 'Created data access review %review for request %request by user %user',
    array(
        '%review' => $review_node->nid, 
        '%request' => $node->nid,
        '%user' => $user->uid,
    ), WATCHDOG_INFO);

    $node->field_data_access_review[$node->language] = array(array('nid' => $review_node->nid));
    node_save($node);
  }

  // go to the associated review
  drupal_goto('node/' . $node->field_data_access_review[$node->language][0]['nid']);
}

/**
 * Get the first contact associated with the provided user.
 * @param user $user
 * @return FALSE or the result of contact node entity query
 */
function mica_data_access_reviewer_contact($user) {
  $field = field_info_field('field_daco');
  $query = new EntityFieldQuery;
  $query->entityCondition('entity_type', 'node')
  ->entityCondition('bundle', 'contact')
  ->fieldCondition($field, 'uid', $user->uid);

  $entities = $query->execute();

  if (!empty($entities)) {
    return array_shift($entities['node']);
  }
  else {
    return FALSE;
  }
}

function mica_data_access_delete($node) {
  $node_loaded = node_load($node->nid);
  if ($node_loaded->type === 'data_access_request') {
    if (isset($node_loaded->field_data_access_review[LANGUAGE_NONE][0]['nid'])) {
      $nid_review_to_delete = $node_loaded->field_data_access_review[LANGUAGE_NONE][0]['nid'];
      mica_data_access_delete_without_calling_delete_hook(array($nid_review_to_delete));
    }
  }

  if ($node_loaded->type === 'data_access_review') {
    $field = field_info_field('field_data_access_review');
    $query = new EntityFieldQuery;
    $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'data_access_request')
    ->fieldCondition($field, 'nid', $node_loaded->nid);

    $entity = $query->execute();
    $keys = array_keys($entity['node']);
    $nid_request_to_delete = $keys[0];
    mica_data_access_delete_without_calling_delete_hook(array($nid_request_to_delete));
  }

}
/**
 * Copy of node_delete_multiple from node.module
 * BUT don't call node_invoke($node, 'delete') to avoid hook loop
 *
 * @param $nids
 *   An array of node IDs.
 */
function mica_data_access_delete_without_calling_delete_hook($nids) {
  $transaction = db_transaction();
  if (!empty($nids)) {
    $nodes = node_load_multiple($nids, array());

    try {
      foreach ($nodes as $nid => $node) {
        // Call the node-specific callback (if any):
        //node_invoke($node, 'delete');
        module_invoke_all('node_delete', $node);
        module_invoke_all('entity_delete', $node, 'node');
        field_attach_delete('node', $node);

        // Remove this node from the search index if needed.
        // This code is implemented in node module rather than in search module,
        // because node module is implementing search module's API, not the other
        // way around.
        if (module_exists('search')) {
          search_reindex($nid, 'node');
        }
      }

      // Delete after calling hooks so that they can query node tables as needed.
      db_delete('node')
      ->condition('nid', $nids, 'IN')
      ->execute();
      db_delete('node_revision')
      ->condition('nid', $nids, 'IN')
      ->execute();
      db_delete('history')
      ->condition('nid', $nids, 'IN')
      ->execute();
      db_delete('node_access')
      ->condition('nid', $nids, 'IN')
      ->execute();
    }
    catch (Exception $e) {
      $transaction->rollback();
      watchdog_exception('node', $e);
      throw $e;
    }

    // Clear the page and block and node_load_multiple caches.
    entity_get_controller('node')->resetCache();
  }
}

