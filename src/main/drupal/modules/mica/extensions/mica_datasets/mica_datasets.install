<?php

/**
 * @file
 * Install, update and uninstall functions for the Mica Datasets module.
 */

/**
 * Implements hook_install().
 */
function mica_datasets_install() {
  _mica_datasets_configure_field_bundle_settings();
}

/**
 * Implements hook_schema().
 */
function mica_datasets_schema() {
  $schema['mica_dataset_connector'] = array(
    'description' => 'Stores all dataset connectors created through Mica Datasets.',
    'fields' => array(
      'id' => array(
        'description' => 'The primary identifier for a connector.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'The displayed name for a connector.',
        'type' => 'varchar',
        'length' => 200,
        'not null' => TRUE,
      ),
      'description' => array(
        'description' => 'The displayed description for a connector.',
        'type' => 'text',
        'not null' => FALSE,
      ),
      'dataset_id' => array(
        'description' => 'The dataset identifier for a connector.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'study_id' => array(
        'description' => 'The study identifier for a connector.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'class' => array(
        'description' => 'The id of the connection class to use for this connector.',
        'type' => 'varchar',
        'length' => 100,
        'not null' => TRUE,
      ),
      'options' => array(
        'description' => 'The options used to configure the service object.',
        'type' => 'text',
        'serialize' => TRUE,
        'not null' => TRUE,
      ),
      'enabled' => array(
        'description' => 'A flag indicating whether the connector is enabled.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
      ),
    ) + entity_exportable_schema_fields(),
    'indexes' => array(
      'indexing' => array('enabled', 'study_id', 'dataset_id'),
    ),
    'primary key' => array('id'),
  );

  $schema['mica_dataset_query'] = array(
    'description' => 'Stores all the queries that are to be applied to their associated Mica Datasets.',
    'fields' => array(
      'id' => array(
        'description' => 'The primary identifier for a query.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'The displayed name for a query.',
        'type' => 'varchar',
        'length' => 200,
        'not null' => TRUE,
      ),
      'description' => array(
        'description' => 'The displayed description for a query.',
        'type' => 'text',
        'not null' => FALSE,
      ),
      'dataset_id' => array(
        'description' => 'The dataset identifier for a query.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'user_id' => array(
        'description' => 'The query author identifier.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'published' => array(
        'description' => 'A flag indicating whether the query is available to users that are not the author.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
    ) + entity_exportable_schema_fields(),
    'indexes' => array(
      'indexing' => array('published', 'user_id', 'dataset_id'),
    ),
    'primary key' => array('id'),
  );

  $schema['mica_dataset_query_term'] = array(
    'description' => 'Stores the query terms of a query.',
    'fields' => array(
      'id' => array(
        'description' => 'The primary identifier for a query term.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'query_id' => array(
        'description' => 'The query identifier for a query term.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'variable_id' => array(
        'description' => 'The variable identifier for a query term.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'weight' => array(
        'description' => 'The weight of a term in its query.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'depth' => array(
        'description' => 'The depth of a term in its query.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'options' => array(
        'description' => 'The options that describe the query term.',
        'type' => 'text',
        'serialize' => TRUE,
        'not null' => TRUE,
      ),
    ) + entity_exportable_schema_fields(),
    'indexes' => array(
      'indexing' => array('query_id'),
    ),
    'primary key' => array('id'),
  );

  return $schema;
}

/**
 * Implements hook_requirements()
 *
 */
function mica_datasets_requirements($phase) {
  $requirements = array();

  $path = drupal_get_path('module', 'taxonomy_csv');
  $info = drupal_parse_info_file($path .'/taxonomy_csv.info');
  $version = $info['version'];
  $nb = explode('.', substr($version, strpos($version, '-') + 1));
  
  if ($nb[0] < 5 || ($nb[0] == 5 && $nb[1] < 10)){
    $requirements['taxonomy_csv']['severity'] = REQUIREMENT_ERROR;
    $requirements['taxonomy_csv']['title'] = 'mica_datasets';
    $requirements['taxonomy_csv']['description'] = t('The version of taxonomy_csv must be >= 5.10');
  }

  return $requirements;
}

/**
 *
 * Import default taxonomy dimensions
 */
function mica_datasets_update_7120(&$sandbox) {

  watchdog('mica', 'Import dataschema dimensions', array(), WATCHDOG_INFO);
  try {

    module_load_include('inc', 'mica_datasets', 'mica_datasets.import_taxonomies');

    $taxonomies = _mica_datasets_taxonomies();
    if (!isset($sandbox['progress'])) {
      $sandbox['progress'] = 0;
      $sandbox['max'] = count($taxonomies);
    }
    foreach ($taxonomies as $taxonomy) {
      _mica_datasets_taxonomy_import($taxonomy[0], $taxonomy[1]);
      $sandbox['progress']++;
    }
    $sandbox['#finished'] = empty($sandbox['max']) ? 1 : ($sandbox['progress'] / $sandbox['max']);
    return st('Dataschema dimensions have been successfully imported!');
  } catch (Exception $e) {
    throw new DrupalUpdateException('Failed to update taxonomies. You have to import taxonomies manually.');
  }


  _mica_datasets_configure_field_bundle_settings();

  module_load_include('inc', 'mica_datasets', 'mica_datasets.facet_blocks');
  mica_datasets_configure_facet_blocks();
}

/**
 * Manually configure field_bundle_settings variable because it is exported via strongarms in mica_studies
 * so we can't export variable display configuration in mica_datasets.
 */
function _mica_datasets_configure_field_bundle_settings() {
  $variable_settings = array(
    'view_modes' => array(
      'teaser' => array('custom_settings' => true),
      'banner_area' => array('custom_settings' => true),
      'left_area' => array('custom_settings' => true),
      'right_area' => array('custom_settings' => true),
    ),
    'extra_fields' => array(
      'form' => array(),
      'display' => array(),
    ),
  );
  field_bundle_settings('node', 'variable', $variable_settings);
}
