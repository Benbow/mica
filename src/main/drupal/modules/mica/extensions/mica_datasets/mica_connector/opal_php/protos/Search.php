<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: Search.proto
//   Date: 2013-01-16 16:03:59

namespace Search {

  class TermOperator extends \DrSlump\Protobuf\Enum {
    const AND_OP = 0;
    const OR_OP = 1;
  }
}
namespace Search {

  class QueryTermsDto extends \DrSlump\Protobuf\Message {

    /**  @var \Search\QueryTermDto[]  */
    public $queries = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Search.QueryTermsDto');

      // REPEATED MESSAGE queries = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "queries";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Search\QueryTermDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <queries> has a value
     *
     * @return boolean
     */
    public function hasQueries(){
      return $this->_has(1);
    }
    
    /**
     * Clear <queries> value
     *
     * @return \Search\QueryTermsDto
     */
    public function clearQueries(){
      return $this->_clear(1);
    }
    
    /**
     * Get <queries> value
     *
     * @param int $idx
     * @return \Search\QueryTermDto
     */
    public function getQueries($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <queries> value
     *
     * @param \Search\QueryTermDto $value
     * @return \Search\QueryTermsDto
     */
    public function setQueries(\Search\QueryTermDto $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <queries>
     *
     * @return \Search\QueryTermDto[]
     */
    public function getQueriesList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <queries>
     *
     * @param \Search\QueryTermDto $value
     * @return \Search\QueryTermsDto
     */
    public function addQueries(\Search\QueryTermDto $value){
     return $this->_add(1, $value);
    }
  }
}

namespace Search {

  class QueryTermDto extends \DrSlump\Protobuf\Message {

    /**  @var boolean */
    public $global = null;
    
    /**  @var string */
    public $facet = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Search.QueryTermDto');

      // OPTIONAL BOOL global = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "global";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING facet = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "facet";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <global> has a value
     *
     * @return boolean
     */
    public function hasGlobal(){
      return $this->_has(1);
    }
    
    /**
     * Clear <global> value
     *
     * @return \Search\QueryTermDto
     */
    public function clearGlobal(){
      return $this->_clear(1);
    }
    
    /**
     * Get <global> value
     *
     * @return boolean
     */
    public function getGlobal(){
      return $this->_get(1);
    }
    
    /**
     * Set <global> value
     *
     * @param boolean $value
     * @return \Search\QueryTermDto
     */
    public function setGlobal( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <facet> has a value
     *
     * @return boolean
     */
    public function hasFacet(){
      return $this->_has(2);
    }
    
    /**
     * Clear <facet> value
     *
     * @return \Search\QueryTermDto
     */
    public function clearFacet(){
      return $this->_clear(2);
    }
    
    /**
     * Get <facet> value
     *
     * @return string
     */
    public function getFacet(){
      return $this->_get(2);
    }
    
    /**
     * Set <facet> value
     *
     * @param string $value
     * @return \Search\QueryTermDto
     */
    public function setFacet( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace Search {

  class VariableTermDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $variable = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Search.VariableTermDto');

      // REQUIRED STRING variable = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "variable";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <variable> has a value
     *
     * @return boolean
     */
    public function hasVariable(){
      return $this->_has(1);
    }
    
    /**
     * Clear <variable> value
     *
     * @return \Search\VariableTermDto
     */
    public function clearVariable(){
      return $this->_clear(1);
    }
    
    /**
     * Get <variable> value
     *
     * @return string
     */
    public function getVariable(){
      return $this->_get(1);
    }
    
    /**
     * Set <variable> value
     *
     * @param string $value
     * @return \Search\VariableTermDto
     */
    public function setVariable( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace Search {

  class FilterDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $variable = null;
    
    /**  @var boolean */
    public $not = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Search.FilterDto');

      // REQUIRED STRING variable = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "variable";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL BOOL not = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "not";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <variable> has a value
     *
     * @return boolean
     */
    public function hasVariable(){
      return $this->_has(1);
    }
    
    /**
     * Clear <variable> value
     *
     * @return \Search\FilterDto
     */
    public function clearVariable(){
      return $this->_clear(1);
    }
    
    /**
     * Get <variable> value
     *
     * @return string
     */
    public function getVariable(){
      return $this->_get(1);
    }
    
    /**
     * Set <variable> value
     *
     * @param string $value
     * @return \Search\FilterDto
     */
    public function setVariable( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <not> has a value
     *
     * @return boolean
     */
    public function hasNot(){
      return $this->_has(2);
    }
    
    /**
     * Clear <not> value
     *
     * @return \Search\FilterDto
     */
    public function clearNot(){
      return $this->_clear(2);
    }
    
    /**
     * Get <not> value
     *
     * @return boolean
     */
    public function getNot(){
      return $this->_get(2);
    }
    
    /**
     * Set <not> value
     *
     * @param boolean $value
     * @return \Search\FilterDto
     */
    public function setNot( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace Search {

  class LogicalTermDto extends \DrSlump\Protobuf\Message {

    /**  @var int - \Search\TermOperator */
    public $operator = \Search\TermOperator::AND_OP;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Search.LogicalTermDto');

      // REQUIRED ENUM operator = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "operator";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\Search\TermOperator';
      $f->default   = \Search\TermOperator::AND_OP;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <operator> has a value
     *
     * @return boolean
     */
    public function hasOperator(){
      return $this->_has(1);
    }
    
    /**
     * Clear <operator> value
     *
     * @return \Search\LogicalTermDto
     */
    public function clearOperator(){
      return $this->_clear(1);
    }
    
    /**
     * Get <operator> value
     *
     * @return int - \Search\TermOperator
     */
    public function getOperator(){
      return $this->_get(1);
    }
    
    /**
     * Set <operator> value
     *
     * @param int - \Search\TermOperator $value
     * @return \Search\LogicalTermDto
     */
    public function setOperator( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace Search {

  class InTermDto extends \DrSlump\Protobuf\Message {

    /**  @var string[]  */
    public $values = array();
    
    /**  @var int */
    public $minimum_match = 1;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Search.InTermDto');

      // REPEATED STRING values = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "values";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL INT32 minimum_match = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "minimum_match";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = 1;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <values> has a value
     *
     * @return boolean
     */
    public function hasValues(){
      return $this->_has(1);
    }
    
    /**
     * Clear <values> value
     *
     * @return \Search\InTermDto
     */
    public function clearValues(){
      return $this->_clear(1);
    }
    
    /**
     * Get <values> value
     *
     * @param int $idx
     * @return string
     */
    public function getValues($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <values> value
     *
     * @param string $value
     * @return \Search\InTermDto
     */
    public function setValues( $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <values>
     *
     * @return string[]
     */
    public function getValuesList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <values>
     *
     * @param string $value
     * @return \Search\InTermDto
     */
    public function addValues( $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <minimum_match> has a value
     *
     * @return boolean
     */
    public function hasMinimumMatch(){
      return $this->_has(2);
    }
    
    /**
     * Clear <minimum_match> value
     *
     * @return \Search\InTermDto
     */
    public function clearMinimumMatch(){
      return $this->_clear(2);
    }
    
    /**
     * Get <minimum_match> value
     *
     * @return int
     */
    public function getMinimumMatch(){
      return $this->_get(2);
    }
    
    /**
     * Set <minimum_match> value
     *
     * @param int $value
     * @return \Search\InTermDto
     */
    public function setMinimumMatch( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace Search {

  class RangeTermDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $from = null;
    
    /**  @var string */
    public $to = null;
    
    /**  @var boolean */
    public $include_lower = true;
    
    /**  @var boolean */
    public $include_upper = false;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Search.RangeTermDto');

      // OPTIONAL STRING from = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "from";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING to = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "to";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL include_lower = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "include_lower";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = true;
      $descriptor->addField($f);

      // OPTIONAL BOOL include_upper = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "include_upper";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->default   = false;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <from> has a value
     *
     * @return boolean
     */
    public function hasFrom(){
      return $this->_has(1);
    }
    
    /**
     * Clear <from> value
     *
     * @return \Search\RangeTermDto
     */
    public function clearFrom(){
      return $this->_clear(1);
    }
    
    /**
     * Get <from> value
     *
     * @return string
     */
    public function getFrom(){
      return $this->_get(1);
    }
    
    /**
     * Set <from> value
     *
     * @param string $value
     * @return \Search\RangeTermDto
     */
    public function setFrom( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <to> has a value
     *
     * @return boolean
     */
    public function hasTo(){
      return $this->_has(2);
    }
    
    /**
     * Clear <to> value
     *
     * @return \Search\RangeTermDto
     */
    public function clearTo(){
      return $this->_clear(2);
    }
    
    /**
     * Get <to> value
     *
     * @return string
     */
    public function getTo(){
      return $this->_get(2);
    }
    
    /**
     * Set <to> value
     *
     * @param string $value
     * @return \Search\RangeTermDto
     */
    public function setTo( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <include_lower> has a value
     *
     * @return boolean
     */
    public function hasIncludeLower(){
      return $this->_has(3);
    }
    
    /**
     * Clear <include_lower> value
     *
     * @return \Search\RangeTermDto
     */
    public function clearIncludeLower(){
      return $this->_clear(3);
    }
    
    /**
     * Get <include_lower> value
     *
     * @return boolean
     */
    public function getIncludeLower(){
      return $this->_get(3);
    }
    
    /**
     * Set <include_lower> value
     *
     * @param boolean $value
     * @return \Search\RangeTermDto
     */
    public function setIncludeLower( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <include_upper> has a value
     *
     * @return boolean
     */
    public function hasIncludeUpper(){
      return $this->_has(4);
    }
    
    /**
     * Clear <include_upper> value
     *
     * @return \Search\RangeTermDto
     */
    public function clearIncludeUpper(){
      return $this->_clear(4);
    }
    
    /**
     * Get <include_upper> value
     *
     * @return boolean
     */
    public function getIncludeUpper(){
      return $this->_get(4);
    }
    
    /**
     * Set <include_upper> value
     *
     * @param boolean $value
     * @return \Search\RangeTermDto
     */
    public function setIncludeUpper( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace Search {

  class QueryResultDto extends \DrSlump\Protobuf\Message {

    /**  @var \Search\FacetResultDto[]  */
    public $facets = array();
    
    /**  @var int */
    public $total_hits = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Search.QueryResultDto');

      // REPEATED MESSAGE facets = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "facets";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Search\FacetResultDto';
      $descriptor->addField($f);

      // REQUIRED INT32 total_hits = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "total_hits";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <facets> has a value
     *
     * @return boolean
     */
    public function hasFacets(){
      return $this->_has(1);
    }
    
    /**
     * Clear <facets> value
     *
     * @return \Search\QueryResultDto
     */
    public function clearFacets(){
      return $this->_clear(1);
    }
    
    /**
     * Get <facets> value
     *
     * @param int $idx
     * @return \Search\FacetResultDto
     */
    public function getFacets($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <facets> value
     *
     * @param \Search\FacetResultDto $value
     * @return \Search\QueryResultDto
     */
    public function setFacets(\Search\FacetResultDto $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <facets>
     *
     * @return \Search\FacetResultDto[]
     */
    public function getFacetsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <facets>
     *
     * @param \Search\FacetResultDto $value
     * @return \Search\QueryResultDto
     */
    public function addFacets(\Search\FacetResultDto $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <total_hits> has a value
     *
     * @return boolean
     */
    public function hasTotalHits(){
      return $this->_has(2);
    }
    
    /**
     * Clear <total_hits> value
     *
     * @return \Search\QueryResultDto
     */
    public function clearTotalHits(){
      return $this->_clear(2);
    }
    
    /**
     * Get <total_hits> value
     *
     * @return int
     */
    public function getTotalHits(){
      return $this->_get(2);
    }
    
    /**
     * Set <total_hits> value
     *
     * @param int $value
     * @return \Search\QueryResultDto
     */
    public function setTotalHits( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace Search\FacetResultDto {

  class FilterResultDto extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $count = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Search.FacetResultDto.FilterResultDto');

      // REQUIRED INT32 count = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "count";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <count> has a value
     *
     * @return boolean
     */
    public function hasCount(){
      return $this->_has(1);
    }
    
    /**
     * Clear <count> value
     *
     * @return \Search\FacetResultDto\FilterResultDto
     */
    public function clearCount(){
      return $this->_clear(1);
    }
    
    /**
     * Get <count> value
     *
     * @return int
     */
    public function getCount(){
      return $this->_get(1);
    }
    
    /**
     * Set <count> value
     *
     * @param int $value
     * @return \Search\FacetResultDto\FilterResultDto
     */
    public function setCount( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace Search\FacetResultDto {

  class TermFrequencyResultDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $term = null;
    
    /**  @var int */
    public $count = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Search.FacetResultDto.TermFrequencyResultDto');

      // REQUIRED STRING term = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "term";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED INT32 count = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "count";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <term> has a value
     *
     * @return boolean
     */
    public function hasTerm(){
      return $this->_has(1);
    }
    
    /**
     * Clear <term> value
     *
     * @return \Search\FacetResultDto\TermFrequencyResultDto
     */
    public function clearTerm(){
      return $this->_clear(1);
    }
    
    /**
     * Get <term> value
     *
     * @return string
     */
    public function getTerm(){
      return $this->_get(1);
    }
    
    /**
     * Set <term> value
     *
     * @param string $value
     * @return \Search\FacetResultDto\TermFrequencyResultDto
     */
    public function setTerm( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <count> has a value
     *
     * @return boolean
     */
    public function hasCount(){
      return $this->_has(2);
    }
    
    /**
     * Clear <count> value
     *
     * @return \Search\FacetResultDto\TermFrequencyResultDto
     */
    public function clearCount(){
      return $this->_clear(2);
    }
    
    /**
     * Get <count> value
     *
     * @return int
     */
    public function getCount(){
      return $this->_get(2);
    }
    
    /**
     * Set <count> value
     *
     * @param int $value
     * @return \Search\FacetResultDto\TermFrequencyResultDto
     */
    public function setCount( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace Search\FacetResultDto {

  class StatisticalResultDto extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $count = 0;
    
    /**  @var float */
    public $total = null;
    
    /**  @var float */
    public $min = null;
    
    /**  @var float */
    public $max = null;
    
    /**  @var float */
    public $mean = null;
    
    /**  @var float */
    public $sum_of_squares = null;
    
    /**  @var float */
    public $variance = null;
    
    /**  @var float */
    public $std_deviation = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Search.FacetResultDto.StatisticalResultDto');

      // REQUIRED INT64 count = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "count";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->default   = 0;
      $descriptor->addField($f);

      // OPTIONAL FLOAT total = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "total";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT min = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "min";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT max = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "max";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT mean = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "mean";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT sum_of_squares = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "sum_of_squares";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT variance = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "variance";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FLOAT std_deviation = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "std_deviation";
      $f->type      = \DrSlump\Protobuf::TYPE_FLOAT;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <count> has a value
     *
     * @return boolean
     */
    public function hasCount(){
      return $this->_has(1);
    }
    
    /**
     * Clear <count> value
     *
     * @return \Search\FacetResultDto\StatisticalResultDto
     */
    public function clearCount(){
      return $this->_clear(1);
    }
    
    /**
     * Get <count> value
     *
     * @return int
     */
    public function getCount(){
      return $this->_get(1);
    }
    
    /**
     * Set <count> value
     *
     * @param int $value
     * @return \Search\FacetResultDto\StatisticalResultDto
     */
    public function setCount( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <total> has a value
     *
     * @return boolean
     */
    public function hasTotal(){
      return $this->_has(2);
    }
    
    /**
     * Clear <total> value
     *
     * @return \Search\FacetResultDto\StatisticalResultDto
     */
    public function clearTotal(){
      return $this->_clear(2);
    }
    
    /**
     * Get <total> value
     *
     * @return float
     */
    public function getTotal(){
      return $this->_get(2);
    }
    
    /**
     * Set <total> value
     *
     * @param float $value
     * @return \Search\FacetResultDto\StatisticalResultDto
     */
    public function setTotal( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <min> has a value
     *
     * @return boolean
     */
    public function hasMin(){
      return $this->_has(3);
    }
    
    /**
     * Clear <min> value
     *
     * @return \Search\FacetResultDto\StatisticalResultDto
     */
    public function clearMin(){
      return $this->_clear(3);
    }
    
    /**
     * Get <min> value
     *
     * @return float
     */
    public function getMin(){
      return $this->_get(3);
    }
    
    /**
     * Set <min> value
     *
     * @param float $value
     * @return \Search\FacetResultDto\StatisticalResultDto
     */
    public function setMin( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <max> has a value
     *
     * @return boolean
     */
    public function hasMax(){
      return $this->_has(4);
    }
    
    /**
     * Clear <max> value
     *
     * @return \Search\FacetResultDto\StatisticalResultDto
     */
    public function clearMax(){
      return $this->_clear(4);
    }
    
    /**
     * Get <max> value
     *
     * @return float
     */
    public function getMax(){
      return $this->_get(4);
    }
    
    /**
     * Set <max> value
     *
     * @param float $value
     * @return \Search\FacetResultDto\StatisticalResultDto
     */
    public function setMax( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <mean> has a value
     *
     * @return boolean
     */
    public function hasMean(){
      return $this->_has(5);
    }
    
    /**
     * Clear <mean> value
     *
     * @return \Search\FacetResultDto\StatisticalResultDto
     */
    public function clearMean(){
      return $this->_clear(5);
    }
    
    /**
     * Get <mean> value
     *
     * @return float
     */
    public function getMean(){
      return $this->_get(5);
    }
    
    /**
     * Set <mean> value
     *
     * @param float $value
     * @return \Search\FacetResultDto\StatisticalResultDto
     */
    public function setMean( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <sum_of_squares> has a value
     *
     * @return boolean
     */
    public function hasSumOfSquares(){
      return $this->_has(6);
    }
    
    /**
     * Clear <sum_of_squares> value
     *
     * @return \Search\FacetResultDto\StatisticalResultDto
     */
    public function clearSumOfSquares(){
      return $this->_clear(6);
    }
    
    /**
     * Get <sum_of_squares> value
     *
     * @return float
     */
    public function getSumOfSquares(){
      return $this->_get(6);
    }
    
    /**
     * Set <sum_of_squares> value
     *
     * @param float $value
     * @return \Search\FacetResultDto\StatisticalResultDto
     */
    public function setSumOfSquares( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <variance> has a value
     *
     * @return boolean
     */
    public function hasVariance(){
      return $this->_has(7);
    }
    
    /**
     * Clear <variance> value
     *
     * @return \Search\FacetResultDto\StatisticalResultDto
     */
    public function clearVariance(){
      return $this->_clear(7);
    }
    
    /**
     * Get <variance> value
     *
     * @return float
     */
    public function getVariance(){
      return $this->_get(7);
    }
    
    /**
     * Set <variance> value
     *
     * @param float $value
     * @return \Search\FacetResultDto\StatisticalResultDto
     */
    public function setVariance( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <std_deviation> has a value
     *
     * @return boolean
     */
    public function hasStdDeviation(){
      return $this->_has(8);
    }
    
    /**
     * Clear <std_deviation> value
     *
     * @return \Search\FacetResultDto\StatisticalResultDto
     */
    public function clearStdDeviation(){
      return $this->_clear(8);
    }
    
    /**
     * Get <std_deviation> value
     *
     * @return float
     */
    public function getStdDeviation(){
      return $this->_get(8);
    }
    
    /**
     * Set <std_deviation> value
     *
     * @param float $value
     * @return \Search\FacetResultDto\StatisticalResultDto
     */
    public function setStdDeviation( $value){
      return $this->_set(8, $value);
    }
  }
}

namespace Search {

  class FacetResultDto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $facet = null;
    
    /**  @var \Search\FacetResultDto\TermFrequencyResultDto[]  */
    public $frequencies = array();
    
    /**  @var \Search\FacetResultDto\StatisticalResultDto */
    public $statistics = null;
    
    /**  @var \Search\FacetResultDto\FilterResultDto[]  */
    public $filters = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'Search.FacetResultDto');

      // REQUIRED STRING facet = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "facet";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REPEATED MESSAGE frequencies = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "frequencies";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Search\FacetResultDto\TermFrequencyResultDto';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE statistics = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "statistics";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\Search\FacetResultDto\StatisticalResultDto';
      $descriptor->addField($f);

      // REPEATED MESSAGE filters = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "filters";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\Search\FacetResultDto\FilterResultDto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <facet> has a value
     *
     * @return boolean
     */
    public function hasFacet(){
      return $this->_has(1);
    }
    
    /**
     * Clear <facet> value
     *
     * @return \Search\FacetResultDto
     */
    public function clearFacet(){
      return $this->_clear(1);
    }
    
    /**
     * Get <facet> value
     *
     * @return string
     */
    public function getFacet(){
      return $this->_get(1);
    }
    
    /**
     * Set <facet> value
     *
     * @param string $value
     * @return \Search\FacetResultDto
     */
    public function setFacet( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <frequencies> has a value
     *
     * @return boolean
     */
    public function hasFrequencies(){
      return $this->_has(2);
    }
    
    /**
     * Clear <frequencies> value
     *
     * @return \Search\FacetResultDto
     */
    public function clearFrequencies(){
      return $this->_clear(2);
    }
    
    /**
     * Get <frequencies> value
     *
     * @param int $idx
     * @return \Search\FacetResultDto\TermFrequencyResultDto
     */
    public function getFrequencies($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <frequencies> value
     *
     * @param \Search\FacetResultDto\TermFrequencyResultDto $value
     * @return \Search\FacetResultDto
     */
    public function setFrequencies(\Search\FacetResultDto\TermFrequencyResultDto $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <frequencies>
     *
     * @return \Search\FacetResultDto\TermFrequencyResultDto[]
     */
    public function getFrequenciesList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <frequencies>
     *
     * @param \Search\FacetResultDto\TermFrequencyResultDto $value
     * @return \Search\FacetResultDto
     */
    public function addFrequencies(\Search\FacetResultDto\TermFrequencyResultDto $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <statistics> has a value
     *
     * @return boolean
     */
    public function hasStatistics(){
      return $this->_has(3);
    }
    
    /**
     * Clear <statistics> value
     *
     * @return \Search\FacetResultDto
     */
    public function clearStatistics(){
      return $this->_clear(3);
    }
    
    /**
     * Get <statistics> value
     *
     * @return \Search\FacetResultDto\StatisticalResultDto
     */
    public function getStatistics(){
      return $this->_get(3);
    }
    
    /**
     * Set <statistics> value
     *
     * @param \Search\FacetResultDto\StatisticalResultDto $value
     * @return \Search\FacetResultDto
     */
    public function setStatistics(\Search\FacetResultDto\StatisticalResultDto $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <filters> has a value
     *
     * @return boolean
     */
    public function hasFilters(){
      return $this->_has(4);
    }
    
    /**
     * Clear <filters> value
     *
     * @return \Search\FacetResultDto
     */
    public function clearFilters(){
      return $this->_clear(4);
    }
    
    /**
     * Get <filters> value
     *
     * @param int $idx
     * @return \Search\FacetResultDto\FilterResultDto
     */
    public function getFilters($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <filters> value
     *
     * @param \Search\FacetResultDto\FilterResultDto $value
     * @return \Search\FacetResultDto
     */
    public function setFilters(\Search\FacetResultDto\FilterResultDto $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <filters>
     *
     * @return \Search\FacetResultDto\FilterResultDto[]
     */
    public function getFiltersList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <filters>
     *
     * @param \Search\FacetResultDto\FilterResultDto $value
     * @return \Search\FacetResultDto
     */
    public function addFilters(\Search\FacetResultDto\FilterResultDto $value){
     return $this->_add(4, $value);
    }
  }
}

namespace {
  \Search\QueryTermDto::extension(function(){
      // OPTIONAL MESSAGE Search.VariableTermDto.field = 1001
    $f = new \DrSlump\Protobuf\Field();
    $f->number    = 1001;
    $f->name      = "Search.VariableTermDto.field";
    $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
    $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
    $f->reference = '\Search\VariableTermDto';
    return $f;
  });
  \Search\QueryTermDto::extension(function(){
      // OPTIONAL MESSAGE Search.LogicalTermDto.filter = 3000
    $f = new \DrSlump\Protobuf\Field();
    $f->number    = 3000;
    $f->name      = "Search.LogicalTermDto.filter";
    $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
    $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
    $f->reference = '\Search\LogicalTermDto';
    return $f;
  });
  \Search\QueryTermDto::extension(function(){
      // OPTIONAL MESSAGE Search.LogicalTermDto.facet_filter = 3001
    $f = new \DrSlump\Protobuf\Field();
    $f->number    = 3001;
    $f->name      = "Search.LogicalTermDto.facet_filter";
    $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
    $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
    $f->reference = '\Search\LogicalTermDto';
    return $f;
  });
  \Search\LogicalTermDto::extension(function(){
      // REPEATED MESSAGE Search.FilterDto.filters = 1001
    $f = new \DrSlump\Protobuf\Field();
    $f->number    = 1001;
    $f->name      = "Search.FilterDto.filters";
    $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
    $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
    $f->reference = '\Search\FilterDto';
    return $f;
  });
  \Search\FilterDto::extension(function(){
      // OPTIONAL MESSAGE Search.InTermDto.terms = 1000
    $f = new \DrSlump\Protobuf\Field();
    $f->number    = 1000;
    $f->name      = "Search.InTermDto.terms";
    $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
    $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
    $f->reference = '\Search\InTermDto';
    return $f;
  });
  \Search\FilterDto::extension(function(){
      // OPTIONAL MESSAGE Search.RangeTermDto.range = 1001
    $f = new \DrSlump\Protobuf\Field();
    $f->number    = 1001;
    $f->name      = "Search.RangeTermDto.range";
    $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
    $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
    $f->reference = '\Search\RangeTermDto';
    return $f;
  });
}