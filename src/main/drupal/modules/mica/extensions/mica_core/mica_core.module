<?php

require_once('mica_core.features.inc');

/**
 * Implements hook_form().
 */
function mica_core_form($node, &$form_state) {
  return node_content_form($node, $form_state);
}

function mica_core_node_title_exists($node_type, $title) {
  $q = db_select('node', 'n');
  $q->addField('n', 'nid');
  $q->condition('n.type', $node_type);
  $q->condition('n.title', $title);
  $q->range(0, 1);
  $result = $q->execute();
  return $result->fetchField() ? TRUE : FALSE;
}

/**
 * Creates a menu for the item being created if the content type as a default menu set.
 * The menu entry is hidden; this is useful to populate the breadcrumbs without having to manually add a menu entry.
 * @param $node
 * @param $hidden 1 to hide this menu, 0 to show it
 */
function mica_core_create_menu($node, $hidden = 0) {
  // create menu based on content type menu config
  $menu = $node->menu;
  if (empty($menu)) {
    $menu = array();
  }
  if (empty($menu['enabled']) || !$menu['enabled']) {

    $menu_options = variable_get('menu_options_' . $node->type);

    if (!empty($menu_options)) {
      $menu['enabled'] = 0;
      $menu['hidden'] = $hidden;
      $menu['expanded'] = 0;
      $menu['menu_name'] = $menu_options[0];
      $menu['link_title'] = $node->title;
      $menu['link_path'] = 'node/' . $node->nid;

      $menu_parent = variable_get('menu_parent_' . $node->type);
      if (!empty($menu_parent)) {
        $split = explode(":", $menu_parent);
        if (!empty($split[1])) {
          $mlid = $split[1];
          // check that this parent menu exists
          $existing_menu = db_query("SELECT * FROM {menu_links} WHERE mlid = :mlid", array(':mlid' => $mlid))
            ->fetchObject();
          if (!empty($existing_menu) && $existing_menu->mlid === $mlid) {
            $menu['plid'] = $mlid;
            menu_link_save($menu);
            menu_cache_clear($menu['menu_name']);
          }
        }
      }
    }
  }
  return $menu;
}

/**
 * Implements hook_pathauto_punctuation_chars_alter
 */
function mica_core_pathauto_punctuation_chars_alter(array &$punctuation) {
  $punctuation['raquo'] = array('value' => 'Â»', 'name' => t('Right double angle quotes'));
}


/**
 * Implements hook_menu().
 */
function mica_core_menu() {
  $items = array();
  $items['mica/%ctools_js/node/%node'] = array(
    'page callback' => 'mica_core_node_modal_page_view',
    'page arguments' => array(1, 3),
    'access callback' => 'node_access',
    'access arguments' => array('view', 3),
  );
  return $items;
}

//
// Modal helper functions
//

/**
 * Declare styles for Mica modal dialogs.
 * @param $styles array of styles: name (required) and width, height (required for a dialog with a fixed size)
 */
function mica_core_modal_prepare($styles) {
  // Include the CTools tools that we need.
  ctools_include('ajax');
  ctools_include('modal');

  // Add CTools' javascript to the page.
  ctools_modal_add_js();

  $style_settings = array();

  // Create our own javascript that will be used to theme a modal.
  foreach ($styles as $style) {
    $settings = array();

    if (!empty($style['width']) && !empty($style['height'])) {
      $settings['modalSize'] = array(
        'type' => 'fixed',
        'width' => $style['width'],
        'height' => $style['height'],
        'addWidth' => 20,
        'addHeight' => 15,
      );
    }
    else {
      $settings['modalSize'] = array(
        'type' => 'scale',
        'addWidth' => 20,
        'addHeight' => 15,
      );
    }

    $settings['modalOptions'] = array(
      'opacity' => .5,
      'background-color' => '#000',
    );

    $settings['animation'] = 'fadeIn';
    $settings['modalTheme'] = 'MicaModal';

    $style_settings[$style['name']] = $settings;
  }
  drupal_add_js($style_settings, 'setting');

  // Since we have our js, css and images in well-known named directories,
  // CTools makes it easy for us to just use them without worrying about
  // using drupal_get_path() and all that ugliness.
  ctools_add_js('mica_core_modal', 'mica_core');
  ctools_add_css('mica_core_modal', 'mica_core');
}

/**
 * Renders the form identified by $form_id in a modal dialog, with provided title. Additional arguments are added to the $form_state.
 * @param $title
 * @param $form_id
 */
function mica_core_modal_form_render($title, $form_id) {
  ctools_include('ajax');
  ctools_include('modal');
  ctools_add_js('ajax-responder');

  $args = func_get_args();
  // Remove $title and $form_id from the arguments.
  array_shift($args);
  array_shift($args);
  $form_state = array(
    'ajax' => TRUE,
    'title' => $title,
  );
  $form_state['build_info']['args'] = $args;

  $commands = ctools_modal_form_wrapper($form_id, $form_state);

  // If cancelling or complete, return to the activity.
  if (!empty($form_state['complete'])) {
    $commands = array();
    $commands[] = ctools_modal_command_dismiss();
    if (!empty($form_state['redirect'])) {
      $commands[] = ctools_ajax_command_redirect($form_state['redirect']);
    }
  }
  elseif (!empty($form_state['cancel'])) {
    $commands = array();
    $commands[] = ctools_modal_command_dismiss();
  }

  print ajax_render($commands);
}

/**
 * Renders the node page in a modal window. Use mica_core_modal_prepare() to set up a link to the node page.
 * @param $js
 * @param $node
 */
function mica_core_node_modal_page_view($js = NULL, $node) {
  if ($js) {
    ctools_include('ajax');
    ctools_include('modal');
    ctools_modal_render($node->title, node_show($node));
  }
  else {
    return node_page_view($node);
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function mica_core_field_formatter_info() {
  return array(
    // This formatter just displays the link to pubmed article from its id.
    'mica_pubmed_url' => array(
      'label' => t('Pubmed Link'),
      'field types' => array('text', 'number_integer'),
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function mica_core_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'mica_pubmed_url':
      foreach ($items as $delta => $item) {
        $element[$delta] = array('#markup' => l('PUBMED ' . $item['value'], 'http://www.ncbi.nlm.nih.gov/pubmed/' . $item['value']));
      }
      break;
  }
  return $element;
}

/**
 * Implements hook_entity_info_alter().
 */
function mica_core_entity_info_alter(&$entity_info) {
  _mica_core_add_view_mode($entity_info, 'banner_area', 'Banner Area');
  _mica_core_add_view_mode($entity_info, 'left_area', 'Left Area');
  _mica_core_add_view_mode($entity_info, 'right_area', 'Right Area');
  _mica_core_add_view_mode($entity_info, 'center_area', 'Center Area');
  _mica_core_add_view_mode($entity_info, 'footer_area', 'Footer Area');
  _mica_core_add_view_mode($entity_info, 'summary_area', 'Summary');
  _mica_core_add_view_mode($entity_info, 'summary_banner_area', 'Summary Banner Area');
  _mica_core_add_view_mode($entity_info, 'summary_left_area', 'Summary Left Area');
  _mica_core_add_view_mode($entity_info, 'summary_right_area', 'Summary Right Area');
  _mica_core_add_view_mode($entity_info, 'summary_center_area', 'Summary Center Area');
  _mica_core_add_view_mode($entity_info, 'summary_footer_area', 'Summary Footer Area');
}

function _mica_core_add_view_mode(&$entity_info, $mode, $label) {
  if (!isset($entity_info['node']['view modes'][$mode])) {
    $entity_info['node']['view modes'][$mode] = array(
      'label' => t($label),
      'custom settings' => FALSE,
    );
  }
}

/**
 * Implements hook_feeds_plugins().
 */
function mica_core_feeds_plugins() {
  $info = array();
  $info['FeedsRestFetcher'] = array(
    'name' => 'RESTful HTTP Fetcher',
    'description' => 'Download content from a RESTful web service.',
    'handler' => array(
      'parent' => 'FeedsFetcher',
      'class' => 'FeedsRestFetcher',
      'file' => 'FeedsRestFetcher.inc',
      'path' => drupal_get_path('module', 'mica_core') . '/includes/feeds',
    ),
  );
  return $info;
}


/**
 * Cannot export global default_feeds_tamper via strongarm in each modules, so do it manually
 */
function mica_core_configure_feeds_tamper($module_name) {
  $disabled = variable_get('default_feeds_tamper', array());
  $info = drupal_parse_info_file(drupal_get_path('module', $module_name) . '/' . $module_name . '.info');
  foreach ($info['features']['feeds_tamper'] as $feeds_tamper) {
    $disabled[$feeds_tamper] = FALSE;
  }
  variable_set('default_feeds_tamper', $disabled);
}
