<?php
/**
 * @file
 * Code for the Mica Networks module.
 */

include_once 'mica_networks.features.inc';
include_once(drupal_get_path('module', 'mica_core') . '/mica_core.search.utils.inc');


/**
 * Implements hook_create_default_content().
 */
function mica_networks_create_default_content() {
  $menu = mica_core_create_menu(st('Networks'), 'networks', 'networks', FALSE, FALSE, 6);
  mica_core_set_menu_option('network', $menu['mlid']);
}

/**
 * Implements hook_node_view()
 */
function mica_networks_node_view($node, $view_mode, $langcode) {
  if ($node->type === 'network') {
    _mica_networks_network_view($node, $view_mode, $langcode);
  }
}

function _mica_networks_network_view($node, $view_mode, $langcode) {
  // Show moderation state messages if we're on a node page.
  if (node_is_page($node) && $view_mode === 'banner_area' && empty($node->in_preview)) {
    workbench_moderation_messages('view', $node);
  }
}

/**
 * Implements hook_node_insert()
 */
function mica_networks_node_insert($node) {
  switch ($node->type) {
    case 'network':
      mica_core_create_node_menu($node, TRUE, FALSE, 0, 'networks');
      break;
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function mica_networks_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  $links = array();
  if ($root_path === 'networks') {
    if (node_access('create', 'network')) {
      $node_type = node_type_load('network');
      $links['add-network'] = array(
        '#theme' => 'menu_local_action',
        '#link' => array(
          'title' => t('Add a !name', array('!name' => $node_type->name)),
          'href' => 'node/add/network',
        ),
      );
    }
  }
  $data['actions']['output'] = array_merge($data['actions']['output'], $links);
}


function mica_networks_menu() {
  $items = array();
  $items['admin/config/development/mica_network'] = array(
    'title' => 'Mica Network',
    'description' => 'development tools for Mica',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_mica_networks_add_index'),
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

function _mica_networks_add_index() {

  $form['run'] = array(
    '#type' => 'submit',
    '#value' => t('_mica_networks_add_networks_to_studies_index_test'),
    '#submit' => array('_mica_networks_add_networks_to_studies_index_test'),
  );

  return $form;
}

function _mica_networks_add_networks_to_studies_index_test() {
  $index = search_api_index_load('studies_index', TRUE);
  $options = $index->options;
  $fields = $options['fields'];
  $fields['field_networks'] = array(
    'type' => 'list<integer>',
    'entity_type' => 'node',
  );
  dpm($index, 'before save');
  search_api_index_edit_fields($index->id, $fields);
  dpm(search_api_index_load('studies_index', TRUE), 'after save');

  $searcher = 'search_api@studies_index';
  $facet = facetapi_facet_load('field_networks', $searcher);
  if ($facet) {
    $adapter = facetapi_adapter_load($searcher);
    $realms = facetapi_get_realm_info();
    foreach ($realms as $realm_name => $realm) {
      $delta = facetapi_hash_delta(facetapi_build_delta($searcher, $realm_name, $facet['name']));
      $settings = $adapter->getFacet($facet)->getSettings($realm);
      $settings->settings['widget'] = 'facetapi_checkbox_links';
      ctools_export_crud_save('facetapi', $settings);
      if (facetapi_save_facet_enabled($adapter, $realm, $facet)) {
        mica_core_enable_facet_block($delta, t('Networks'), 'studies-search');
      }
    }
  }
}