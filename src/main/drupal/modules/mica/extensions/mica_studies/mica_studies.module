<?php
/**
 * @file
 * Code for the mica_studies feature.
 */

require_once('mica_studies.features.inc');

/**
 * Implements hook_install().
 */
function mica_studies_install() {
  _mica_import_custom_name_format();
  _mica_node_reference_block();
  _mica_studies_create_date_format();
}

/**
 * Create custom date format because Features does not support date_formats yet
 * @see http://drupal.org/node/1279928
 */
function _mica_studies_create_date_format() {
  $pattern = 'M Y';

  $format = array();
  $format['format'] = $pattern;
  $format['type'] = 'custom';
  $format['locked'] = 0;
  $format['is_new'] = 1;
  system_date_format_save($format);

  $machine_name = 'month_year';
  $format_type = array();
  $format_type['title'] = 'Month year';
  $format_type['type'] = $machine_name;
  $format_type['locked'] = 0;
  $format_type['is_new'] = 1;
  system_date_format_type_save($format_type);

  variable_set('date_format_' . $machine_name, $pattern);
}

/**
 * Implements hook_menu().
 */
function mica_studies_menu() {
  $items = array();
  $items['export'] = array(
    'title' => 'Export',
    'page callback' => 'mica_studies_export_page',
    'access callback' => 'mica_studies_export_page_access',
    'file' => 'mica_studies.pages.inc',
  );
  return $items;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function mica_studies_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  $links = array();

  if ($root_path == 'studies') {
    if (node_access('create', 'study')) {
      $node_type = node_type_load('study');
      $links['add-study'] = array(
        '#theme' => 'menu_local_action',
        '#link' => array(
          'title' => t('Add a !name', array('!name' => $node_type->name)),
          'href' => 'node/add/study',
        ),
      );
    }
  }
  elseif ($root_path == 'documents') {
    $links = array();
    if (node_access('create', 'documents')) {
      $links['add-documents'] = array(
        '#theme' => 'menu_local_action',
        '#link' => array(
          'title' => t('Add some Documents'),
          'href' => 'node/add/documents',
        ),
      );
    }
  }

  $data['actions']['output'] = array_merge($data['actions']['output'], $links);
}

/**
 * Implements feeds_permission().
 */
function mica_studies_permission() {
  $perms = array(
    'export data' => array(
      'title' => t('Export Data'),
      'description' => t('Allow exportation of data.')
    ),
  );
  return $perms;
}

/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 */
function mica_studies_block_info() {
  $blocks['mica-search-filters'] = array(
    'info' => t('Search filters selection'),
    'status' => TRUE,
    'region' => 'sidebar_first',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'studies-search',
  );

  $blocks['mica-search'] = array(
    'info' => t('Search'),
    'status' => TRUE,
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => '',
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.
 */
function mica_studies_block_view($delta = '') {
  global $user;
  $block = array();

  //The $delta parameter tells us which block is being requested.
  switch ($delta) {
    case 'mica-search':
      module_load_include('inc', 'mica', 'includes/blocks');
      $block['subject'] = t('Search');
      $block['content'] = mica_search_block_content();
      return $block;

    case 'mica-search-filters':
      if ($user->uid == 0) {
        // not available for anonymous user
        return;
      }

      module_load_include('inc', 'mica', 'includes/blocks');
      $block['subject'] = t('Search filters selection');
      $content = mica_search_filters_block_content();

      if ($content) {
        $block['content'] = $content;
        return $block;
      }

  }

}

/**
 * Menu access callback.
 */
function mica_studies_export_page_access() {
  return user_access('export data');
}

function _mica_import_custom_name_format() {
  // add custom field format for name until next release of views
  $custom_format = array(
    'name' => 'Title',
    'machine_name' => 'title',
    'format' => 't',
  );
  drupal_write_record('name_custom_format', $custom_format);
}

function _mica_node_reference_block() {
  db_delete('block_node_type')
    ->condition('module', 'node_reference_block')
    ->condition('delta', 'related-content')
    ->condition('type', 'study%','LIKE')
    ->execute();
  $query = db_insert('block_node_type')->fields(array('type', 'module', 'delta'));
  foreach (array('study', 'contact') as $type) {
    $query->values(array(
      'type' => $type,
      'module' => 'node_reference_block',
      'delta' => 'related-content',
    ));
  }
  $query->execute();
}

/**
 * Implements hook_node_insert()
 */
function mica_studies_node_insert($node) {
  if ($node->type === 'study') {
    mica_create_menu($node, 1);
  }
}

/**
 * Implements hook_node_view()
 */
function mica_studies_node_view($node, $view_mode, $langcode) {
  switch($node->type) {
    case 'study':
      _mica_studies_study_view($node, $view_mode, $langcode);
      break;
    case 'contact':
      _mica_studies_contact_view($node, $view_mode, $langcode);
      break;
  }
}

function _mica_studies_study_view($node, $view_mode, $langcode) {

  $bindings = array(
    'field_design_other_sp' => array(
      'field' => 'field_design',
      'key' => 'other',
      'label_as_prefix' => FALSE,
    ),
    'field_recruitment_other_sp' => array(
      'field' => 'field_recruitment',
      'key' => 'other',
      'label_as_prefix' => FALSE,
    ),
    'field_current_part_nb_date' => array(
      'field' => 'field_current_participants_nb',
      'key' => NULL,
      'label_as_prefix' => TRUE,
    ),
    'field_current_samples_date' => array(
      'field' => 'field_current_samples_nb',
      'key' => NULL,
      'label_as_prefix' => TRUE,
    ),
    'field_selection_others_sp' => array(
      'field' => 'field_select_criteria',
      'key' => 'others',
      'label_as_prefix' => FALSE,
    ),
    'field_age_min-field_age_max' => array(
      'field_sp' => array('field_age_min', 'field_age_max'),
      'field' => 'field_select_criteria',
      'key' => NULL, // set to NULL to add this to an already existing list of choices
      'label_as_prefix' => TRUE,
      'custom_prefix' => t('Age:'),
    ),
    'field_country' => array(
      'field_sp' => array('field_country', 'field_territory'),
      'field' => 'field_select_criteria',
      'key' => NULL, // set to NULL to add this to an already existing list of choices
      'label_as_prefix' => FALSE,
      'custom_prefix' => t('Country:'),
    ),
    'field_ethnic_origin' => array(
      'field_sp' => array('field_ethnic_origin'),
      'field' => 'field_select_criteria',
      'key' => NULL, // set to NULL to add this to an already existing list of choices
      'label_as_prefix' => FALSE,
      'custom_prefix' => t('Ethnic origin:'),
    ),
    'field_health_status' => array(
      'field_sp' => array('field_health_status'),
      'field' => 'field_select_criteria',
      'key' => NULL, // set to NULL to add this to an already existing list of choices
      'label_as_prefix' => FALSE,
      'custom_prefix' => t('Health status:'),
    ),
    'field_recruitment_other' => array(
      'field' => 'field_recruitment_procedures',
      'key' => 'other',
      'label_as_prefix' => FALSE,
    ),
    'field_data_sources_sp' => array(
      'field' => 'field_data_sources',
      'key' => 'others',
      'label_as_prefix' => FALSE,
    ),
    'field_tissues_sp' => array(
      'field' => 'field_bio_samples_management',
      'key' => 'tissues',
      'label_as_prefix' => FALSE,
    ),
    'field_samples_man_other_sp' => array(
      'field' => 'field_bio_samples_management',
      'key' => 'others',
      'label_as_prefix' => FALSE,
    ),
    'field_access_other_sp' => array(
      'field' => 'field_access_other',
      'key' => '1',
      'label_as_prefix' => FALSE,
    ),
  );

  _mica_bind_other_specify($node, $bindings);

  $status_dates = array(
    'field_preparation_start_year' => 'field_preparation_end_year',
    'field_baseline_start_year' => 'field_baseline_end_year',
    'field_followup_start_year' => 'field_followup_end_year',
  );
  _mica_studies_display_status_dates($node, $status_dates);

  $fields = array(
    'field_target_number_participants',
    'field_target_number_biosamples',
    'field_current_participants_nb',
    'field_current_samples_nb',
  );
  _mica_remove_suffix($node, $fields);

  $bindings = array(
    'field_no_limits_participants' => 'field_target_number_participants',
    'field_no_limits_samples' => 'field_target_number_biosamples',
  );
  _mica_remove_exclusive_fields($node, $bindings);

  // Hide the fields "No limits in the number of..." when they are false
  if (!isset($node->content['field_no_limits_participants'])
    || $node->content['field_no_limits_participants']['#items'][0]['value'] === '0') {
    $node->content['field_no_limits_participants']['#access'] = FALSE;
  }

  if (isset($node->content['field_no_limits_samples']) && $node->content['field_no_limits_samples']['#items'][0]['value'] === '0') {
    $node->content['field_no_limits_samples']['#access'] = FALSE;
  }

}

function _mica_studies_contact_view($node, $view_mode, $langcode) {
  $wrapper = entity_metadata_wrapper('node', $node);
  $node->content['field_daco']['#access'] = $wrapper->field_daco->value();
}

/**
 * Implements hook_form_alter
 * To add dependent fields when filling out the form
 */
function mica_studies_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'study_node_form':
      $form['#validate'][] = '_mica_studies_form_validate';
      _mica_add_dependent_field_checked($form, 'field_design', 'field_design_other_sp', 'other');
      _mica_add_dependent_field_checked($form, 'field_recruitment', 'field_recruitment_other_sp', 'other');
      _mica_add_dependent_field_checked($form, 'field_access_other', 'field_access_other_sp', '1');
      _mica_add_dependent_field_checked($form, 'field_bio_samples_management', 'field_samples_man_other_sp', 'others');
      _mica_add_dependent_field_checked($form, 'field_bio_samples_management', 'field_tissues_sp', 'tissues');
      _mica_add_dependent_field_checked($form, 'field_recruitment_procedures', 'field_recruitment_other', 'other');
      _mica_add_dependent_field_checked($form, 'field_data_sources', 'field_data_sources_sp', 'others');
      _mica_add_dependent_field_checked($form, 'field_data_sources', 'field_questionnaire_collection', 'questionnaires');
      _mica_add_dependent_field_checked($form, 'field_data_sources', 'field_phys_collection_mode', 'physical_measures');
      _mica_add_dependent_field_checked($form, 'field_data_sources', 'field_biosamples_collection_mode', 'biological_samples');
      break;

    case 'contact_node_form':
      $form['title']['#type'] = 'value';
      $form['title']['#required'] = FALSE;
      break;
  }
}

/**
 * Implements hook_node_submit
 */
function mica_studies_node_submit($node, $form, &$form_state) {
  if ($node->type === 'contact' && _mica_studies_contact_title_is_needed($node)) {
    _mica_studies_set_contact_title($node);
  }
}

/**
 * Implements hook_node_presave().
 */
function mica_studies_node_presave($node) {
  if ($node->type === 'contact' && _mica_studies_contact_title_is_needed($node)) {
    _mica_studies_set_contact_title($node);
  }
}

function _mica_studies_set_contact_title(&$node) {

  if (isset($node->field_contact_name)) {

    $wrapper = entity_metadata_wrapper('node', $node);
    $institution = $wrapper->field_institution_name->value();

    // cannot use entity_metadata_wrapper for Name fields because of http://drupal.org/node/1423160
    $language = $node->language;
    $field_contact_name = $node->field_contact_name;

    if (array_key_exists($language, $field_contact_name)) {

      $name = $field_contact_name[$language][0];
      $full_name = isset($name['title']) ? trim($name['title']) : '';
      if (isset($name['given'])) {
        if (!empty($full_name)) $full_name .= ' ';
        $full_name .= trim($name['given']);
      }
      if (isset($name['family'])) {
        if (!empty($full_name)) $full_name .= ' ';
        $full_name .= trim($name['family']);
      }

      if (strlen(trim($full_name)) > 0) {

        $node->title = $full_name;
        if (!empty($institution)) $node->title .= ' (' . trim($institution) . ')';

        // set title for current node revision
        $node->title = substr($node->title, 0, 255);

        // With that flag we ensure we don't apply the title two times to the same
        // node. See _mica_studies_contact_title_is_needed().
        $node->contact_title_applied = TRUE;
      }
    }
  }
}

/**
 * Returns whether the contact title has to be set.
 */
function _mica_studies_contact_title_is_needed($node) {
  return empty($node->contact_title_applied);
}


/**
 * Implement hook_field_group_pre_render
 * Used to show/hide a fieldset based on another field selection
 */
function mica_field_group_pre_render(&$element, $group, &$form) {

  if (isset($form['#form_id']) && $form['#form_id'] === 'study_node_form') {

    $group_name = $group->group_name;
    $lang = key_exists('#default_value', $form['language']) ? $form['language']['#default_value'] : LANGUAGE_NONE;
    $to_hide = array(
      'group_authorising_person' => array(
        'dependee' => 'field_authorization_specific[' . $lang . ']',
        'condition' => 'checked',
        'value' => TRUE,
      ),
      'group_authorising_person_m' => array(
        'dependee' => 'field_authorization_maelstrom[' . $lang . ']',
        'condition' => 'checked',
        'value' => TRUE,
      ),
    );

    if (array_key_exists($group_name, $to_hide)) {
      $element['#states'] = array(
        'visible' => array(
          'input[name="' . $to_hide[$group_name]['dependee'] . '"]' => array(
            $to_hide[$group_name]['condition'] => $to_hide[$group_name]['value']
          ),
        ),
      );
    }
  }
}

function _mica_add_dependent_field_checked(&$form, $dependee, $dependent, $key_selected) {
  if (array_key_exists($dependee, $form) && array_key_exists($dependent, $form)) {
    $lang = $form[$dependee]['#language'];
    $type = $form[$dependee][$lang]['#type'];
    $input = ':input[name="' . $dependee . '[' . $lang . ']';
    $rule = array();
    if ($type != 'radios') {
      $input = $input . '[' . $key_selected . ']';
      $rule['checked'] = TRUE;
    } else {
      $rule['value'] = $key_selected;
    }
    $input = $input . '"]';

    $form[$dependent]['#states'] = array(
      'visible' => array(
        $input => $rule,
      ),
    );
  }
  else {
    debug('dependee "' . $dependee . '" or dependent "' . $dependent . '"not found');
  }
}

/**
 * Displays dates as: 'start date' to 'end date' as the start date value.
 * And hide end date.
 */
function _mica_studies_display_status_dates(&$node, $status_dates) {
  $wrapper = entity_metadata_wrapper('node', $node);
  foreach ($status_dates as $start_date => $end_date) {
    $start = $wrapper->$start_date->value();
    if (!empty($start)) {
      if (isset($node->content[$start_date])){
        $node->content[$start_date][0]['#markup'] = t('From') . ' ' . $node->content[$start_date][0]['#markup'];
      }
      $end = $wrapper->$end_date->value();
      if (!empty($end)) {
        if (isset($node->content[$end_date])){
          $node->content[$start_date][0]['#markup'] .= ' ' . t('to') . ' ' .  $node->content[$end_date][0]['#markup'];
        }
      }
      $node->content[$end_date]['#access'] = FALSE;
    }
  }
}


function _mica_bind_other_specify(&$node, $bindings) {

  foreach ($bindings as $other_sp => $options) {
    $field = $options['field'];
    if (isset($node->content[$field]) && (isset($node->content[$other_sp]) || isset($options['field_sp']))) {
      $key = $options['key'];
      $delimiter = ', ';

      if (!isset($options['enclosed']) || $options['enclosed'] === TRUE) {
        $start = ' (';
        $end = ')';
      }
      else {
        $start = ' ';
        $end = '';
      }

      if (isset($key)) {
        // get the array index of the key
        foreach ($node->content[$field]['#items'] as $i => $items) {
          if ($items['value'] == $key) {
            $index = $i;
            break;
          }
        }
      }
      else{
        $node->content[$field]['#items'][] = array('value' => 'extraone');
        $index = count($node->content[$field]['#items']) -1;
      }

      if (isset($index)) {
        // bind the other specify with the other option
        $content = '';
        $specifies = array();
        if (isset($options['field_sp'])) {
          // add each field
          foreach ($options['field_sp'] as $f) {
            if (isset($node->content[$f])) {
              $prefix = '';
              if ($options['label_as_prefix'] == TRUE) {
                $prefix = $node->content[$f]['#title'] . ' ';

                // If a display field as been defined, take this title instead
                $field_info = field_info_instance('node', $f, 'study');
                if (isset($field_info['display_label']) && strlen(trim($field_info['display_label'])) > 0) {
                  $prefix = $field_info['display_label'] . ' ';
                }
              }
              foreach($node->content[$f] as $k => $value) {
                if (is_int($k)) {
                  $specifies[] = $prefix . $value['#markup'];
                }
              }
            }
          }
          $content = implode($delimiter, $specifies);

        }
        else{
          for ($i = 0; $i < count($node->content[$other_sp]); $i++) {
            if (isset($node->content[$other_sp][$i])) {
              $prefix = '';
              if ($options['label_as_prefix'] == TRUE) {
                $prefix = $node->content[$other_sp]['#title'] . ' ';

                // If a display field as been defined, take this title instead
                $field_info = field_info_instance('node', $other_sp, 'study');
                if (isset($field_info['display_label']) && strlen(trim($field_info['display_label'])) > 0) {
                  $prefix = $field_info['display_label'] . ' ';
                }
              }
              $specifies[] = $prefix . $node->content[$other_sp][$i]['#markup'];
            }
          }

          $node->content[$other_sp]['#access'] = FALSE;
          $content = implode($delimiter, $specifies);
        }
        if (strlen(trim($content)) > 0) {
          if (key_exists($index, $node->content[$field])){
            $node->content[$field][$index]['#markup'] .= $start . $content . $end;
          }
          else{
            if (isset($key)){
              $node->content[$field][0]['#markup'] .= $start . $content . $end;
            }
            else{
              if (key_exists('custom_prefix', $options)){
                $node->content[$field][] = array('#markup' => $options['custom_prefix']  . ' ' . $content);
              }
              else{
                $node->content[$field][] = array('#markup' => $content);
              }
            }
          }
        }
      }
    }


    // hide the field_sp always
    if (isset($options['field_sp'])) {
      foreach ($options['field_sp'] as $f) {
        $node->content[$f]['#access'] = FALSE;
      }
    }

    if (isset($node->content[$other_sp])) {
      $node->content[$other_sp]['#access'] = FALSE;
    }
  }
}

function _mica_remove_suffix(&$node, $fields) {
  foreach ($fields as $field) {
    if (isset($node->content[$field])) {
      // find the last integer index...
      $index = 0;
      for (; $index < count($node->content[$field]); $index++) {
        if (!isset($node->content[$field][$index])) {
          break;
        }
      }
      $index--;

      $suffix = '';
      $field_info = field_info_instance('node', $field, 'study');
      if (isset($field_info['settings']['suffix']) && strlen(trim($field_info['settings']['suffix'])) > 0) {
        $suffix = $field_info['settings']['suffix'];
      }

      $node->content[$field][$index]['#markup'] = str_replace($suffix, '', $node->content[$field][$index]['#markup']);
    }
  }
}

/**
 * Hide a field if another field has a value
 */
function _mica_remove_exclusive_fields(&$node, $bindings) {
  // Hide the field if the other field as a value
  foreach ($bindings as $field => $other_field) {
    if (isset($node->content[$other_field])) {
      $node->content[$field]['#access'] = FALSE;
    }
  }
}

/**
 * Clear dependent field if dependee field selection is not checked.
 */
function _mica_studies_form_validate($form, &$form_state) {
  _mica_studies_form_validate_field($form, $form_state, 'field_design', 'field_design_other_sp', 'other');
  _mica_studies_form_validate_field($form, $form_state, 'field_recruitment', 'field_recruitment_other_sp', 'other');
  _mica_studies_form_validate_field($form, $form_state, 'field_select_criteria', 'field_selection_others_sp', 'others');
  _mica_studies_form_validate_field($form, $form_state, 'field_access_other', 'field_access_other_sp', '1');
  _mica_studies_form_validate_field($form, $form_state, 'field_bio_samples_management', 'field_samples_man_other_sp', 'others');
  _mica_studies_form_validate_field($form, $form_state, 'field_bio_samples_management', 'field_tissues_sp', 'tissues');
  _mica_studies_form_validate_field($form, $form_state, 'field_recruitment_procedures', 'field_recruitment_other', 'other');
  _mica_studies_form_validate_field($form, $form_state, 'field_data_sources', 'field_data_sources_sp', 'others');
  _mica_studies_form_validate_field($form, $form_state, 'field_data_sources', 'field_questionnaire_collection', 'questionnaires');
  _mica_studies_form_validate_field($form, $form_state, 'field_data_sources', 'field_phys_collection_mode', 'physical_measures');
  _mica_studies_form_validate_field($form, $form_state, 'field_data_sources', 'field_biosamples_collection_mode', 'biological_samples');
}

/**
 * Clear dependent field if dependee field selection is not checked in any language.
 */
function _mica_studies_form_validate_field($form, &$form_state, $dependee, $dependent, $selection) {
  if (array_key_exists($dependee, $form_state['values']) && array_key_exists($dependent, $form_state['values'])) {
    $flangs = array_keys($form_state['values'][$dependee]);
    $flang = $flangs[0];
    $values = array();
    foreach($form_state['values'][$dependee][$flang] as $value) {
      $values[] = $value['value'];
    }

    if (in_array($selection, $values) == FALSE) {
      $empty_value = array();
      $lgs = array_keys($form_state['values'][$dependent]);
      foreach ($lgs as $lg) {
        $empty_value[$lg] = array(array('value' => ''));
      }
      form_set_value($form[$dependent], $empty_value, $form_state);
    }
  }
  else {
    debug('dependee "' . $dependee . '" or dependent "' . $dependent . '"not found');
  }
}

/**
 * Remove [all items] from the current search block
 */
function mica_studies_block_view_alter(&$data, $block) {
  if ($block->delta !== 'standard' || $block->module !== 'current_search') return;
  foreach($data['content']['active_items']['#items'] as $key => $item) {
    if ($item === '[all items]') unset($data['content']['active_items']['#items'][$key]);
  }
}
