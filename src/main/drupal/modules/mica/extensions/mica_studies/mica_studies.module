<?php
/**
 * @file
 * Code for the mica_studies feature.
 */

require_once('mica_studies.features.inc');

/**
 * Implements hook_install().
 */
function mica_studies_install() {
  _mica_import_custom_name_format();
  _mica_node_reference_block();
}

/**
 * Implements hook_menu().
 */
function mica_studies_menu() {
  $items = array();
  $items['export'] = array(
    'title' => 'Export',
    'page callback' => 'mica_studies_export_page',
    'access callback' => 'mica_studies_export_page_access',
    'file' => 'mica_studies.pages.inc',
  );
  return $items;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function mica_studies_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  $links = array();

  if ($root_path == 'studies') {
    if (node_access('create', 'study')) {
      $node_type = node_type_load('study');
      $links['add-study'] = array(
        '#theme' => 'menu_local_action',
        '#link' => array(
          'title' => t('Add a !name', array('!name' => $node_type->name)),
          'href' => 'node/add/study',
      ),
      );
    }
  }
  elseif ($root_path == 'documents') {
    $links = array();
    if (node_access('create', 'documents')) {
      $links['add-documents'] = array(
        '#theme' => 'menu_local_action',
        '#link' => array(
          'title' => t('Add some Documents'),
          'href' => 'node/add/documents',
      ),
      );
    }
  }

  $data['actions']['output'] = array_merge($data['actions']['output'], $links);
}

/**
 * Implements feeds_permission().
 */
function mica_studies_permission() {
  $perms = array(
    'export data' => array(
      'title' => t('Export Data'),
      'description' => t('Allow exportation of data.')
  ),
  );
  return $perms;
}

/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 */
function mica_studies_block_info() {
  $blocks['mica-search-filters'] = array(
    'info' => t('Search filters selection'),
    'status' => TRUE,
    'region' => 'sidebar_first',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'studies-search',
  );

  $blocks['mica-search'] = array(
    'info' => t('Search'),
    'status' => TRUE,
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => '',
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.
 */
function mica_studies_block_view($delta = '') {
  global $user;
  $block = array();

  //The $delta parameter tells us which block is being requested.
  switch ($delta) {
    case 'mica-search':
      module_load_include('inc', 'mica', 'includes/blocks');
      $block['subject'] = t('Search');
      $block['content'] = mica_search_block_content();
      return $block;
    case 'mica-search-filters':
      if ($user->uid == 0) {
        // not available for anonymous user
        return;
      }

      module_load_include('inc', 'mica', 'includes/blocks');
      $block['subject'] = t('Search filters selection');
      $content = mica_search_filters_block_content();

      if ($content) {
        $block['content'] = $content;
        return $block;
      }
      else {
        // no content, then no block
        return;
      }
    default:
      return;
  }

}

/**
 * Menu access callback.
 */
function mica_studies_export_page_access() {
  return user_access('export data');
}

function _mica_import_custom_name_format(){
  // add custom field format for name until next release of views
  $custom_format = array(
    'name' => 'Title',
  	'machine_name' => 'title',
  	'format' => 't',
  );
  drupal_write_record('name_custom_format', $custom_format);
}

function _mica_node_reference_block() {
  db_delete('block_node_type')
  ->condition('module', 'node_reference_block')
  ->condition('delta', 'related-content')
  ->condition('type', 'study%','LIKE')
  ->execute();
  $query = db_insert('block_node_type')->fields(array('type', 'module', 'delta'));
  foreach (array('study', 'study_information','study_documents','contact','institution') as $type) {
    $query->values(array(
      'type' => $type,
      'module' => 'node_reference_block',
      'delta' => 'related-content',
    ));
  }
  $query->execute();
}

/**
* Implements hook_node_insert()
*/
function mica_studies_node_insert($node) {
  if ($node->type === 'study') {
	  mica_create_menu($node, 1);
  }
}


function mica_node_view($node, $view_mode, $langcode){
  if ($node->type == 'study'){
    $bindings = array(
      'field_design_other_sp' => array(
        'field' => 'field_design',
        'key' => 'other',
        'label_as_prefix' => FALSE,
      ), 
      'field_recruitment_other_sp' => array(
        'field' => 'field_recruitment',
        'key' => 'other',
        'label_as_prefix' => FALSE,
      ),
      'field_current_part_nb_date' => array(
        'field' => 'field_current_participants_nb',
        'key' => NULL,
       'label_as_prefix' => TRUE,
      ),
      'field_current_samples_date' => array(
        'field' => 'field_current_samples_nb',
        'key' => NULL,
        'label_as_prefix' => TRUE,
      ),
      'field_selection_others_sp' => array(
        'field' => 'field_select_criteria',
        'key' => 'others',
        'label_as_prefix' => FALSE,
      ),
      'field_selection_gender' => array(
        'field' => 'field_select_criteria',
        'key' => 'gender',
        'label_as_prefix' => FALSE,
      ),
      //  Special bindings for age min-max
      'field_age_min-field_age_max' => array(
        'field_sp' => array('field_age_min', 'field_age_max'),
        'field' => 'field_select_criteria',
        'key' => 'age',
        'label_as_prefix' => TRUE,
      ),
      'field_country' => array(
        'field' => 'field_select_criteria',
        'key' => 'country',
        'label_as_prefix' => TRUE,
      ),
      'field_ethnic_origin'  => array(
        'field' => 'field_select_criteria',
        'key' => 'ethnic',
        'label_as_prefix' => FALSE, 
      ),
      'field_health_status'  => array(
        'field' => 'field_select_criteria',
        'key' => 'health',
        'label_as_prefix' => FALSE, 
      ),
      'field_recruitment_other' => array(
        'field' => 'field_recruitment_procedures',
        'key' => 'other',
        'label_as_prefix' => FALSE,
      ),
      'field_data_sources_sp' => array(
        'field' => 'field_data_sources',
        'key' => 'others',
        'label_as_prefix' => FALSE,
      ),
      'field_tissues_sp' => array(
        'field' => 'field_bio_samples_management',
        'key' => 'tissues',
        'label_as_prefix' => FALSE,
      ),
      'field_samples_man_other_sp' => array(
        'field' => 'field_bio_samples_management',
        'key' => 'others',
        'label_as_prefix' => FALSE,
      ),
      'field_access_other_sp' => array(
        'field' => 'field_access_other',
        'key' => '',
        'label_as_prefix' => TRUE,
      ),
	  'field_preparation_end_year' => array(
        'field' => 'field_preparation_start_year',
        'key' => '',
        'label_as_prefix' => TRUE,
    	'enclosed' => FALSE,
      ),
      'field_baseline_end_year' => array(
        'field' => 'field_baseline_start_year',
        'key' => '',
        'label_as_prefix' => TRUE,
    	'enclosed' => FALSE,
      ),
      'field_followup_end_year' => array(
        'field' => 'field_followup_start_year',
        'key' => '',
        'label_as_prefix' => TRUE,
        'enclosed' => FALSE,
      ),
    );

    _mica_bind_other_specify($node, $bindings);
    
    $supp_infos= array(
      'field_recruitment_supp_info' => array(
        'field' => 'field_recruitment',
      ),
      'field_target_nb_supp_info' => array(
      	'field' => 'field_target_number_participants',
      ),
      'field_samples_supp_info' => array(
       	'field' => 'field_target_number_biosamples',
      ),
      'field_current_supp_info' => array(
        'field' => 'field_current_participants_nb',
      ),
      'field_current_sam_supp_indo' => array(
        'field' => 'field_current_samples_nb',
      ),
      'field_partcipant_sel_supp_info' => array(
        'field' => 'field_select_criteria',
      ),
      'field_recruitement_supp_info' => array(
        'field' => 'field_recruitment_procedures',
      ),
//       'field_status_supp_info' => array(
//         'field' => 'field_ended_end_year',
//       ),
    );

    _mica_bind_supp_infos($node, $supp_infos);
    
    $fields = array(//  Special bindings for age min-max
      'field_target_number_participants',
      'field_target_number_biosamples',
	  'field_current_participants_nb',
	  'field_current_samples_nb',
    );
    _mica_remove_suffix($node, $fields);
    
    $bindings = array(
      'field_no_limits_participants' => 'field_target_number_participants',
      'field_no_limits_samples' => 'field_target_number_biosamples',
    );
    _mica_remove_exclusive_fields($node, $bindings);
    
    // Hide the fields "No limits in the number of..." when they are false
    if (!isset($node->content['field_no_limits_participants']) || $node->content['field_no_limits_participants']['#items'][0]['value'] === '0'){
      $node->content['field_no_limits_participants']['#access'] = FALSE;
    }
    
    if ($node->content['field_no_limits_samples']['#items'][0]['value'] === '0'){
  	  $node->content['field_no_limits_samples']['#access'] = FALSE;
    }
  }
}

/**
 * 
 * Implements hook_form_alter
 * To add dependent fields when filling out the form
 */
function mica_studies_form_alter(&$form, &$form_state, $form_id){
  if ($form_id == 'study_node_form'){
    _mica_add_dependent_field_checked($form, 'field_design', 'field_design_other_sp', 'other');
    _mica_add_dependent_field_checked($form, 'field_recruitment', 'field_recruitment_other_sp', 'other');
    _mica_add_dependent_field_checked($form, 'field_select_criteria', 'field_selection_others_sp', 'others');
    _mica_add_dependent_field_checked($form, 'field_access_other', 'field_access_other_sp', 'yes');
    _mica_add_dependent_field_checked($form, 'field_bio_samples_management', 'field_samples_man_other_sp', 'others');
    _mica_add_dependent_field_checked($form, 'field_bio_samples_management', 'field_tissues_sp', 'tissues');
    _mica_add_dependent_field_checked($form, 'field_recruitment_procedures', 'field_recruitment_other', 'other');
    _mica_add_dependent_field_checked($form, 'field_data_sources', 'field_data_sources_sp', 'others');
  }
}

/**
 * 
 * Implement hook_field_group_render
 * Used to show/hide a fieldset based on another field selection
 */
function mica_field_group_pre_render(&$element, $group, &$form){
  
  if (isset($form['#form_id']) && $form['#form_id'] == 'study_node_form'){
    
    $group_name = $group->group_name;
    $lang = $form['language']['#default_value'];
    $to_hide = array(
    	'group_authorising_person' => array(
     	  'dependee' => 'field_authorization_specific['.$lang.']',
          'condition' => 'checked',
          'value' => TRUE,
        ),
        'group_authorising_person_m' => array(
          'dependee' => 'field_authorization_maelstrom['.$lang.']',
          'condition' => 'checked',
      	  'value' => TRUE,
        ),
        'group_specify_gender' => array(
          'dependee' => 'field_select_criteria['.$lang.'][gender]',
          'condition' => 'checked',
          'value' => TRUE,
        ),
        'group_age_range' => array(
          'dependee' => 'field_select_criteria['.$lang.'][age]',
          'condition' => 'checked',
          'value' => TRUE,
        ),
        'group_countries' => array(
          'dependee' => 'field_select_criteria['.$lang.'][countries]',
          'condition' => 'checked',
          'value' => TRUE,
        ),
        'group_ethnic_origin' => array(
          'dependee' => 'field_select_criteria['.$lang.'][ethnic]',
          'condition' => 'checked',
          'value' => TRUE,
        ),
        'group_health_status' => array(
          'dependee' => 'field_select_criteria['.$lang.'][health]',
          'condition' => 'checked',
          'value' => TRUE,
        ),
    );
  
    if (array_key_exists($group_name, $to_hide)){
      $element['#states'] = array(
          'visible' => array(
            'input[name="'.$to_hide[$group_name]['dependee'].'"]' => array($to_hide[$group_name]['condition'] => $to_hide[$group_name]['value']),
          ),
      );
    }
  }
}

function _mica_add_dependent_field_checked(&$form, $dependee, $dependent, $key_selected){
  if (array_key_exists($dependee, $form) && array_key_exists($dependent, $form)){
    
    $lang = $form['language']['#default_value'];
    
    $form[$dependent]['#states'] = array(
      'visible' => array(
        ':input[name="'.$dependee.'['.$lang.']['.$key_selected.']"]' => array('checked' => TRUE),
      ),
    );
  }
  else{
    debug('dependee or dependent not found');
  }
}
function _mica_add_dependent_field_filled(&$form, $dependee, $dependent){
	if (array_key_exists($dependee, $form) && array_key_exists($dependent, $form)){

    	$lang = $form['language']['#default_value'];
    
    	$form[$dependent]['#states'] = array(
        	'visible' => array(
          	':input[name="'.$dependee.'['.$lang.']"]' => array('filled' => TRUE),
    	  ),
    	);
	}
	else{
		debug('dependee or dependent not found');
	}
}

function _mica_bind_other_specify(&$node, $bindings){
  
  foreach($bindings as $other_sp => $options){
    $field = $options['field'];
    if (isset($node->content[$field]) && (isset($node->content[$other_sp]) || isset($options['field_sp']))){
      $key = $options['key'];
      $delimiter = ', ';
      
      if (!isset($options['enclosed']) || $options['enclosed'] == TRUE) {
        $start = ' (';
        $end = ')';
      }
      else{
        $start = ' ';
        $end = '';
      }
       
      $index = 0;
      if (isset($key)){
        // get the array index of the key
        foreach($node->content[$field]['#items'] as $i => $items){
          if ($items['value'] == $key){
            $index = $i;
            break;
          }
        }
      }
      
      if (isset($index)){
      	// bind the other specify with the other option
        //$node->content[$field][$index]['#markup'] .= ' (';
        
        $content = '';
        $specifies = array();
      	if (isset($options['field_sp'])){
      	  // add each field
      	  foreach($options['field_sp'] as $f){
      	    if (isset($node->content[$f])){
              $prefix = '';
              if ($options['label_as_prefix'] == TRUE){
                $prefix = $node->content[$f]['#title'] . ' ';
                
                // If a display field as been defined, take this title instead
                $field_info = field_info_instance('node', $f, 'study');
                if (isset($field_info['display_label']) && strlen(trim($field_info['display_label'])) > 0) {
                	$prefix = $field_info['display_label'] . ' ';
                }
              }
              $specifies[] = $prefix . $node->content[$f][0]['#markup'];
      	    }
            // hide the field
          	$node->content[$f] = 'hidden';
      	  }
      	  $content = implode($delimiter, $specifies);
      	}
      	else{
      	  for($i = 0; $i < count($node->content[$other_sp]); $i++){
      	    if (isset($node->content[$other_sp][$i])){
              $prefix = '';
              if ($options['label_as_prefix'] == TRUE){
          	    $prefix = $node->content[$other_sp]['#title'] . ' ';
          	    
          	    // If a display field as been defined, take this title instead
          	    $field_info = field_info_instance('node', $other_sp, 'study');
          	    if (isset($field_info['display_label']) && strlen(trim($field_info['display_label'])) > 0) {
          	    	$prefix = $field_info['display_label'] . ' ';
          	    }
              }
        	  $specifies[] = $prefix . $node->content[$other_sp][$i]['#markup'];
      	    }
          }
            
          $node->content[$other_sp]['#access'] = FALSE;
          $content = implode($delimiter, $specifies);
      	}
      	
      	$node->content[$field][$index]['#markup'] .= $start . $content . $end; 
      }
    }
    
    if (isset($node->content[$other_sp])){
   	  $node->content[$other_sp]['#access'] = FALSE;
    }
  }
}

function _mica_bind_supp_infos(&$node, $bindings){
  foreach($bindings as $supp_info => $options){
  	$field = $options['field'];
    if (isset($node->content[$supp_info]) && isset($node->content[$field])){
      // find the last integer index...
      $index = 0;
      for(; $index < count($node->content[$field]); $index++){
        if ( !isset($node->content[$field][$index])){
    	  break;
    	}
      }
      $index--;

      $title = $node->content[$supp_info]['#title'];
      
      // If a display field as been defined, take this title instead
      $field_info = field_info_instance('node', $supp_info, 'study');
      if (isset($field_info['display_label']) && strlen(trim($field_info['display_label'])) > 0) {
      	$title = $field_info['display_label'];
      }

      $node->content[$field][$index] = array(
        '#markup' => $node->content[$field][$index]['#markup'] . '<br/><br/><span style="margin-left:-20px">'.$title. ': ' . 
        	$node->content[$supp_info][0]['#markup'] . '</span>',
      );
            
      $node->content[$supp_info]['#access'] = FALSE;
    }
    
    if (isset($node->content[$supp_info])){
      $node->content[$supp_info]['#access'] = FALSE;
    }
  }
}

function _mica_bind_field_to_title(&$node, $bindings){
  foreach($bindings as $group => $options){
    
    if (isset($node->content['#fieldgroups'][$group]) && isset($options['fields'])){
      $delimiter = ', ';
       // add each field
      $specifies = array();
      foreach($options['fields'] as $f){
        if (isset($node->content[$f])){
          $prefix = '';
          if ($options['label_as_prefix'] == TRUE){
            $prefix = $node->content[$f]['#title'] . ': ';
          }
          $specifies[] = $prefix . strip_tags($node->content[$f][0]['#markup']);
      	}
        // hide the field
        $node->content[$f] = 'hidden';
      }
      $content = implode($delimiter, $specifies);
      
      $node->content['#fieldgroups'][$group]->label .= ' ('.$content.')';
    }
  }
}

function _mica_remove_suffix(&$node, $fields){
  foreach($fields as $field){
    if (isset($node->content[$field])){    
      // find the last integer index...
      $index = 0;
      for(; $index < count($node->content[$field]); $index++){
      	if ( !isset($node->content[$field][$index])){
      		break;
      	}
      }
      $index--;
      
      $field_info = field_info_instance('node', $field, 'study');
      if (isset($field_info['settings']['suffix']) && strlen(trim($field_info['settings']['suffix'])) > 0) {
      	$suffix = $field_info['settings']['suffix'];
      }
      
      $node->content[$field][$index]['#markup'] = str_replace($suffix, '', $node->content[$field][$index]['#markup']);
    }
  }
}

/**
 * 
 * Hide a field if another field has a value
 */
function _mica_remove_exclusive_fields(&$node, $bindings){
  // Hide the field if the other field as a value
  foreach($bindings as $field => $other_field){
  	if (isset($node->content[$other_field])){
	  $node->content[$field]['#access'] = FALSE;
  	}
  }
}