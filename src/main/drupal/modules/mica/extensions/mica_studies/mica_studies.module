<?php

/**
 * @file
 * Code for the mica_studies feature.
 */

require_once('mica_studies.features.inc');
require_once('mica_studies.population.inc');
require_once('mica_studies.data_collection_event.inc');
require_once('mica_studies.study.inc');

/**
 * Implements hook_menu().
 */
function mica_studies_menu() {
  $items = array();
  $items['export'] = array(
    'title' => 'Export',
    'page callback' => 'mica_studies_export_page',
    'access callback' => 'mica_studies_export_page_access',
    'file' => 'mica_studies.pages.inc',
  );
  // for test only
  $items['admin/config/development/mica_studies'] = array(
    'title' => 'Mica Studies',
    'description' => 'tools to test content type migration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_mica_studies_devel_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'mica_studies.migrate.inc',
  );

  return $items;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function mica_studies_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  $links = array();

  switch ($root_path) {
    case 'studies':
      $node_type = node_type_load('study');
      if (node_access('create', 'study')) {
        $links['add-study'] = array(
          '#theme' => 'menu_local_action',
          '#link' => array(
            'title' => t('Add a Study'),
            'href' => 'node/add/study',
          ),
        );
      }
      $links['search-studies'] = array(
        '#weight' => 30,
        '#theme' => 'menu_local_action',
        '#link' => array(
          'title' => t('Search ' . ($node_type->name === 'Study' ? 'Studies' : $node_type->name . 's')),
          'href' => 'studies-search',
          'localized_options' => array(
            'attributes' => array(
              'class' => 'highlight',
            ),
          ),
        ),
      );
      break;

    case 'documents':
      if (node_access('create', 'documents')) {
        $links['add-documents'] = array(
          '#theme' => 'menu_local_action',
          '#link' => array(
            'title' => t('Add some Documents'),
            'href' => 'node/add/documents',
          ),
        );
      }
      break;
  }

  $data['actions']['output'] = array_merge($data['actions']['output'], $links);
}

/**
 * Implements feeds_permission().
 */
function mica_studies_permission() {
  $perms = array(
    'export data' => array(
      'title' => t('Export Data'),
      'description' => t('Allow exportation of data.')
    ),
  );
  return $perms;
}

/**
 * Menu access callback.
 */
function mica_studies_export_page_access() {
  return user_access('export data');
}

/**
 * Implements hook_node_insert()
 */
function mica_studies_node_insert($node) {
  switch ($node->type) {
    case 'study':
      mica_core_create_node_default_menu($node, TRUE, FALSE, 0, 'studies');
      break;
    case 'population':
      _mica_studies_population_link($node);
      break;
    case 'data_collection_event':
      _mica_studies_dce_link($node);
      break;
  }
}

/**
 * Implements hook_node_view()
 */
function mica_studies_node_view($node, $view_mode, $langcode) {
  switch ($node->type) {
    case 'study':
      ctools_add_css('mica_studies', 'mica_studies');
      _mica_studies_study_view($node, $view_mode, $langcode);
      break;
    case 'population':
      ctools_add_css('mica_studies', 'mica_studies');
      _mica_studies_population_view($node, $view_mode, $langcode);
      break;
    case 'contact':
      _mica_studies_contact_view($node, $view_mode, $langcode);
      break;
  }
}

function _mica_studies_study_view($node, $view_mode, $langcode) {
  if ($view_mode === 'full') {
    return;
  }

  // Show moderation state messages if we're on a node page.
  if (node_is_page($node) && $view_mode === 'banner_area' && empty($node->in_preview)) {
    workbench_moderation_messages('view', $node);
  }

  $wrapper = entity_metadata_wrapper('node', $node);

  $bindings = array(
    'field_design_other_sp' => array(
      'field' => 'field_design',
      'key' => 'other',
      'label_as_prefix' => FALSE,
      'enclosed' => FALSE,
    ),
    'field_recruitment_other_sp' => array(
      'field' => 'field_recruitment',
      'key' => 'other',
      'label_as_prefix' => FALSE,
      'enclosed' => FALSE,
    ),
    'field_current_part_nb_date' => array(
      'field' => 'field_current_participants_nb',
      'key' => 0, // To specify to add the specified field to the first item
      'label_as_prefix' => TRUE,
    ),
    'field_current_samples_date' => array(
      'field' => 'field_current_samples_nb',
      'key' => 0,
      'label_as_prefix' => TRUE,
    ),
    'field_data_sources_sp' => array(
      'field' => 'field_data_sources',
      'key' => 'others',
      'label_as_prefix' => FALSE,
      'enclosed' => FALSE,
    ),
    'field_tissues_sp' => array(
      'field' => 'field_bio_samples_management',
      'key' => 'tissues',
      'label_as_prefix' => FALSE,
      'enclosed' => FALSE,
    ),
    'field_samples_man_other_sp' => array(
      'field' => 'field_bio_samples_management',
      'key' => 'others',
      'label_as_prefix' => FALSE,
      'enclosed' => FALSE,
    ),
    'field_access_other_sp' => array(
      'field' => 'field_access_other',
      'key' => '1',
      'label_as_prefix' => FALSE,
      'enclosed' => FALSE,
    ),
  );

  _mica_bind_other_specify($node, $bindings);

  $fields = array(
    'field_target_number_participants',
    'field_target_number_biosamples',
    'field_current_participants_nb',
    'field_current_samples_nb',
  );
  _mica_remove_suffix($node, $fields);

  $bindings = array(
    'field_no_limits_participants' => 'field_target_number_participants',
    'field_no_limits_samples' => 'field_target_number_biosamples',
  );
  _mica_remove_exclusive_fields($node, $bindings);

  // Hide the fields "No limits in the number of..." when they are false
  if (isset($node->content['field_no_limits_participants']) && isset($node->content['field_no_limits_participants']['#items'])) {
    if ($node->content['field_no_limits_participants']['#items'][0]['value']) {
      $node->content['field_no_limits_participants'][0]['#markup'] = $node->content['field_no_limits_participants']['#title'];
    }
    else {
      $node->content['field_no_limits_participants']['#access'] = FALSE;
    }
  }
  if (isset($node->content['field_no_limits_samples']) && isset($node->content['field_no_limits_samples']['#items'])) {
    if ($node->content['field_no_limits_samples']['#items'][0]['value']) {
      $node->content['field_no_limits_samples'][0]['#markup'] = $node->content['field_no_limits_samples']['#title'];
    }
    else {
      $node->content['field_no_limits_samples']['#access'] = FALSE;
    }
  }

  // selection criteria
  _mica_studies_study_view_selection_criteria($node, $view_mode, $langcode, $wrapper);
}

function _mica_studies_contact_view($node, $view_mode, $langcode) {
  $wrapper = entity_metadata_wrapper('node', $node);

  // Fix until http://drupal.org/node/1376126 is resolved
  $wrapper->language->set($langcode);

  $address_lines = array();
  $address_lines[] = $wrapper->field_institution_name->value();
  $address_lines[] = $wrapper->field_department_unit->value();
  $address_lines[] = $wrapper->field_address->value();

  $address_parts = array();
  $address_parts[] = $wrapper->field_city->value();
  $address_parts[] = $wrapper->field_state->value();
  $address_parts[] = $wrapper->field_postal_code->value();

  $address_lines[] = implode(', ', array_filter($address_parts));
  $address_lines[] = $wrapper->field_contact_country->label();

  $full_address = implode('<br>', array_filter($address_lines));

  // add title in case of null field_address
  if (!isset($node->content['field_address']['#title'])) {
    $node->content['field_address']['#title'] = t('Address');
    $node->content['field_address']['#weight'] = 0;
    $node->content['field_address']['#theme'] = 'field';
    $node->content['field_address']['#access'] = TRUE;
    $node->content['field_address']['#label_display'] = 'above';
    $node->content['field_address']['#view_mode'] = 'full';
    $node->content['field_address']['#language'] = $langcode;
    $node->content['field_address']['#field_name'] = 'field_address';
    $node->content['field_address']['#field_type'] = 'text';
    $node->content['field_address']['#field_translatable'] = 1;
    $node->content['field_address']['#entity_type'] = 'node';
    $node->content['field_address']['#bundle'] = 'contact';
    $node->content['field_address']['#object'] = $node;
    $node->content['field_address']['#formatter'] = 'text_default';
    $node->content['field_address']['#items'] = array(
      array(
        'value' => $full_address,
        'safe_value' => $full_address,
        'format' => NULL,
      )
    );
  }
  else {
    $institution = $wrapper->field_institution_name->value();
    if (!empty($institution)) {
      $node->content['field_address']['#title'] = t('Address'); //$wrapper->field_contact_name->value() . ' (' . $wrapper->field_institution_name->value() . ')';
    }
  }
  $node->content['field_address'][0]['#markup'] = $full_address;

  $node->content['field_daco']['#access'] = $wrapper->field_daco->value();
}

function _mica_studies_study_view_selection_criteria(&$node, $view_mode, $langcode, $wrapper) {
  if (isset($node->content['#groups']['group_participants_selection'])
    && $node->content['#groups']['group_participants_selection']->format_type !== 'hidden'
  ) {

    if (!isset($node->content['field_select_criteria'])) {
      // create empty field_select_criteria if it has no values
      // Load instance of the field for the node.
      $instances = _field_invoke_get_instances('node', $node->type, array(
        'field_name' => 'field_select_criteria',
        'default' => TRUE,
        'deleted' => FALSE
      ));
      $select_criteria_instance = $instances[0];
      $display_mode = $node->content['#groups']['group_participants_selection']->mode;
      $display = field_get_display($select_criteria_instance, $display_mode, $node);
      $select_criteria_info = field_info_field('field_select_criteria');
      $node->content['field_select_criteria'] = array(
        '#theme' => 'field',
        '#title' => $select_criteria_instance['label'],
        '#label_display' => 'above',
        '#field_type' => $select_criteria_info['type'],
        '#field_name' => $select_criteria_instance['field_name'],
        '#bundle' => $node->type,
        '#object' => $node,
        '#items' => array(),
        '#entity_type' => 'node',
        '#weight' => $display['weight'],
        0 => array('#markup' => ''),
      );
    }

    _mica_studies_study_view_selection_criteria_item($node, $wrapper, 'field_gender', t('Gender'));

    if (isset($node->content['field_age_min']) || isset($node->content['field_age_max'])) {
      $index = count($node->content['field_select_criteria']['#items']);
      $age_min = $wrapper->field_age_min->value();
      $age_max = $wrapper->field_age_max->value();
      if (!empty($age_min) || !empty($age_max)) {
        $age_items = array();
        $age_markup = '';
        if (!empty($age_min)) {
          $age_items['age_min'] = $node->content['field_age_min']['#items'][0];
          $age_markup .= t('minimum') . ' ' . $node->content['field_age_min'][0]['#markup'];
        }
        if (!empty($age_max)) {
          if (!empty($age_min)) {
            $age_markup .= ', ';
          }
          $age_items['age_max'] = $node->content['field_age_max']['#items'][0];
          $age_markup .= t('maximum') . ' ' . $node->content['field_age_max'][0]['#markup'];
        }
        $node->content['field_age_max']['#access'] = FALSE;
        $node->content['field_age_min']['#access'] = FALSE;
        $node->content['field_select_criteria']['#items'][$index] = $age_items;
        $node->content['field_select_criteria'][$index++]['#markup'] = t('Age') . ':<br />&nbsp;&nbsp;&nbsp;&nbsp;'
          . ucfirst($age_markup);
      }
    }

    _mica_studies_study_view_selection_criteria_item($node, $wrapper, 'field_country', t('Country'), t('Countries'));
    _mica_studies_study_view_selection_criteria_item($node, $wrapper, 'field_territory', t('Territory'), t('Territories'));
    _mica_studies_study_view_selection_criteria_item($node, $wrapper, 'field_ethnic_origin', t('Ethnic origin'), t('Ethnic origins'));
    _mica_studies_study_view_selection_criteria_item($node, $wrapper, 'field_health_status', t('Health status'));
    _mica_studies_study_view_selection_criteria_item($node, $wrapper, 'field_selection_others_sp', t('Other'));

    if (strlen($node->content['field_select_criteria'][0]['#markup']) === 0) {
      $node->content['field_select_criteria']['#access'] = FALSE;
    }

  }

}

function _mica_studies_study_view_selection_criteria_item(&$node, $wrapper, $field, $label, $label_plural = '') {
  if (!isset($node->content[$field])) {
    return;
  }
  $value = $wrapper->$field->value();
  if (!empty($value)) {
    $nb_items = count($value);
    $index = count($node->content['field_select_criteria']['#items']);
    $node->content['field_select_criteria']['#items'][$index] = $node->content[$field]['#items'];
    $markup = '';
    for ($i = 0; $i < $nb_items; $i++) {
      $markup .= $node->content[$field][$i]['#markup'];
      if ($i < $nb_items - 1) {
        $markup .= ', ';
      }
    }
    $markup_label = $label;
    if ($nb_items > 1 && strlen($label_plural) > 0) {
      $markup_label = $label_plural;
    }
    $node->content['field_select_criteria'][$index + 1]['#markup'] = '<div class="inner-label">'
      . t('@label', array('@label' => $markup_label)) . ':</div>'
      . '<div class="inner-value">' . $markup . '</div>';
    $node->content[$field]['#access'] = FALSE;
  }
}

/**
 * Implements hook_form_alter
 * To add dependent fields when filling out the form
 */
function mica_studies_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'study_node_form':
      _mica_studies_study_form_alter($form, $form_state, $form_id);
      break;
    case 'population_node_form':
      _mica_studies_population_form_alter($form, $form_state, $form_id);
      break;
    case 'data_collection_event_node_form':
      _mica_studies_data_collection_event_form_alter($form, $form_state, $form_id);
      break;
  }
}

function _mica_studies_study_form_alter(&$form, &$form_state, $form_id) {
  $form['#validate'][] = '_mica_studies_form_validate';

  // hide list of population
  $form['field_study_populations']['#type'] = 'hidden';

  // hide list of datasets
  $form['mica_dataset']['#type'] = 'hidden';

  _mica_add_dependent_field_checked($form, 'field_design', 'field_design_other_sp', 'other');
  _mica_add_dependent_field_checked($form, 'field_recruitment', 'field_recruitment_other_sp', 'other');
  _mica_add_dependent_field_checked($form, 'field_access_other', 'field_access_other_sp', '1');

  $form['actions']['_mica_studies_save_add_population_submit'] = array(
    '#access' => TRUE,
    '#value' => t('Save & Add Population'),
    '#weight' => -10,
    '#type' => 'submit',
    '#submit' => array('node_form_submit', '_mica_studies_save_add_population_submit'),
  );
}

function _mica_studies_save_add_population_submit($form, &$form_state) {
  if (isset($form['actions']['_mica_studies_save_add_population_submit'])) {
    $form_state['redirect'] = array(
      'node/add/population',
      array(
        'query' => array(
          'study' => $form_state['nid'],
        ),
      ),
    );
    $form_state['nid'] = NULL;
  }
}

function _mica_studies_population_form_alter(&$form, &$form_state, $form_id) {
  $form['#validate'][] = '_mica_populations_form_validate';

  // Prepopulate study node reference in population edit form and hide it
  if (isset($_REQUEST['study'])) {
    $lang = $form['field_pop_study']['#language'];
    $form['field_pop_study'][$lang]['#after_build'][] = '_mica_studies_prepopulate_study_after_build';
  }

  // hide study field
  $form['field_pop_study']['#type'] = 'hidden';

  // hide list of data collection events
  $form['field_pop_dce']['#type'] = 'hidden';

  $form['actions']['_mica_studies_save_edit_study_submit'] = array(
    '#access' => TRUE,
    '#value' => t('Save & Edit Study'),
    '#weight' => -20,
    '#type' => 'submit',
    '#submit' => array('node_form_submit', '_mica_studies_save_edit_study_submit'),
  );

  $form['actions']['_mica_studies_save_add_dce_submit'] = array(
    '#access' => TRUE,
    '#value' => t('Save & Add Collection Event'),
    '#weight' => -10,
    '#type' => 'submit',
    '#submit' => array('node_form_submit', '_mica_studies_save_add_dce_submit'),
  );

  //population
  _mica_add_dependent_field_checked($form, 'field_pop_src_recruit', 'field_pop_general_pop_recruit', 'general');
  _mica_add_dependent_field_checked($form, 'field_pop_src_recruit', 'field_pop_exist_study_part', 'exist_studies');
  _mica_add_dependent_field_checked($form, 'field_pop_src_recruit', 'field_pop_specific_pop', 'specific_population');
  _mica_add_double_dependent_field_checked($form, 'field_pop_src_recruit', 'field_pop_specific_pop', 'field_pop_specific_pop_other_sp', 'specific_population', 'other');
  _mica_add_dependent_field_checked($form, 'field_pop_src_recruit', 'field_pop_recruitment_other', 'other');

}

/**
 * Redirects to the study edit page when clicking on a button from the Population edit form or DCE edit form.
*/
function _mica_studies_save_edit_study_submit($form, &$form_state) {
  if (isset($form['actions']['_mica_studies_save_edit_study_submit']) && isset($form['field_pop_study'])) {
    //node_reference_autocomplete_value($form_element[0]['nid'], FALSE, NULL);
    $lang = $form['field_pop_study']['#language'];
    $form_state['redirect'] = 'node/'.$form['#node']->field_pop_study[$lang][0]['nid'].'/edit';
    $form_state['nid'] = NULL;
  }
  else if (isset($form['actions']['_mica_studies_save_edit_study_submit']) && isset($form['field_dce_population'])){
    // get the study id from the popuation id
    $lang = $form['field_dce_population']['#language'];
    $pop = node_load($form['#node']->field_dce_population[$lang][0]['nid']);
    $wrapper = entity_metadata_wrapper('node', $pop);
    $form_state['redirect'] = 'node/'.$wrapper->field_pop_study->value()->nid.'/edit';
    $form_state['nid'] = NULL;
  }
}

function _mica_studies_prepopulate_study_after_build(&$form_element) {
  if (isset($_REQUEST['study'])) {
    $form_element[0]['nid']['#default_value'] = $_REQUEST['study'];
    $form_element[0]['nid']['#value'] = node_reference_autocomplete_value($form_element[0]['nid'], FALSE, NULL);
  }
  return $form_element;
}

function _mica_studies_save_add_dce_submit($form, &$form_state) {
  if (isset($form['actions']['_mica_studies_save_add_dce_submit'])) {
    $form_state['redirect'] = array(
      'node/add/data-collection-event',
      array(
        'query' => array(
          'population' => $form_state['nid'],
        ),
      ),
    );
    $form_state['nid'] = NULL;
  }
}

function _mica_studies_data_collection_event_form_alter(&$form, &$form_state, $form_id) {
  $form['#validate'][] = '_mica_data_collection_event_form_validate';

  // Prepopulate study node reference in population edit form and hide it
  if (isset($_REQUEST['population'])) {
    $lang = $form['field_dce_population']['#language'];
    $form['field_dce_population'][$lang]['#after_build'][] = '_mica_studies_prepopulate_dce_after_build';
  }
  $form['field_dce_population']['#type'] = 'hidden';
  // hide list of population
  $form['field_dce_population']['#type'] = 'hidden';

  $form['actions']['_mica_studies_save_edit_study_submit'] = array(
    '#access' => TRUE,
    '#value' => t('Save & Edit Study'),
    '#weight' => -20,
    '#type' => 'submit',
    '#submit' => array('node_form_submit', '_mica_studies_save_edit_study_submit'),
  );

  $form['actions']['_mica_studies_save_edit_population_submit'] = array(
    '#access' => TRUE,
    '#value' => t('Save & Edit Population'),
    '#weight' => -10,
    '#type' => 'submit',
    '#submit' => array('node_form_submit', '_mica_studies_save_edit_population_submit'),
  );

  //dce
  _mica_add_dependent_field_checked($form, 'field_dce_data_sources', 'field_dce_data_sources_admin_db', 'administratives_databases');
  _mica_add_dependent_field_checked($form, 'field_dce_data_sources', 'field_dce_data_sources_sp', 'others');
  _mica_add_dependent_field_checked($form, 'field_dce_bio_samples_management', 'field_dce_tissues_sp', 'tissues');
  _mica_add_dependent_field_checked($form, 'field_dce_bio_samples_management', 'field_dce_samples_man_other_sp', 'others');
}

/**
 * Redirects to the population edit page when clicking on a button from the DCE edit form.
 */
function _mica_studies_save_edit_population_submit($form, &$form_state) {
  if (isset($form['actions']['_mica_studies_save_edit_population_submit'])) {
    $lang = $form['field_dce_population']['#language'];
    $form_state['redirect'] = 'node/'.$form['#node']->field_dce_population[$lang][0]['nid'].'/edit';
    $form_state['nid'] = NULL;
  }
}

function _mica_studies_prepopulate_dce_after_build(&$form_element) {
  if (isset($_REQUEST['population'])) {
    $form_element[0]['nid']['#default_value'] = $_REQUEST['population'];
    $form_element[0]['nid']['#value'] = node_reference_autocomplete_value($form_element[0]['nid'], FALSE, NULL);
  }
  return $form_element;
}

/**
 * Implement hook_field_group_pre_render
 * Used to show/hide a fieldset based on another field selection
 */
function mica_field_group_pre_render(&$element, $group, &$form) {

  if (isset($form['#form_id']) && $form['#form_id'] === 'study_node_form') {

    $group_name = $group->group_name;
    $lang = key_exists('#default_value', $form['language']) ? $form['language']['#default_value'] : LANGUAGE_NONE;
    $to_hide = array(
      'group_authorising_person' => array(
        'dependee' => 'field_authorization_specific[' . $lang . ']',
        'condition' => 'checked',
        'value' => TRUE,
      ),
      'group_authorising_person_m' => array(
        'dependee' => 'field_authorization_maelstrom[' . $lang . ']',
        'condition' => 'checked',
        'value' => TRUE,
      ),
    );

    if (array_key_exists($group_name, $to_hide)) {
      $element['#states'] = array(
        'visible' => array(
          'input[name="' . $to_hide[$group_name]['dependee'] . '"]' => array(
            $to_hide[$group_name]['condition'] => $to_hide[$group_name]['value']
          ),
        ),
      );
    }
  }
}

function _mica_add_dependent_field_checked(&$form, $dependee, $dependent, $key_selected) {
  if (array_key_exists($dependee, $form) && array_key_exists($dependent, $form)) {
    $lang = $form[$dependee]['#language'];
    $type = $form[$dependee][$lang]['#type'];
    $input = ':input[name="' . $dependee . '[' . $lang . ']';
    $rule = array();
    if ($type != 'radios') {
      $input = $input . '[' . $key_selected . ']';
      $rule['checked'] = TRUE;
    }
    else {
      $rule['value'] = $key_selected;
    }
    $input = $input . '"]';
    $form[$dependent]['#states'] = array(
      'visible' => array(
        $input => $rule,
      ),
    );
  }
  else {
    debug('dependee "' . $dependee . '" or dependent "' . $dependent . '"not found');
  }
}

function _mica_add_double_dependent_field_checked(&$form, $dependee1, $dependee2, $dependent, $key_selected1, $key_selected2) {
  if (array_key_exists($dependee1, $form) && array_key_exists($dependent, $form) && array_key_exists($dependee2, $form)) {
    $lang = $form[$dependee1]['#language'];
    $type = $form[$dependee1][$lang]['#type'];
    $input1 = ':input[name="' . $dependee1 . '[' . $lang . ']';
    $rule1 = array();
    if ($type != 'radios') {
      $input1 = $input1 . '[' . $key_selected1 . ']';
      $rule1['checked'] = TRUE;
    }
    else {
      $rule1['value'] = $key_selected1;
    }

    $lang = $form[$dependee2]['#language'];
    $type = $form[$dependee2][$lang]['#type'];
    $input2 = ':input[name="' . $dependee2 . '[' . $lang . ']';
    $rule2 = array();
    if ($type != 'radios') {
      $input2 = $input2 . '[' . $key_selected2 . ']';
      $rule2['checked'] = TRUE;
    }
    else {
      $rule2['value'] = $key_selected2;
    }

    $input1 = $input1 . '"]';
    $input2 = $input2 . '"]';
    $form[$dependent]['#states'] = array(
      'visible' => array(
        $input1 => $rule1,
        $input2 => $rule2,
      ),
    );
  }
  else {
    debug('dependee "' . $dependee1 . '" or dependent "' . $dependent . '"not found');
  }
}

/**
 * Displays dates as: 'start date' to 'end date' as the start date value.
 * And hide end date.
 */
function _mica_studies_display_status_dates(&$node, $status_dates) {
  $wrapper = entity_metadata_wrapper('node', $node);
  foreach ($status_dates as $start_date => $end_date) {
    $start = $wrapper->$start_date->value();
    $end = $wrapper->$end_date->value();
    if (!empty($start)) {
      if (isset($node->content[$start_date])) {
        $node->content[$start_date][0]['#markup'] = t('From') . ' ' . $node->content[$start_date][0]['#markup'];
      }

      if (!empty($end) && isset($node->content[$end_date])) {
        $node->content[$start_date][0]['#markup'] .= ' ' . t('to') . ' ' . $node->content[$end_date][0]['#markup'];
      }
    }
    $node->content[$end_date]['#access'] = FALSE;
  }
}

function _mica_bind_other_specify(&$node, $bindings) {

  foreach ($bindings as $other_sp => $options) {
    $field = $options['field'];
    if (isset($node->content[$field]) && (isset($node->content[$other_sp]) || isset($options['field_sp']))) {
      $key = $options['key'];
      $delimiter = ', ';

      $start = !isset($options['enclosed']) || $options['enclosed'] ? ' (' : '';
      $end = !isset($options['enclosed']) || $options['enclosed'] ? ')' : '';

      if (isset($key)) {
        // get the array index of the key
        foreach ($node->content[$field]['#items'] as $i => $items) {
          if ($i === $key || (isset($items['value']) && $items['value'] === $key)) {
            $index = $i;
            break;
          }
        }
      }
      else {
        $node->content[$field]['#items'][] = array('value' => 'extraone');
        $index = count($node->content[$field]['#items']) - 1;
      }

      if (isset($index)) {
        // bind the other specify with the other option
        $content = '';
        $specifies = array();
        if (isset($options['field_sp'])) {
          // add each field
          foreach ($options['field_sp'] as $f) {
            if (isset($node->content[$f])) {
              $prefix = '';
              if ($options['label_as_prefix']) {
                // If a display field as been defined, take this title instead
                $field_info = field_info_instance('node', $f, 'study');
                if (isset($field_info['display_label']) && strlen(trim($field_info['display_label'])) > 0) {
                  $prefix = $field_info['display_label'] . ' ';
                }
                else {
                  $prefix = $node->content[$f]['#title'] . ' ';
                }
              }
              if (isset($options['indent']) && $options['indent']) {
                $prefix .= '<br />&nbsp;&nbsp;&nbsp;&nbsp;';
              }
              foreach ($node->content[$f] as $k => $value) {
                if (is_int($k)) {
                  $specifies[] = $prefix . $value['#markup'];
                }
              }
            }
          }
          $content = implode($delimiter, $specifies);

        }
        else {

          for ($i = 0; $i < count($node->content[$other_sp]); $i++) {
            if (isset($node->content[$other_sp][$i])) {
              $prefix = '';
              if ($options['label_as_prefix']) {
                $prefix = $node->content[$other_sp]['#title'] . ' ';
                // If a display field as been defined, take this title instead
                $field_info = field_info_instance('node', $other_sp, 'study');
                if (isset($field_info['display_label']) && strlen(trim($field_info['display_label'])) > 0) {
                  $prefix = $field_info['display_label'] . ' ';
                }
              }
              $specifies[] = $prefix . $node->content[$other_sp][$i]['#markup'];
            }
          }

          $node->content[$other_sp]['#access'] = FALSE;
          $content = implode($delimiter, $specifies);
        }
        if (strlen(trim($content)) > 0) {
          if (array_key_exists($index, $node->content[$field])) {
            if (isset($options['enclosed']) && !$options['enclosed']) {
              $node->content[$field][$index]['#markup'] = $content;
            }
            else {
              $node->content[$field][$index]['#markup'] .= $start . $content . $end;
            }
          }
          else {
            if (isset($key)) {
              if (isset($options['enclosed']) && !$options['enclosed']) {
                $node->content[$field][0]['#markup'] = $content;
              }
              else {
                $node->content[$field][0]['#markup'] .= $start . $content . $end;
              }
            }
            else {
              if (array_key_exists('custom_prefix', $options)) {
                $node->content[$field][] = array('#markup' => $options['custom_prefix'] . ': ' . $content);
              }
              else {
                $node->content[$field][] = array('#markup' => $content);
              }
            }
          }
        }
      }
    }

    // hide the field_sp always
    if (isset($node->content[$field]) && isset($options['field_sp'])) {
      foreach ($options['field_sp'] as $f) {
        $node->content[$f]['#access'] = FALSE;
      }
    }

    if (isset($node->content[$field]) && isset($node->content[$other_sp])) {
      $node->content[$other_sp]['#access'] = FALSE;
    }
  }
}

function _mica_remove_suffix(&$node, $fields) {
  foreach ($fields as $field) {
    if (isset($node->content[$field])) {
      // find the last integer index...
      $index = 0;
      for (; $index < count($node->content[$field]); $index++) {
        if (!isset($node->content[$field][$index])) {
          break;
        }
      }
      $index--;

      $suffix = '';
      $field_info = field_info_instance('node', $field, 'study');
      if (isset($field_info['settings']['suffix']) && strlen(trim($field_info['settings']['suffix'])) > 0) {
        $suffix = $field_info['settings']['suffix'];
      }

      $node->content[$field][$index]['#markup'] = str_replace($suffix, '', $node->content[$field][$index]['#markup']);
    }
  }
}

/**
 * Hide a field if another field has a value
 */
function _mica_remove_exclusive_fields(&$node, $bindings) {
  // Hide the field if the other field as a value
  foreach ($bindings as $field => $other_field) {
    if (isset($node->content[$other_field])) {
      $node->content[$field]['#access'] = FALSE;
    }
  }
}

/**
 * Clear dependent field if dependee field selection is not checked.
 */
function _mica_studies_form_validate($form, &$form_state) {
  _mica_studies_form_validate_field($form, $form_state, 'field_design', 'field_design_other_sp', 'other');
  _mica_studies_form_validate_field($form, $form_state, 'field_recruitment', 'field_recruitment_other_sp', 'other');
  _mica_studies_form_validate_field($form, $form_state, 'field_access_other', 'field_access_other_sp', '1');

}

function _mica_populations_form_validate($form, &$form_state) {

  //population
  _mica_studies_form_validate_field($form, $form_state, 'field_pop_src_recruit', 'field_pop_general_pop_recruit', 'general');
  _mica_studies_form_validate_field($form, $form_state, 'field_pop_src_recruit', 'field_pop_exist_study_part', 'exist_studies');
  _mica_studies_form_validate_field($form, $form_state, 'field_pop_src_recruit', 'field_pop_specific_pop', 'specific_population');
  _mica_studies_form_validate_field($form, $form_state, 'field_pop_specific_pop', 'field_pop_specific_pop_other_sp', 'other');
  _mica_studies_form_validate_field($form, $form_state, 'field_pop_src_recruit', 'field_pop_recruitment_other', 'other');
}

function _mica_data_collection_event_form_validate($form, &$form_state) {
  //dce
  _mica_studies_form_validate_field($form, $form_state, 'field_dce_data_sources', 'field_dce_data_sources_admin_db', 'administratives_databases');
  _mica_studies_form_validate_field($form, $form_state, 'field_dce_data_sources', 'field_dce_data_sources_sp', 'others');
  _mica_studies_form_validate_field($form, $form_state, 'field_dce_bio_samples_management', 'field_dce_tissues_sp', 'tissues');
  _mica_studies_form_validate_field($form, $form_state, 'field_dce_bio_samples_management', 'field_dce_samples_man_other_sp', 'others');
}

/**
 * Clear dependent field if dependee field selection is not checked in any language.
 */
function _mica_studies_form_validate_field($form, &$form_state, $dependee, $dependent, $selection) {
  if (array_key_exists($dependee, $form_state['values']) && array_key_exists($dependent, $form_state['values'])) {
    $flangs = array_keys($form_state['values'][$dependee]);
    $flang = $flangs[0];
    $values = array();
    foreach ($form_state['values'][$dependee][$flang] as $value) {
      if (array_key_exists('value', $value)) {
        $values[] = $value['value'];
      }
      else if (array_key_exists('tid', $value)) {
        $values[] = $value['tid'];
      }

    }

    if (in_array($selection, $values) == FALSE) {
      $empty_value = array();
      $lgs = array_keys($form_state['values'][$dependent]);
      foreach ($lgs as $lg) {
        $empty_value[$lg] = array(array('value' => ''));
      }
      form_set_value($form[$dependent], $empty_value, $form_state);
    }
  }
  else {
    debug('dependee "' . $dependee . '" or dependent "' . $dependent . '"not found');
  }
}

/**
 * Implements hook_block_view_alter()
 */
function mica_studies_block_view_alter(&$data, $block) {
  if (!empty($block) && $block->delta === 'study_current_search' && $block->module === 'current_search') {
    _mica_studies_study_current_search($data, $block);
  }
}

function _mica_studies_study_current_search(&$data, $block) {
  if (isset($data['content']['field_group'])) {
    $data['content']['results']['#markup'] .= ' - ' . l(
      t('Clear all criteria') . ' [X]',
      'studies-search',
      array(
        'attributes' => array(
          'rel' => 'nofollow',
          'class' => array('current-search-clear-all'),
        )
      )
    );
    foreach ($data['content']['field_group'] as $field => $field_group) {
      $field_info = field_info_instance('node', $field, 'study');
      if (isset($field_info['display_label']) && strlen(trim($field_info['display_label'])) > 0) {
        $data['content']['field_group'][$field]['title']['#markup'] = '<h4 class="current-search-group-title">'
          . filter_xss(t($field_info['display_label'])) . ':</h4>';
      }
    }
  }
}

/**
 * Implements hook_node_validate()
 */
function mica_studies_node_validate($node, $form, &$form_state) {
  // check study node title is unique
  if (!isset($node->nid) && $node->type === 'study') {
    if (mica_core_node_title_exists($node->type, $node->title)) {
      form_set_error('title', t('Study name \'!title\' is already given.', array('!title' => $node->title)));
    }
  }
}

/**
 * Creates default content after Features successfully installed
 * Implements hook_post_features_rebuild()
 */
function mica_studies_post_features_rebuild() {
  if (!variable_get('mica_studies_features_rebuild_completed', FALSE)) {
    _mica_studies_create_default_content();
    _mica_studies_configure_permissions();
    variable_set('mica_studies_features_rebuild_completed', TRUE);
  }
}

function _mica_studies_create_default_content() {
  $study_menu = mica_core_create_menu(st('Studies'), 'studies', 'studies', FALSE, FALSE, 5);
  mica_core_set_menu_option('study', $study_menu['mlid']);
}

function _mica_studies_configure_permissions() {
  watchdog('mica', 'Configure Studies custom permissions', array(), WATCHDOG_DEBUG);
  mica_core_configure_role_permissions('study reviewer',
    array(
      'menu view unpublished' => TRUE,
    )
  );
  mica_core_configure_role_permissions('study administrator',
    array(
      'menu view unpublished' => TRUE,
    )
  );
}

/**
 * When creating studies via noderefcreate, set the complete name form the title because of auto_node_title
 * Implements hook_noderefcreate_alter()
 */
function mica_studies_noderefcreate_alter(&$newnode, $element, $form_state) {
  switch ($newnode->type) {
    case 'study':
      $wrapper = entity_metadata_wrapper('node', $newnode);
      $wrapper->title_field->set($wrapper->title->value());
      break;
    case 'contact':
      $wrapper = entity_metadata_wrapper('node', $newnode);
      $wrapper->field_contact_name->given->set($wrapper->title->value());
      break;
  }
}

/*
 * Hook hook_translation_exclude_fields()
 */
function mica_studies_translation_exclude_fields() {

  return array(
    'study' => array('mica_opal'),
  );
}

/*
 * Hook hook_node_delete
 */

function  mica_studies_node_delete($node) {
  switch ($node->type) {
    case 'study':
      _mica_studies_study_delete($node);
      break;
    case 'population':
      _mica_studies_population_delete($node);
      break;
    case 'data_collection_event':
      _mica_studies_dce_delete($node);
      break;
  }
}

/**
 * Implements hook_block_info().
 */
function mica_studies_block_info() {
  return array(
    'study-general-info' => array(
      'info' => t('Study General Information'),
      'weight' => '10',
      'status' => TRUE,
      'region' => 'content',
      'visibility' => BLOCK_VISIBILITY_NOTLISTED,
      'pages' => '',
    ),
    'study-general-design' => array(
      'info' => t('Study General Design'),
      'weight' => '20',
      'status' => TRUE,
      'region' => 'content',
      'visibility' => BLOCK_VISIBILITY_NOTLISTED,
      'pages' => '',
    ),
    'study-access' => array(
      'info' => t('Study Access'),
      'weight' => '30',
      'status' => TRUE,
      'region' => 'content',
      'visibility' => BLOCK_VISIBILITY_NOTLISTED,
      'pages' => '',
    ),
    'study-marker-paper' => array(
      'info' => t('Study Marker Paper'),
      'weight' => '40',
      'status' => TRUE,
      'region' => 'content',
      'visibility' => BLOCK_VISIBILITY_NOTLISTED,
      'pages' => '',
    ),
    'study-documents' => array(
      'info' => t('Study Documents'),
      'weight' => '50',
      'status' => TRUE,
      'region' => 'content',
      'visibility' => BLOCK_VISIBILITY_NOTLISTED,
      'pages' => '',
    ),
    'study-supp-infos' => array(
      'info' => t('Study Supplementary Information'),
      'weight' => '60',
      'status' => TRUE,
      'region' => 'content',
      'visibility' => BLOCK_VISIBILITY_NOTLISTED,
      'pages' => '',
    ),
    'study-populations' => array(
      'info' => t('Study Populations'),
      'weight' => '70',
      'status' => TRUE,
      'region' => 'content',
      'visibility' => BLOCK_VISIBILITY_NOTLISTED,
      'pages' => '',
    ),
    'study-authorization' => array(
      'info' => t('Study Authorization'),
      'weight' => '1000',
      'status' => TRUE,
      'region' => 'content',
      'visibility' => BLOCK_VISIBILITY_NOTLISTED,
      'pages' => '',
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function mica_studies_block_view($delta = '') {
  module_load_include('inc', 'mica_studies', 'mica_studies.blocks');
  $study = menu_get_object();
  if (empty($study)) {
    return NULL;
  }
  switch ($delta) {
    case 'study-general-info':
      return _mica_studies_block_study_general_info($study);
    case 'study-general-design':
      module_load_include('inc', 'mica_studies', 'mica_studies.blocks.general_design');
      return _mica_studies_block_study_general_design($study);
    case 'study-access':
      return _mica_studies_block_study_access($study);
    case 'study-marker-paper':
      return _mica_studies_block_study_marker_paper($study);
    case 'study-documents':
      return _mica_studies_block_study_documents($study);
    case 'study-supp-infos':
      return _mica_studies_block_study_supp_infos($study);
    case 'study-populations':
      module_load_include('inc', 'mica_studies', 'mica_studies.blocks.populations');
      return _mica_studies_block_study_populations($study);
    case 'study-authorization':
      module_load_include('inc', 'mica_studies', 'mica_studies.blocks.authorization');
      return _mica_studies_block_study_authorization($study);
    default:
      return NULL;
  }
}
