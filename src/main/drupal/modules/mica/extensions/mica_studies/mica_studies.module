<?php
/**
 * @file
 * Code for the mica_studies feature.
 */

require_once('mica_studies.features.inc');

/**
 * Implements hook_install().
 */
function mica_studies_install() {
  _mica_import_custom_name_format();
  _mica_node_reference_block();
}

/**
 * Implements hook_menu().
 */
function mica_studies_menu() {
  $items = array();
  $items['export'] = array(
    'title' => 'Export',
    'page callback' => 'mica_studies_export_page',
    'access callback' => 'mica_studies_export_page_access',
    'file' => 'mica_studies.pages.inc',
  );
  return $items;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function mica_studies_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  $links = array();

  if ($root_path == 'studies') {
    if (node_access('create', 'study')) {
      $node_type = node_type_load('study');
      $links['add-study'] = array(
        '#theme' => 'menu_local_action',
        '#link' => array(
          'title' => t('Add a !name', array('!name' => $node_type->name)),
          'href' => 'node/add/study',
      ),
      );
    }
  }
  elseif ($root_path == 'documents') {
    $links = array();
    if (node_access('create', 'documents')) {
      $links['add-documents'] = array(
        '#theme' => 'menu_local_action',
        '#link' => array(
          'title' => t('Add some Documents'),
          'href' => 'node/add/documents',
      ),
      );
    }
  }

  $data['actions']['output'] = array_merge($data['actions']['output'], $links);
}

/**
 * Implements feeds_permission().
 */
function mica_studies_permission() {
  $perms = array(
    'export data' => array(
      'title' => t('Export Data'),
      'description' => t('Allow exportation of data.')
  ),
  );
  return $perms;
}

/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 */
function mica_studies_block_info() {
  $blocks['mica-search-filters'] = array(
    'info' => t('Search filters selection'),
    'status' => TRUE,
    'region' => 'sidebar_first',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'studies-search',
  );

  $blocks['mica-search'] = array(
    'info' => t('Search'),
    'status' => TRUE,
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => '',
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.
 */
function mica_studies_block_view($delta = '') {
  global $user;
  $block = array();

  //The $delta parameter tells us which block is being requested.
  switch ($delta) {
    case 'mica-search':
      module_load_include('inc', 'mica', 'includes/blocks');
      $block['subject'] = t('Search');
      $block['content'] = mica_search_block_content();
      return $block;
    case 'mica-search-filters':
      if ($user->uid == 0) {
        // not available for anonymous user
        return;
      }

      module_load_include('inc', 'mica', 'includes/blocks');
      $block['subject'] = t('Search filters selection');
      $content = mica_search_filters_block_content();

      if ($content) {
        $block['content'] = $content;
        return $block;
      }
      else {
        // no content, then no block
        return;
      }
    default:
      return;
  }

}

/**
 * Menu access callback.
 */
function mica_studies_export_page_access() {
  return user_access('export data');
}

function _mica_import_custom_name_format(){
  // add custom field format for name until next release of views
  $custom_format = array(
    'name' => 'Title',
  	'machine_name' => 'title',
  	'format' => 't',
  );
  drupal_write_record('name_custom_format', $custom_format);
}

function _mica_node_reference_block() {
  db_delete('block_node_type')
  ->condition('module', 'node_reference_block')
  ->condition('delta', 'related-content')
  ->condition('type', 'study%','LIKE')
  ->execute();
  $query = db_insert('block_node_type')->fields(array('type', 'module', 'delta'));
  foreach (array('study', 'study_information','study_documents','contact','institution') as $type) {
    $query->values(array(
      'type' => $type,
      'module' => 'node_reference_block',
      'delta' => 'related-content',
    ));
  }
  $query->execute();
}

/**
* Implements hook_node_insert()
*/
function mica_studies_node_insert($node) {
  if ($node->type === 'study') {
	  mica_create_menu($node, 1);
  }
}

/**
 * Implements hook_entity_view_alter
 */
function mica_entity_view_alter(&$build, $type) {
  if ($build['#view_mode'] == 'full' && $build['body']['#bundle'] == 'study') {
    
    $lang = $build['field_authorization_specific']['#language'];
    
    if ($build['field_no_limits_participants']['#object']->field_no_limits_participants[$lang][0]['value'] == 0){
      unset($build['field_no_limits_participants']);
    }
    if ($build['field_no_limits_samples']['#object']->field_no_limits_samples[$lang][0]['value'] == 0){
    	unset($build['field_no_limits_samples']);
    }
    
  }
}

function mica_studies_form_alter(&$form, &$form_state, $form_id){
  if ($form_id == 'study_node_form'){
    
    _mica_add_dependent_field_checked($form, 'field_design', 'field_design_other_sp', 'other');
    _mica_add_dependent_field_checked($form, 'field_recruitment', 'field_recruitment_other_sp', 'other');
    _mica_add_dependent_field_checked($form, 'field_select_criteria', 'field_selection_others_sp', 'others');
    _mica_add_dependent_field_checked($form, 'field_access_data_samples', 'field_access_other_sp', 'other');
    _mica_add_dependent_field_checked($form, 'field_bio_samples_management', 'field_samples_man_other_sp', 'others');
    _mica_add_dependent_field_checked($form, 'field_bio_samples_management', 'field_tissues_sp', 'tissues');
    
  }
}

/**
 * 
 * Implemenet hook_field_group_render
 * Used to show/hide a fieldset based on another field selection
 */
function mica_field_group_pre_render(&$element, $group, &$form){
  
  if (isset($form['#form_id']) && $form['#form_id'] == 'study_node_form'){
    
    $group_name = $group->group_name;
    $lang = $form['language']['#default_value'];
    $to_hide = array(
    	'group_authorising_person' => array(
     	  'dependee' => 'field_authorization_specific['.$lang.']',
          'condition' => 'checked',
          'value' => TRUE,
        ),
        'group_authorising_person_m' => array(
          'dependee' => 'field_authorization_maelstrom['.$lang.']',
          'condition' => 'checked',
      	  'value' => TRUE,
        ),
        'group_specify_gender' => array(
          'dependee' => 'field_select_criteria['.$lang.'][gender]',
          'condition' => 'checked',
          'value' => TRUE,
        ),
        'group_age_range' => array(
          'dependee' => 'field_select_criteria['.$lang.'][age]',
          'condition' => 'checked',
          'value' => TRUE,
        ),
        'group_countries' => array(
          'dependee' => 'field_select_criteria['.$lang.'][countries]',
          'condition' => 'checked',
          'value' => TRUE,
        ),
        'group_ethnic_origin' => array(
          'dependee' => 'field_select_criteria['.$lang.'][ethnic]',
          'condition' => 'checked',
          'value' => TRUE,
        ),
        'group_health_status' => array(
          'dependee' => 'field_select_criteria['.$lang.'][health]',
          'condition' => 'checked',
          'value' => TRUE,
        ),
    );
  
    if (array_key_exists($group_name, $to_hide)){
      $element['#states'] = array(
          'visible' => array(
            'input[name="'.$to_hide[$group_name]['dependee'].'"]' => array($to_hide[$group_name]['condition'] => $to_hide[$group_name]['value']),
          ),
      );
    }
  }
}

function _mica_add_dependent_field_checked(&$form, $dependee, $dependent, $key_selected){
  if (array_key_exists($dependee, $form) && array_key_exists($dependent, $form)){
    
    $lang = $form['language']['#default_value'];
    
    $form[$dependent]['#states'] = array(
      'visible' => array(
        ':input[name="'.$dependee.'['.$lang.']['.$key_selected.']"]' => array('checked' => TRUE),
      ),
    );
  }
  else{
    debug('dependee or dependent not found');
  }
}
function _mica_add_dependent_field_filled(&$form, $dependee, $dependent){
	if (array_key_exists($dependee, $form) && array_key_exists($dependent, $form)){

    	$lang = $form['language']['#default_value'];
    
    	$form[$dependent]['#states'] = array(
        	'visible' => array(
          	':input[name="'.$dependee.'['.$lang.']"]' => array('filled' => TRUE),
    	  ),
    	);
	}
	else{
		debug('dependee or dependent not found');
	}
}