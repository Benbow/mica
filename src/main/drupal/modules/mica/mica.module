<?php

include_once(drupal_get_path('module', 'mica_core') . '/mica_core.search.utils.inc');

/**
 * Implements hook_help()
 */
function mica_help($path, $arg) {
  switch ($path) {
    case "admin/help#mica":
      return '<p>' //
      . t("Mica Documentation can be found here:") . '</p>' //
      . '<ul>' //
      . ' <li><a href="http://wiki.obiba.org/display/MICADOC/Mica+Administration+Guide">' . t('Mica Administration Guide') . '</a></li>' //
      . ' <li><a href="http://wiki.obiba.org/display/MICADOC/Mica+User+Guide">' . t('Mica User Guide') . '</a></li>' //
      . '</ul>';
      break;
  }
}

/**
 * Implements hook_menu().
 */
function mica_menu() {
  $items['mica/%ctools_js/node/%node'] = array(
    'page callback' => 'mica_node_modal_page_view',
    'page arguments' => array(1,3),
    'access callback' => 'node_access',
    'access arguments' => array('view', 3),
  );
  return $items;
}

/**
 * Implements hook_form().
 */
function mica_form($node, &$form_state) {
  return node_content_form($node, $form_state);
}

/**
 * Implements hook_field_formatter_info().
 */
function mica_field_formatter_info() {
  return array(
    // This formatter just displays the link to pubmed article from its id.
    'mica_pubmed_url' => array(
      'label' => t('Pubmed Link'),
      'field types' => array('text','number_integer'),
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function mica_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
    $element = array();

  switch ($display['type']) {
    case 'mica_pubmed_url':
      foreach ($items as $delta => $item) {
        $element[$delta] = array('#markup' => l('PUBMED ' . $item['value'],'http://www.ncbi.nlm.nih.gov/pubmed/' . $item['value']));
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 */
function mica_block_info() {
  $blocks['powered-by-mica'] = array(
    'info' => t('Powered by Mica'),
    'weight' => '10',
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.
 */
function mica_block_view($delta = '') {
	$block = array();
  switch ($delta) {
    case 'powered-by-mica':
      $block['subject'] = NULL;
      $block['content'] = '<span>' . t('Powered by <a href="@poweredby">Mica</a>', array('@poweredby' => 'http://obiba.org')) . '</span>';
      break;
  }
  return $block;
}

/**
 * Implements hook_feeds_plugins().
 */
function mica_feeds_plugins() {

  $info = array();
  $info['FeedsUniqueNodeProcessor'] = array(
    'name' => 'Unique Node processor',
    'description' => 'Update nodes if it already exists or creates a new one.',
    'help' => 'Update nodes from parsed content.',
    'handler' => array(
      'parent' => 'FeedsNodeProcessor',
      'class' => 'FeedsUniqueNodeProcessor',
      'file' => 'FeedsUniqueNodeProcessor.inc',
      'path' => drupal_get_path('module', 'mica') . '/includes/feeds/processors',
    ),
  );

  $info['FeedsMultiValueCSVParser'] = array(
    'name' => 'Multivalue CSV parser',
    'description' => 'Parse data in Comma Separated Value format, with the option for multiple values per cell.',
    'handler' => array(
      'parent' => 'FeedsCSVParser',
      'class' => 'FeedsMultiValueCSVParser',
      'file' => 'FeedsMultiValueCSVParser.inc',
      'path' => drupal_get_path('module', 'mica') . '/includes/feeds/parsers',
    ),
  );

  $info['FeedsRestFetcher'] = array(
    'name' => 'RESTful HTTP Fetcher',
    'description' => 'Download content from a RESTful web service.',
    'handler' => array(
      'parent' => 'FeedsFetcher',
      'class' => 'FeedsRestFetcher',
      'file' => 'FeedsRestFetcher.inc',
      'path' => drupal_get_path('module', 'mica') . '/includes/feeds/fetchers',
    ),
  );

  return $info;
}

/**
* Implements hook_entity_info_alter().
*/
function mica_entity_info_alter(&$entity_info) {
  _mica_add_view_mode($entity_info, 'banner_area', 'Banner Area');
  _mica_add_view_mode($entity_info, 'left_area', 'Left Area');
  _mica_add_view_mode($entity_info, 'right_area', 'Right Area');
  _mica_add_view_mode($entity_info, 'center_area', 'Center Area');
  _mica_add_view_mode($entity_info, 'footer_area', 'Footer Area');
  _mica_add_view_mode($entity_info, 'summary_area', 'Summary');
  _mica_add_view_mode($entity_info, 'summary_banner_area', 'Summary Banner Area');
  _mica_add_view_mode($entity_info, 'summary_left_area', 'Summary Left Area');
  _mica_add_view_mode($entity_info, 'summary_right_area', 'Summary Right Area');
  _mica_add_view_mode($entity_info, 'summary_center_area', 'Summary Center Area');
  _mica_add_view_mode($entity_info, 'summary_footer_area', 'Summary Footer Area');
}

function _mica_add_view_mode(&$entity_info, $mode, $label) {
  if (!isset($entity_info['node']['view modes'][$mode])) {
    $entity_info['node']['view modes'][$mode] = array(
      'label' => t($label),
      'custom settings' => FALSE,
    );
  }
}

//
// Modal helper functions
//

/**
 * Declare styles for Mica modal dialogs.
 * @param $styles array of styles: name (required) and width, height (required for a dialog with a fixed size)
 */
function mica_modal_prepare($styles) {
  // Include the CTools tools that we need.
  ctools_include('ajax');
  ctools_include('modal');

  // Add CTools' javascript to the page.
  ctools_modal_add_js();

  $style_settings = array();

  // Create our own javascript that will be used to theme a modal.
  foreach ($styles as $style) {
    $settings = array();

    if (!empty($style['width']) && !empty($style['height'])) {
      $settings['modalSize'] = array(
        'type' => 'fixed',
        'width' => $style['width'],
        'height' => $style['height'],
        'addWidth' => 20,
        'addHeight' => 15,
      );
    }
    else {
      $settings['modalSize'] = array(
        'type' => 'scale',
        'addWidth' => 20,
        'addHeight' => 15,
      );
    }

    $settings['modalOptions'] = array(
        'opacity' => .5,
        'background-color' => '#000',
    );

    $settings['animation'] = 'fadeIn';
    $settings['modalTheme'] = 'MicaModal';

    $style_settings[$style['name']] = $settings;
  }
  drupal_add_js($style_settings, 'setting');

  // Since we have our js, css and images in well-known named directories,
  // CTools makes it easy for us to just use them without worrying about
  // using drupal_get_path() and all that ugliness.
  ctools_add_js('mica-modal', 'mica');
  ctools_add_css('mica-modal', 'mica');
}

/**
 * Renders the form identified by $form_id in a modal dialog, with provided title. Additional arguments are added to the $form_state.
 * @param $title
 * @param $form_id
 */
function mica_modal_form_render($title, $form_id) {
  ctools_include('ajax');
  ctools_include('modal');
  ctools_add_js('ajax-responder');

  $form_state = array(
      'ajax' => TRUE,
      'title' => $title,
  );
  $args = func_get_args();
  // Remove $title and $form_id from the arguments.
  array_shift($args);
  array_shift($args);
  $form_state['build_info']['args'] = $args;

  $commands = ctools_modal_form_wrapper($form_id, $form_state);

  // If cancelling or complete, return to the activity.
  if (!empty($form_state['complete'])) {
    $commands = array();
    $commands[] = ctools_modal_command_dismiss();
    if (!empty($form_state['redirect'])) {
      $commands[] = ctools_ajax_command_redirect($form_state['redirect']);
    }
  }
  elseif (!empty($form_state['cancel'])) {
    $commands = array();
    $commands[] = ctools_modal_command_dismiss();
  }

  print ajax_render($commands);
}

/**
 * Renders the node page in a modal window. Use mica_modal_prepare() to set up a link to the node page.
 * @param $js
 * @param $node
 */
function mica_node_modal_page_view($js = NULL, $node) {
  if ($js) {
    ctools_include('ajax');
    ctools_include('modal');
    ctools_modal_render($node->title, node_show($node));
  }
  else {
    return node_page_view($node);
  }
}

