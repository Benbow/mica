<?php

require_once(drupal_get_path('module', 'mica') . '/includes/feeds/mappers/mica.inc');
require_once(drupal_get_path('module', 'mica') . '/includes/feeds/mappers/email.inc');
require_once(drupal_get_path('module', 'mica') . '/includes/feeds/mappers/name.inc');
require_once(drupal_get_path('module', 'mica') . '/includes/feeds/mappers/references.inc');

/**
 * Implements hook_help()
 */
function mica_help($path, $arg) {
  switch ($path) {
    case "admin/help#mica":
      return '<p>' //
      . t("Mica Documentation can be found here:") . '</p>' //
      . '<ul>' //
      . ' <li><a href="http://wiki.obiba.org/display/MICADOC/Mica+Administration+Guide">' . t('Mica Administration Guide') . '</a></li>' //
      . ' <li><a href="http://wiki.obiba.org/display/MICADOC/Mica+User+Guide">' . t('Mica User Guide') . '</a></li>' //
      . '</ul>';
      break;
  }
}

/**
 * Implements hook_menu().
 */
function mica_menu() {
  $items['mica/%ctools_js/node/%node'] = array(
    'page callback' => 'mica_node_modal_page_view',
    'page arguments' => array(1,3),
    'access callback' => 'node_access',
    'access arguments' => array('view', 3),
  );

  return $items;
}

/**
 * Implements hook_entity_info().
 */
function mica_entity_info() {
  $info['mica_relation'] = array(
    'label' => t('Mica Relation'),
    'controller class' => 'EntityAPIController',
    'entity class' => 'MicaRelation',
    'base table' => 'mica_relation',
    'uri callback' => 'mica_relation_url',
    'module' => 'mica',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'label' => 'label',
    ),
  );
  return $info;
}

/**
 * Implements of hook_TYPE_load().
 *
 * Load search index infos from Search API
 */
function mica_mica_relation_load($entities) {
  if (empty($entities)) return;
  module_load_include('inc', 'mica', 'includes/search');
  $indexes = _mica_find_indexes_by_bundle();
  if (!empty($indexes)) {
    foreach ($entities as $entity) {
      if (!empty($indexes[$entity->parent_bundle])) {
        $entity->options['parent_indexes'] = array_keys($indexes[$entity->parent_bundle]);
      }
      if (!empty($indexes[$entity->child_bundle])) {
        $entity->options['child_indexes'] = array_keys($indexes[$entity->child_bundle]);
      }
    }
  }
}



/**
 * Implements hook_form_FORM_ID_alter()
 */
function mica_form_node_type_form_alter(&$form, $form_state) {
  module_load_include('inc', 'mica', 'includes/relations');
  return _mica_node_type_form_alter($form, $form_state);
}

/**
 * Implements hook_node_type_delete()
 */
function mica_node_type_delete($info) {
  module_load_include('inc', 'mica', 'includes/relations');
  $relations = _mica_find_relation_by_parent_or_child($info->type);
  if (!empty($relations)) {
    foreach ($relations as $relation) {
      field_delete_field($relation->options['node_reference']);
      watchdog('mica', 'Delete relation between parent %parent and child %child',
      array(
          '%parent' => $relation->parent_bundle,
          '%child' => $relation->child_bundle, 
      ), WATCHDOG_INFO);
    }
    db_delete('mica_relation')->condition('id', array_keys($relations), 'IN')->execute();
  }
}

/**
 * Hide relation node reference fields.
 * Implements hook_field_attach_form()
 */
function mica_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {
  if ($entity_type === 'node') {
    module_load_include('inc', 'mica', 'includes/relations');
    $relations = _mica_find_relations_by_parent($entity->type);
    if (!empty($relations)) {
      foreach ($relations as $relation) {
        $form[$relation->options['node_reference']]['#attributes']['style'] = array('display:none;');
      }
    }
  }
}

/**
 * Implements hook_form().
 */
function mica_form($node, &$form_state) {
  return node_content_form($node, $form_state);
}

/**
 * Implements hook_node_validate()
 */
function mica_node_validate($node, $form, &$form_state) {
  // check study node title is unique
  if (!isset($node->nid) && $node->type === 'study') {
    module_load_include('inc', 'mica', 'includes/relations');
    if (mica_node_title_exists($node->type, $node->title)) {
      form_set_error('title',t('Study name \'!title\' is already given.', array('!title' => $node->title)));
    }
  }
}

/**
 * Implements hook_node_presave()
 */
function mica_node_presave($node) {
  
  if (empty($node->nid)) {
    
    if ($node->type === 'field_description') {
    	module_load_include('inc', 'mica', 'includes/search');
    	_mica_update_index_for_field_description($node);
    	return;
    }
    
    module_load_include('inc', 'mica', 'includes/relations');
    $relations = _mica_find_relations_by_parent($node->type);
    if (!empty($relations)) {
    
        $menu = mica_create_menu($node, 0);
    	
    	foreach ($relations as $relation) {
    		$relation->create_child_node($node, $menu);
    	}
    }    
    
  } else {

    if ($node->type === 'field_description') {
    	module_load_include('inc', 'mica', 'includes/search');
    	_mica_update_index_for_field_description($node);
    	return;
    }
    
    module_load_include('inc', 'mica', 'includes/relations');
    $relations = _mica_find_relations_by_parent($node->type);
    if (!empty($relations)) {
    	foreach ($relations as $relation) {
    		$relation->update_child_node($node);
    	}
    }
    
  }
//   debug($node); 
}

/**
 * Do not allow users to delete a node if the node type is part of a relation as a child.
 */
function mica_node_access($node, $op, $account){
  
  if ($op === 'delete'){
    $type = is_string($node) ? $node : $node->type;

    module_load_include('inc', 'mica', 'includes/relations');
    $relation = _mica_find_relation_by_child($type);
    
    if (!is_null($relation)){
      return NODE_ACCESS_DENY;
    }
  } 
  else {
    return NODE_ACCESS_IGNORE;
  }
}

function mica_form_alter(&$form, $form_state, $form_id) {
  $node_type = NULL;
  
  if (array_key_exists('#node', $form) && isset($form['type']['#value'])){
    $node_type = $form['type']['#value'];
  }
  
  // Disable for feeds also
  else if ($form_id === 'feeds_delete_tab_form' ){
    $importer = feeds_importer($form['#importer_id']);
    $node_type = $importer->processor->config['content_type'];
  }
  
  if (!is_null($node_type)){
    module_load_include('inc', 'mica', 'includes/relations');
    $relation = _mica_find_relation_by_child($node_type);
    
    if (!is_null($relation) && array_key_exists('actions', $form)){
    	$form['actions']['info'] = array(
            '#markup' => '&nbsp;&nbsp;This node should not be deleted because it is used by the relation "' . $relation->label .'". Only parents of relations can be deleted.',
            '#weight' => '50',
    	);
    }
  }
}

/**
 * Implements hook_node_delete()
 */
function mica_node_delete($node) {

  if ($node->type === 'field_description') {
    $field_bundle = $node->field_bundle;
    $bundle = $field_bundle[LANGUAGE_NONE][0]['value'];

    $field_original_field_name = $node->field_original_field_name;
    $original_field_name = $field_original_field_name[LANGUAGE_NONE][0]['value'];

    module_load_include('inc', 'mica', 'includes/search');
    _mica_drop_search_index_field($bundle, $original_field_name);
    return;
  }

  module_load_include('inc', 'mica', 'includes/relations');
  $relations = _mica_find_relations_by_parent($node->type);
  if (!empty($relations)) {
    foreach ($relations as $relation) {
      $relation->delete_child_node($node);
    }
  }
}

/**
 * Implements of hook_form_FORM_ID_alter()
 */
function mica_form_field_ui_field_edit_form_alter(&$form, $form_state, $form_id) {
  module_load_include('inc', 'mica', 'includes/field_description');
  return _mica_field_settings_form_alter($form, $form_state, $form_id);
}

/**
 * Implements hook_field_delete_instance()
 */
function mica_field_delete_instance($instance) {
  module_load_include('inc', 'mica', 'includes/field_description');
  _mica_delete_field_description_for_field_instance($instance);
}

function mica_validate_node_type_relation($form, &$form_state) {
  module_load_include('inc', 'mica', 'includes/relations');
  _mica_validate_node_type_relation($form, $form_state);
}

function mica_edit_node_type_relation($form, &$form_state) {
  module_load_include('inc', 'mica', 'includes/relations');
  _mica_edit_node_type_relation($form, $form_state);
}


/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 */
function mica_block_info() {
  $blocks['powered-by-mica'] = array(
    'info' => t('Powered by Mica'),
    'weight' => '10',
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.
 */
function mica_block_view($delta = '') {
	$block = array();
  switch ($delta) {
    case 'powered-by-mica':
      $block['subject'] = NULL;
      $block['content'] = '<span>' . t('Powered by <a href="@poweredby">Mica</a>', array('@poweredby' => 'http://obiba.org')) . '</span>';
      break;
  }
  return $block;
}

/**
 * Implements hook_feeds_plugins().
 */
function mica_feeds_plugins() {

  $path = drupal_get_path('module', 'mica') . '/includes/feeds/processors';

  $info = array();
  $info['FeedsMicaProcessor'] = array(
    'name' => 'Mica Node processor',
    'description' => 'Update nodes that are linked to a Parent through a mica_relation.',
    'help' => 'Update nodes from parsed content.',
    'handler' => array(
      'parent' => 'FeedsNodeProcessor',
      'class' => 'FeedsMicaProcessor',
      'file' => 'FeedsMicaProcessor.inc',
      'path' => $path,
    ),
  );
  $info['FeedsUniqueNodeProcessor'] = array(
    'name' => 'Unique Node processor',
    'description' => 'Update nodes if it already exists or creates a new one.',
    'help' => 'Update nodes from parsed content.',
    'handler' => array(
      'parent' => 'FeedsNodeProcessor',
      'class' => 'FeedsUniqueNodeProcessor',
      'file' => 'FeedsUniqueNodeProcessor.inc',
      'path' => $path,
    ),
  );

  $path = drupal_get_path('module', 'mica') . '/includes/feeds/parsers';

  $info['FeedsMultiValueCSVParser'] = array(
    'name' => 'Multivalue CSV parser',
    'description' => 'Parse data in Comma Separated Value format, with the option for multiple values per cell.',
    'handler' => array(
      'parent' => 'FeedsCSVParser',
      'class' => 'FeedsMultiValueCSVParser',
      'file' => 'FeedsMultiValueCSVParser.inc',
      'path' => $path,
    ),
  );

  $path = drupal_get_path('module', 'mica') . '/includes/feeds/fetchers';

  $info['FeedsRestFetcher'] = array(
    'name' => 'RESTful HTTP Fetcher',
    'description' => 'Download content from a RESTful web service.',
    'handler' => array(
      'parent' => 'FeedsFetcher',
      'class' => 'FeedsRestFetcher',
      'file' => 'FeedsRestFetcher.inc',
      'path' => $path,
    ),
  );

  return $info;
}

//
// Modal helper functions
//

/**
 * Declare styles for Mica modal dialogs.
 * @param $styles array of styles: name (required) and width, height (required for a dialog with a fixed size)
 */
function mica_modal_prepare($styles) {
  // Include the CTools tools that we need.
  ctools_include('ajax');
  ctools_include('modal');

  // Add CTools' javascript to the page.
  ctools_modal_add_js();

  $style_settings = array();

  // Create our own javascript that will be used to theme a modal.
  foreach ($styles as $style) {
    $settings = array();

    if (!empty($style['width']) && !empty($style['height'])) {
      $settings['modalSize'] = array(
        'type' => 'fixed',
        'width' => $style['width'],
        'height' => $style['height'],
        'addWidth' => 20,
        'addHeight' => 15,
      );
    }
    else {
      $settings['modalSize'] = array(
        'type' => 'scale',
        'addWidth' => 20,
        'addHeight' => 15,
      );
    }

    $settings['modalOptions'] = array(
        'opacity' => .5,
        'background-color' => '#000',
    );

    $settings['animation'] = 'fadeIn';
    $settings['modalTheme'] = 'MicaModal';

    $style_settings[$style['name']] = $settings;
  }
  drupal_add_js($style_settings, 'setting');

  // Since we have our js, css and images in well-known named directories,
  // CTools makes it easy for us to just use them without worrying about
  // using drupal_get_path() and all that ugliness.
  ctools_add_js('mica-modal', 'mica');
  ctools_add_css('mica-modal', 'mica');
}

/**
 * Renders the form identified by $form_id in a modal dialog, with provided title. Additional arguments are added to the $form_state.
 * @param $title
 * @param $form_id
 */
function mica_modal_form_render($title, $form_id) {
  ctools_include('ajax');
  ctools_include('modal');
  ctools_add_js('ajax-responder');

  $form_state = array(
      'ajax' => TRUE,
      'title' => $title,
  );
  $args = func_get_args();
  // Remove $title and $form_id from the arguments.
  array_shift($args);
  array_shift($args);
  $form_state['build_info']['args'] = $args;

  $commands = ctools_modal_form_wrapper($form_id, $form_state);

  // If cancelling or complete, return to the activity.
  if (!empty($form_state['complete'])) {
    $commands = array();
    $commands[] = ctools_modal_command_dismiss();
    if (!empty($form_state['redirect'])) {
      $commands[] = ctools_ajax_command_redirect($form_state['redirect']);
    }
  }
  elseif (!empty($form_state['cancel'])) {
    $commands = array();
    $commands[] = ctools_modal_command_dismiss();
  }

  print ajax_render($commands);
}

/**
 * Renders the node page in a modal window. Use mica_modal_prepare() to set up a link to the node page.
 * @param $js
 * @param $node
 */
function mica_node_modal_page_view($js = NULL, $node) {
  if ($js) {
    ctools_include('ajax');
    ctools_include('modal');
    ctools_modal_render($node->title, node_show($node));
  }
  else {
    return node_page_view($node);
  }
}

/**
* Creates a menu for the item being created if the content type as a default menu set.
* The menu entry is hidden; this is useful to populate the breadcrumbs without having to manually add a menu entry.
* @param $node
*/
function mica_create_menu($node, $hidden){
	// create menu based on content type menu config
	$menu = $node->menu;
	if (empty($menu)) {
		$menu = array();
	}
	if (empty($menu['enabled']) || !$menu['enabled']) {

		$menu_options = variable_get('menu_options_' . $node->type);

		if (!empty($menu_options)) {
			$menu['enabled'] = 0;
			$menu['hidden'] = $hidden;
			$menu['expanded'] = 0;
			$menu['menu_name'] = $menu_options[0];
			$menu['link_title'] = $node->title;
			$menu['link_path'] = 'node/' . $node->nid;

			$menu_parent = variable_get('menu_parent_' . $node->type);
			if (!empty($menu_parent)) {
				$split = explode(":", $menu_parent);
				if (!empty($split[1])) {
					$mlid = $split[1];
					// check that this parent menu exists
					$existing_menu = db_query("SELECT * FROM {menu_links} WHERE mlid = :mlid", array(':mlid' => $mlid))
					->fetchObject();
					if (!empty($existing_menu) && $existing_menu->mlid === $mlid) {
						$menu['plid'] = $mlid;
						menu_link_save($menu);
						menu_cache_clear($menu['menu_name']);
					}
				}
			}
		}
	}
	return $menu;
}


