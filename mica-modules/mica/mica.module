<?php

/**
 * Implements hook_help()
 */
function mica_help($path, $arg) {
	switch ($path) {
		case "admin/help#mica":
			return '<p>'.  t("TODO") .'</p>';
			break;
	}
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function mica_form_node_type_form_alter(&$form, $form_state) {
  if (isset($form['type'])) {
  	
  	$current_type = $form['#node_type']->type;
		$relation = _mica_find_relation_by_child($current_type);
  	  	
		$existing_types = array();
		foreach (node_type_get_types() as $type) {
			if($type->type != 'mica_relation' && $type->type != $current_type)
			$existing_types[$type->type] = $type->name;
		}  	
  	
    $form['mica_relation'] = array(
      '#type' => 'fieldset',
      '#title' => t('Relations'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#group' => 'additional_settings',
      '#attributes' => array(
        'class' => array('relation-node-type-settings-form'),
      ),
      '#attached' => array(
        'js' => array(drupal_get_path('module', 'mica') . '/mica-node-form.js'),
      ),    
    );
    $form['mica_relation']['parent_type'] = array(
      '#type' => 'select',
      '#title' => t('Parent'),
    	'#description' => t('Select parent content type'),
      '#default_value' => isset($relation) ? $relation->parent_type[$relation->language][0]['value'] : '',
      '#options' => array_merge(array('' => t('None')), $existing_types),    
    );  
    $form['mica_relation']['node_reference_name'] = array(
      '#type' => 'textfield',
      '#title' => t('Node reference'),
    	'#description' => t('Node reference name added to parent content type'),
    	'#default_value' => isset($relation) ? $relation->node_reference_name[$relation->language][0]['value'] : '',
    );

    // Submit will call regular node_type_form_submit and _mica_edit_node_type_relation
    $form['#submit'][] = '_mica_edit_node_type_relation';    
  }
}

function _mica_edit_node_type_relation($form, &$form_state) {
	$previous_type = $form['#node_type']->type;
	$new_type = trim($form_state['values']['type']);
	$parent_type = trim($form_state['values']['parent_type']);
	$node_reference_name = trim($form_state['values']['node_reference_name']);

	$relation = _mica_find_relation_by_child($previous_type);
	
	if(empty($parent_type)) {
		if(isset($relation)) node_delete($relation->nid);
	} else {
		// set default reference node name if empty
		if(empty($node_reference_name)) $node_reference_name = $new_type . '_ref';
		
		if(!isset($relation)) {
  		$relation = new stdClass();
  		$relation->type = 'mica_relation';
  		$relation->language = LANGUAGE_NONE;
  		node_object_prepare($relation);			
		}
  	$relation->title = $parent_type . '-' . $new_type . ' relation';
		$relation->parent_type[$relation->language][0]['value'] = $parent_type;
		$relation->child_type[$relation->language][0]['value'] = $new_type;
		$relation->node_reference_name[$relation->language][0]['value'] = $node_reference_name;
		node_save($relation);
	}
	
}

function _mica_find_relation_by_child($child_type) {
	$query = new EntityFieldQuery();
	$result = $query->entityCondition('entity_type', 'node')
	->entityCondition('bundle', 'mica_relation')
	->fieldCondition('child_type', 'value', $child_type, '=')
	->execute();		
	if (!empty($result['node'])) {
		$keys = array_keys($result['node']);
		$relation = entity_load('node', $keys);
		return $relation[$keys[0]];						
	}
	return NULL;
}

/**
 * Implements hook_block_info()
 */
/*
function mica_block_info() {
	$blocks['mica_relation'] = array(
    'info' => t('Relations'),
		'status' => TRUE,
  );
  return $blocks;
}
*/
/**
 * Implements hook_block_configure()
 */
/*
function mica_block_configure($delta) {
	$form = array();
	switch ($delta) {
		case 'mica_relation':
			$form['parent_type'] = array(
				'#type' => 'textfield', //TODO replace by a select with available content types
				'#title' => $t('Parent'),
				'#description' => $t('Enter Parent content type machine name'),
			);
			$form['node_reference_name'] = array(
				'#type' => 'textfield',
				'#title' => $t('Node reference name'),
				'#description' => $t('Enter the name of the node reference added to the parent'),
				//'#default_value' => '', //TODO generate default value using $current_content_type.'_ref'
			);
			break;
	}
}
*/

/**
 * Implements hook_block_save()
 */
/*
function mica_block_save($delta = '', $edit = array()) {
	switch ($delta) {
		case 'mica_relation':
			break;
	}	
}
*/

/**
 * Implements hook_entity_insert()
 */
/*
function mica_entity_insert($entity, $type) {

	// look for mica_relation with parent type equals saved entity type
	$query = new EntityFieldQuery();
	$result = $query->entityCondition('entity_type', 'node')
	->entityCondition('bundle', 'mica_relation')
	->fieldCondition('parent_type', 'value', $entity->type, '=')
	->execute();

	if (!empty($result['node'])) {
		$keys = array_keys($result['node']);
		$relationId = $keys[0];
		$relation = entity_load('node', $keys);
		$relation = $relation[$relationId];
		$parent = $relation->parent_type[key($relation->parent_type)][0]['value'];
		if($parent == $entity->type) {
			foreach ($relation->child_type[key($relation->child_type)] as $child) {
				// create new child
				$node = new stdClass();
				$node->type = $child['value'];
				node_object_prepare($node);
				$node->title = $entity->title;
				$node->language = $entity->language;
				$node->uid = $entity->uid; // same author
				node_save($node);

				// link this new child node to the parent entity
				$loadedNode = node_load($entity->nid);
				$prop = 'field_'. $child['value'] .'_ref';
				$loadedNode->$prop=array('en' => array(0 => array('nid' => $node->nid,) ,) ,);
				node_save($loadedNode);
			}
		}
	}
}
	*/