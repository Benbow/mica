<?php
/**
 * @file
 * Code for the Mica Datasets feature.
 */

include_once('mica_datasets.features.inc');

/**
 * Implements hook_install().
 */
function mica_datasets_install() {
  _mica_datasets_import_field_groups();
}

/**
 * Implements hook_entity_info().
 */
function mica_datasets_entity_info() {
  $info['mica_dataset_connector'] = array(
    'label' => t('Dataset connector'),
    'controller class' => 'EntityAPIController',
    'metadata controller class' => FALSE,
    'entity class' => 'MicaDatasetConnector',
    'base table' => 'mica_dataset_connector',
    'uri callback' => 'mica_dataset_connector_url',
    'module' => 'mica_dataset',
    'exportable' => FALSE,
    'entity keys' => array(
      'id' => 'id',
      'label' => 'name',
      'name' => 'machine_name',
  ),
  );

  return $info;
}


/**
 * Implements hook_entity_property_info().
 */
/*function mica_datasets_entity_property_info() {
  $info['mica_dataset_connector']['properties'] = array(
    'id' => array(
      'label' => t('ID'),
      'type' => 'integer',
      'description' => t('The primary identifier for a connector.'),
  ),
    'name' => array(
      'label' => t('Name'),
      'type' => 'text',
      'description' => t('The displayed name for a connector.'),
      'required' => TRUE,
  ),
    'machine_name' => array(
      'label' => t('Machine name'),
      'type' => 'token',
      'description' => t('The internally used machine name for a connector.'),
      'required' => TRUE,
  ),
    'description' => array(
      'label' => t('Description'),
      'type' => 'text',
      'description' => t('The displayed description for a connector.'),
      'sanitize' => 'filter_xss',
  ),
    'study_id' => array(
      'label' => t('Study ID'),
      'type' => 'integer',
      'description' => t('The primary identifier for the Study node.'),
  ),
    'dataset_id' => array(
      'label' => t('Dataset ID'),
      'type' => 'integer',
      'description' => t('The primary identifier for the Dataset node.'),
  ),
    'class' => array(
      'label' => t('Connection class'),
      'type' => 'text',
      'description' => t('The ID of the connection class to use for this server.'),
      'required' => TRUE,
  ),
    'enabled' => array(
      'label' => t('Enabled'),
      'type' => 'boolean',
      'description' => t('A flag indicating whether the connector is enabled.'),
  ),
  );
  return $info;
}*/

/**
 * Load the dataset connector with the specified id.
 *
 * @param $id
 *   The dataset connector's id.
 * @param $reset
 *   Whether to reset the internal cache.
 *
 * @return MicaDatasetConnector
 *   An object representing the connector with the specified id.
 */
function mica_dataset_connector_load($id, $reset = FALSE) {
  $ret = mica_dataset_connector_load_multiple(array($id), array(), $reset);
  return $ret ? reset($ret) : FALSE;
}

/**
 * Load multiple connectors at once, determined by IDs or machine names, or by
 * other conditions.
 *
 * @see entity_load()
 *
 * @param $ids
 *   An array of connector IDs or machine names.
 * @param $conditions
 *   An array of conditions on the {mica_dataset_connector} table in the form
 *   'field' => $value.
 * @param $reset
 *   Whether to reset the internal entity_load cache.
 *
 * @return array
 *   An array of connector objects keyed by machine name.
 */
function mica_dataset_connector_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('mica_dataset_connector', $ids, $conditions, $reset);
}

/**
 * Entity uri callback.
 */
function mica_dataset_connector_url(MicaDatasetConnector $connector) {
  return array(
    'path' => 'admin/config/system/mica/connector/' . $connector->machine_name,
    'options' => array(),
  );
}

/**
 * Inserts a new dataset connector into the database.
 *
 * @param array $values
 *   An array containing the values to be inserted.
 *
 * @return
 *   The newly inserted server's id, or FALSE on error.
 */
function mica_dataset_connector_insert(array $values) {
  $connector = new MicaDatasetConnector($values);
  $connector->is_new = TRUE;
  $connector->save();
  return $connector->id;
}

/**
 * Register some field groups at module install.
 */
function _mica_datasets_import_field_groups() {
  module_load_include('inc', 'mica', 'includes/fieldgroups');

  // STUDY
  _mica_add_fieldset_group('study','group_datasets', 'Datasets', '4', '', array(
    'mica_dataset',
    'mica_opal',
  ));
}

/**
 * Returns either a list of all available connection infos, or a specific one.
 *
 * @see hook_mica_datasets_connection_info()
 *
 * @param $id
 *   The ID of the connection info to retrieve.
 *
 * @return array
 *   If $id was not specified, an array of all available service classes.
 *   Otherwise, either the service info with the specified id (if it exists),
 *   or NULL.
 */
function mica_datasets_get_connection_info($id = NULL) {
  $connections = &drupal_static(__FUNCTION__);

  if (!isset($connections)) {
    $connections = module_invoke_all('mica_datasets_connection_info');

    // Allow other modules to alter definitions
    drupal_alter('mica_datasets_connection_info', $connections);
  }

  if (isset($id)) {
    return isset($connections[$id]) ? $connections[$id] : NULL;
  }
  return $connections;
}
