<?php
/**
 * @file
 * Code for the Mica Datasets feature.
 */

include_once('mica_datasets.features.inc');

/**
 * Implements hook_menu().
 */
function mica_datasets_menu() {
  $items['node/%node/edit-datasets'] = array(
      'title' => 'Edit Datasets',
      'access callback' => '_mica_datasets_node_access',
      'access arguments' => array(1,'study','update'),
      'page callback' => 'mica_datasets_study_datasets_edit_page',
      'page arguments' => array(1),
      'weight' => 5,
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
      'file' => 'mica_datasets.pages.inc',
  );
  $items['node/%node/edit-studies'] = array(
      'title' => 'Edit Studies',
      'access callback' => '_mica_datasets_node_access',
      'access arguments' => array(1,'dataset','update'),
      'page callback' => 'mica_datasets_dataset_studies_edit_page',
      'page arguments' => array(1),
      'weight' => 5,
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
      'file' => 'mica_datasets.pages.inc',
  );
  $items['node/%node/edit-variables'] = array(
      'title' => 'Edit Variables',
      'access callback' => '_mica_datasets_node_access',
      'access arguments' => array(1,'dataset','update'),
      'page callback' => 'mica_datasets_dataset_variables_edit_page',
      'page arguments' => array(1),
      'weight' => 6,
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
      'file' => 'mica_datasets.pages.inc',
  );
  $items['node/%node/dataset-query'] = array(
      'title' => 'Query',
      'access callback' => '_mica_datasets_node_access',
      'access arguments' => array(1,'dataset','view'),
      'page callback' => 'mica_datasets_dataset_query_page',
      'page arguments' => array(1),
      'weight' => 7,
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
      'file' => 'mica_datasets.pages.inc',
  );
  // dataset connector entity edit
  $items['mica/dataset/connector/%/%node/%node/edit'] = array(
      'title' => 'Dataset Connection',
      'access callback' => '_mica_datasets_node_access',
      'access arguments' => array(4,'dataset','update'),
      'page callback' => 'mica_datasets_dataset_connection_page',
      'page arguments' => array(3,4,5),
      'weight' => 0,
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
      'file' => 'mica_datasets.pages.inc',
  );
  $items['mica/ajax/dataset/%node/%node/edit'] = array(
      'title' => 'Dataset Connection Edit',
      'delivery callback' => 'ajax_deliver',
      'theme callback' => 'ajax_base_page_theme',
      'access callback' => '_mica_datasets_node_access',
      'access arguments' => array(4,'study','update'),
      'page callback' => 'mica_dataset_edit_ajax_form_callback',
      'page arguments' => array(3,4),
      'type' => MENU_CALLBACK,
      'file' => 'mica_datasets.pages.inc',
  );

  $items['admin/config/system/mica'] = array(
      'title' => 'Mica', 
      'description' => 'Manage Mica Unit.',  
      'access callback' => 'user_access',
      'access arguments' => array(0),
      'page callback' => 'unit_certificate_page',
      'page arguments' => array(0),
      'file' => 'mica_datasets.pages.unit.inc', 
      'type' => MENU_NORMAL_ITEM,  
  );
  $items['admin/config/system/mica/configure'] = array(
      'title' => 'Configure key pair',
      'access callback' => 'user_access', 
      'access arguments' => array(0),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('unit_form'),
      'file' => 'mica_datasets.pages.unit.inc',   
      'type' => MENU_LOCAL_ACTION,
  );
  return $items;
}

function _mica_datasets_node_access($node, $bundle = NULL, $op = 'update') {
  global $user;
  if (is_int($node)) {
    $node = node_load($node);
  }
  // Make sure the user can view the original node content.
  if ($bundle != NULL) {
    return $node->type == $bundle && node_access($op, $node);
  }
  else {
    return node_access($op, $node);
  }
}

/**
 * Implements hook_form().
 */
function mica_datasets_form($node, &$form_state) {
  return node_content_form($node, $form_state);
}

/**
 * Implements hook_insert()
 */
function mica_datasets_insert($node) {
  _mica_datasets_ensure_viewreference_arguments($node);
}

function _mica_datasets_ensure_viewreference_arguments(&$node) {
  if ($node->type === 'dataset') {
    foreach (array('field_dataset_studies', 'field_dataset_variables') as $field_name) {
      $field = $node->$field_name;
      if ($field[$node->language][0]['arguments'] != $node->nid) {
        $field[$node->language][0]['arguments'] = $node->nid;
        $node->$field_name = $field;
      }
    }
  }
}

/**
 * Implements hook_node_validate()
 */
function mica_datasets_node_validate($node, $form, &$form_state) {
  // check dataset node title is unique
  if (!isset($node->nid) && $node->type === 'dataset') {
    module_load_include('inc', 'mica', 'includes/relations');
    if (mica_node_title_exists($node->type, $node->title)) {
      form_set_error('title',t('Dataset name \'!title\' is already given.', array('!title' => $node->title)));
    }
  }
}

/**
 * Implements hook_field_attach_form()
 */
function mica_datasets_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {
  if ($entity->type == 'dataset') {
    $form['field_dataset_studies']['#attributes']['style'] = array('display:none;');
    $form['field_dataset_variables']['#attributes']['style'] = array('display:none;');
  }
}

/**
 * Implements hook_entity_info().
 */
function mica_datasets_entity_info() {
  $info['mica_dataset_connector'] = array(
    'label' => t('Dataset connector'),
    'controller class' => 'EntityAPIController',
    'metadata controller class' => FALSE,
    'entity class' => 'MicaDatasetConnector',
    'base table' => 'mica_dataset_connector',
    'uri callback' => 'mica_dataset_connector_url',
    'module' => 'mica_dataset',
    'exportable' => FALSE,
    'entity keys' => array(
      'id' => 'id',
      'label' => 'name',
      'name' => 'machine_name',
  ),
  );

  return $info;
}

/**
 * Implements hook_entity_property_info().
 */
function mica_datasets_entity_property_info() {
  $info['mica_dataset_connector']['properties'] = array(
    'id' => array(
      'label' => t('ID'),
      'type' => 'integer',
      'description' => t('The primary identifier for a connector.'),
  ),
    'name' => array(
      'label' => t('Name'),
      'type' => 'text',
      'description' => t('The displayed name for a connector.'),
      'required' => TRUE,
  ),
    'machine_name' => array(
      'label' => t('Machine name'),
      'type' => 'token',
      'description' => t('The internally used machine name for a connector.'),
      'required' => TRUE,
  ),
    'description' => array(
      'label' => t('Description'),
      'type' => 'text',
      'description' => t('The displayed description for a connector.'),
      'sanitize' => 'filter_xss',
  ),
    'dataset_id' => array(
      'label' => t('Dataset ID'),
      'type' => 'integer',
      'description' => t('The primary identifier for the Dataset node.'),
  ),
    'study_id' => array(
      'label' => t('Study ID'),
      'type' => 'integer',
      'description' => t('The primary identifier for the Study node.'),
  ),
    'class' => array(
      'label' => t('Connection class'),
      'type' => 'text',
      'description' => t('The ID of the connection class to use for this server.'),
      'required' => TRUE,
  ),
    'enabled' => array(
      'label' => t('Enabled'),
      'type' => 'boolean',
      'description' => t('A flag indicating whether the connector is enabled.'),
  ),
  );
  return $info;
}

/**
 * Load the dataset connector corresponding to the specified dataset and study ids.
 *
 * @param $dataset_id
 * @param $study_id
 * @param $enabled
 *
 * @return MicaDatasetConnector
 *   A connector or FALSE if not found.
 */
function mica_dataset_connector_query($dataset_id, $study_id, $enabled = NULL) {
  $q = db_select('mica_dataset_connector', 'c');
  $q->addField('c', 'id');
  $q->condition('c.dataset_id', $dataset_id, '=');
  $q->condition('c.study_id', $study_id, '=');
  if (isset($enabled)) {
    $q->condition('c.enabled', $enabled, '=');
  }
  $q->range(0,1);
  $result = $q->execute();

  $rval = $result->fetchField();

  return $rval ? mica_dataset_connector_load($rval) : FALSE;
}

/**
 * Load the dataset connectors corresponding to the specified dataset id.
 *
 * @param $dataset_id
 * @param $enabled
 *
 * @return MicaDatasetConnector
 *   An array of connectors (may be empty).
 */
function mica_dataset_connector_query_multiple($dataset_id, $enabled = NULL) {
  $q = db_select('mica_dataset_connector', 'c');
  $q->addField('c', 'id');
  $q->condition('c.dataset_id', $dataset_id, '=');
  if (isset($enabled)) {
    $q->condition('c.enabled', $enabled, '=');
  }
  $q->range(0,1);
  $result = $q->execute();

  $connectors = array();

  while($record = $result->fetchAssoc()) {
    $connectors[] = mica_dataset_connector_load($record['id']);
  }

  return $connectors;
}

/**
 * Load the dataset connector with the specified id.
 *
 * @param $id
 *   The dataset connector's id.
 * @param $reset
 *   Whether to reset the internal cache.
 *
 * @return MicaDatasetConnector
 *   An object representing the connector with the specified id.
 */
function mica_dataset_connector_load($id, $reset = FALSE) {
  $ret = mica_dataset_connector_load_multiple(array($id), array(), $reset);
  return $ret ? reset($ret) : FALSE;
}

/**
 * Load multiple connectors at once, determined by IDs or machine names, or by
 * other conditions.
 *
 * @see entity_load()
 *
 * @param $ids
 *   An array of connector IDs or machine names.
 * @param $conditions
 *   An array of conditions on the {mica_dataset_connector} table in the form
 *   'field' => $value.
 * @param $reset
 *   Whether to reset the internal entity_load cache.
 *
 * @return array
 *   An array of connector objects keyed by machine name.
 */
function mica_dataset_connector_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('mica_dataset_connector', $ids, $conditions, $reset);
}

/**
 * Entity uri callback.
 */
function mica_dataset_connector_url(MicaDatasetConnector $connector) {
  return array(
    'path' => 'admin/config/system/mica/connector/' . $connector->machine_name,
    'options' => array(),
  );
}

/**
 * Inserts a new dataset connector into the database.
 *
 * @param array $values
 *   An array containing the values to be inserted.
 *
 * @return
 *   The newly inserted server's id, or FALSE on error.
 */
function mica_dataset_connector_insert(array $values) {
  $connector = new MicaDatasetConnector($values);
  $connector->is_new = TRUE;
  $connector->save();
  return $connector->id;
}

/**
 * Returns either a list of all available connection infos, or a specific one.
 *
 * @see hook_mica_datasets_connection_info()
 *
 * @param $id
 *   The ID of the connection info to retrieve.
 *
 * @return array
 *   If $id was not specified, an array of all available service classes.
 *   Otherwise, either the service info with the specified id (if it exists),
 *   or NULL.
 */
function mica_datasets_get_connection_info($id = NULL) {
  $connections = &drupal_static(__FUNCTION__);

  if (!isset($connections)) {
    $connections = module_invoke_all('mica_datasets_connection_info');
  }

  if (isset($id)) {
    return isset($connections[$id]) ? $connections[$id] : NULL;
  }
  return $connections;
}

/**
 * implements hook_feeds_after_parse
 */
function mica_datasets_feeds_after_parse(FeedsSource $source, FeedsParserResult $result) {
  if(get_class($source->importer->processor) == 'FeedsNodeProcessor') {
    $config = $source->importer->processor->getConfig();
    if($config['content_type'] == 'participant_variable') {
      // TODO extract dataset_id and add to FeedsParserResult
    }
  }

}

/**
 * Implements hook_feeds_processor_targets_alter
 */
/*
 function mica_datasets_feeds_processor_targets_alter(&$targets, $entity_type, $bundle_name) {
 debug($targets);
 debug($entity_type);
 debug($bundle_name);
 if($bundle_name == 'participant_variable') {
 $targets['field_dataset:nid'] = array(
 'name' => t('Dataset Node ID'),
 'description' => t('The Node ID of the associated Dataset'),
 'callback' => 'mica_datasets_set_dataset_id',
 );
 }
 }
 */
function mica_datasets_set_dataset_id($source, $entity, $target, $value) {

}