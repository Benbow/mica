<?php
/**
 * @file
 * Code for the Mica Datasets feature.
 */

include_once('mica_datasets.features.inc');

function mica_datasets_form($node, &$form_state) {
  $type = node_type_get_type($node);

  $form['field1'] = array(
    '#type' => 'textfield',
    '#title' => t('Custom field'),
    '#default_value' => $node->field1,
    '#maxlength' => 127,
  );
  $form['selectbox'] = array(
    '#type' => 'select',
    '#title' => t('Select box'),
    '#default_value' => $node->selectbox,
    '#options' => array(
      1 => 'Option A',
      2 => 'Option B',
      3 => 'Option C',
    ),
    '#description' => t('Choose an option.'),
  );

  return $form;
}

/**
 * Implements hook_menu().
 */
function mica_datasets_menu() {
  $items['node/%node/datasets'] = array(
      'title' => 'Edit Datasets',
      'access callback' => 'mica_datasets_edit_access',
      'access arguments' => array(1),
      'page callback' => 'mica_datasets_edit_page',
      'page arguments' => array(1),
      'weight' => 5,
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
      'file' => 'mica_datasets.pages.inc',
  );
  $items['mica/ajax/dataset/%node/%node/edit'] = array(
      'title' => 'Dataset Connection Edit',
      'delivery callback' => 'ajax_deliver',
      'theme callback' => 'ajax_base_page_theme',
      'access callback' => 'mica_datasets_edit_access',
      'access arguments' => array(4),
      'page callback' => 'mica_dataset_edit_ajax_form_callback',
      'page arguments' => array(3,4),
      'type' => MENU_CALLBACK,
      'file' => 'mica_datasets.pages.inc',
  );
  $items['mica/ajax/dataset/%node/%node/delete'] = array(
      'title' => 'Dataset Connector Delete',
      'delivery callback' => 'ajax_deliver',
      'theme callback' => 'ajax_base_page_theme',
      'access callback' => 'mica_datasets_edit_access',
      'access arguments' => array(4),
      'page callback' => 'mica_dataset_delete_ajax_form_callback',
      'page arguments' => array(3,4),
      'type' => MENU_CALLBACK,
      'file' => 'mica_datasets.pages.inc',
  );
   $items['admin/config/system/mica'] = array(
      'title' => 'Mica', 
      'description' => 'Manage Mica Unit.',  
      'access callback' => 'user_access',
      'access arguments' => array(0), //TODO why 0
      'page callback' => '_unit_certificate_page',
      'page arguments' => array(0), //TODO why 0
      'file' => 'mica_datasets.unit.inc', 
      'type' => MENU_NORMAL_ITEM,  
  );
  $items['admin/config/system/mica/configure'] = array(
      'title' => 'Configure key pair',
      'access callback' => 'user_access', 
      'access arguments' => array(0), //TODO why 0
      'page callback' => 'drupal_get_form',
      'page arguments' => array('_unit_form'),
      'file' => 'mica_datasets.unit.inc',   
      'type' => MENU_LOCAL_ACTION,
  );
  return $items;
}

function mica_datasets_edit_access($node) {
  global $user;
  if (is_int($node)) {
    $node = node_load($node);
  }
  // Make sure the user can view the original node content.
  $access = $node->type == 'study' && property_exists($node, 'mica_dataset') && node_access('update', $node);
  return $access;
}

/**
 * Implements hook_node_insert()
 */
function mica_datasets_node_insert($node) {
  _mica_datasets_ensure_viewreference_arguments($node);
}

function _mica_datasets_ensure_viewreference_arguments($node) {
  if ($node->type === 'dataset') {
    $node = node_load($node->nid);    // reload node so it's not in 'new' state
    $to_save = FALSE;
    
    foreach (array('field_dataset_studies', 'field_dataset_variables') as $field_name) {
      $field = $node->$field_name;
      if ($field[$node->language][0]['arguments'] != $node->nid) {
        $field[$node->language][0]['arguments'] = $node->nid;
        $node->$field_name = $field;
        $to_save = TRUE;
      }
    }

    if ($to_save) {
      node_save($node);
    }
  }
}

/**
 * Implements hook_entity_info().
 */
function mica_datasets_entity_info() {
  $info['mica_dataset_connector'] = array(
    'label' => t('Dataset connector'),
    'controller class' => 'EntityAPIController',
    'metadata controller class' => FALSE,
    'entity class' => 'MicaDatasetConnector',
    'base table' => 'mica_dataset_connector',
    'uri callback' => 'mica_dataset_connector_url',
    'module' => 'mica_dataset',
    'exportable' => FALSE,
    'entity keys' => array(
      'id' => 'id',
      'label' => 'name',
      'name' => 'machine_name',
  ),
  );

  return $info;
}

/**
 * Implements hook_entity_property_info().
 */
function mica_datasets_entity_property_info() {
  $info['mica_dataset_connector']['properties'] = array(
    'id' => array(
      'label' => t('ID'),
      'type' => 'integer',
      'description' => t('The primary identifier for a connector.'),
  ),
    'name' => array(
      'label' => t('Name'),
      'type' => 'text',
      'description' => t('The displayed name for a connector.'),
      'required' => TRUE,
  ),
    'machine_name' => array(
      'label' => t('Machine name'),
      'type' => 'token',
      'description' => t('The internally used machine name for a connector.'),
      'required' => TRUE,
  ),
    'description' => array(
      'label' => t('Description'),
      'type' => 'text',
      'description' => t('The displayed description for a connector.'),
      'sanitize' => 'filter_xss',
  ),
    'dataset_id' => array(
      'label' => t('Dataset ID'),
      'type' => 'integer',
      'description' => t('The primary identifier for the Dataset node.'),
  ),
    'study_id' => array(
      'label' => t('Study ID'),
      'type' => 'integer',
      'description' => t('The primary identifier for the Study node.'),
  ),
    'class' => array(
      'label' => t('Connection class'),
      'type' => 'text',
      'description' => t('The ID of the connection class to use for this server.'),
      'required' => TRUE,
  ),
    'enabled' => array(
      'label' => t('Enabled'),
      'type' => 'boolean',
      'description' => t('A flag indicating whether the connector is enabled.'),
  ),
  );
  return $info;
}

/**
 * Load the dataset connector with the specified id.
 *
 * @param $id
 *   The dataset connector's id.
 * @param $reset
 *   Whether to reset the internal cache.
 *
 * @return MicaDatasetConnector
 *   An object representing the connector with the specified id.
 */
function mica_dataset_connector_load($id, $reset = FALSE) {
  $ret = mica_dataset_connector_load_multiple(array($id), array(), $reset);
  return $ret ? reset($ret) : FALSE;
}

/**
 * Load multiple connectors at once, determined by IDs or machine names, or by
 * other conditions.
 *
 * @see entity_load()
 *
 * @param $ids
 *   An array of connector IDs or machine names.
 * @param $conditions
 *   An array of conditions on the {mica_dataset_connector} table in the form
 *   'field' => $value.
 * @param $reset
 *   Whether to reset the internal entity_load cache.
 *
 * @return array
 *   An array of connector objects keyed by machine name.
 */
function mica_dataset_connector_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('mica_dataset_connector', $ids, $conditions, $reset);
}

/**
 * Entity uri callback.
 */
function mica_dataset_connector_url(MicaDatasetConnector $connector) {
  return array(
    'path' => 'admin/config/system/mica/connector/' . $connector->machine_name,
    'options' => array(),
  );
}

/**
 * Inserts a new dataset connector into the database.
 *
 * @param array $values
 *   An array containing the values to be inserted.
 *
 * @return
 *   The newly inserted server's id, or FALSE on error.
 */
function mica_dataset_connector_insert(array $values) {
  $connector = new MicaDatasetConnector($values);
  $connector->is_new = TRUE;
  $connector->save();
  return $connector->id;
}

/**
 * Returns either a list of all available connection infos, or a specific one.
 *
 * @see hook_mica_datasets_connection_info()
 *
 * @param $id
 *   The ID of the connection info to retrieve.
 *
 * @return array
 *   If $id was not specified, an array of all available service classes.
 *   Otherwise, either the service info with the specified id (if it exists),
 *   or NULL.
 */
function mica_datasets_get_connection_info($id = NULL) {
  $connections = &drupal_static(__FUNCTION__);

  if (!isset($connections)) {
    $connections = module_invoke_all('mica_datasets_connection_info');

    // Allow other modules to alter definitions
    drupal_alter('mica_datasets_connection_info', $connections);
  }

  if (isset($id)) {
    return isset($connections[$id]) ? $connections[$id] : NULL;
  }
  return $connections;
}
