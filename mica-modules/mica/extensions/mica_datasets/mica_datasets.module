<?php
/**
 * @file
 * Code for the Mica Datasets feature.
 */

include_once('mica_datasets.features.inc');

define('PRIVATE_KEY_FILE','private://mica-privatekey.pem');

define('PUBLIC_KEY_FILE','private://mica-publickey.pem');

/**
 * Implements hook_theme().
 */
function mica_datasets_theme() {
  return array (
    'mica_datasets_dataset_query_edit_form' => array (
      'render element' => 'form'
      ),
      );
}

/**
 * Implements hook_menu().
 */
function mica_datasets_menu() {
  $items['node/%node/datasets'] = array(
      'title' => 'Edit Datasets',
      'access callback' => '_mica_datasets_node_access',
      'access arguments' => array(1,'study','update'),
      'page callback' => 'mica_datasets_study_datasets_edit_page',
      'page arguments' => array(1),
      'weight' => 5,
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
      'file' => 'mica_datasets.pages.inc',
  );
  $items['node/%node/studies'] = array(
      'title' => 'Edit Studies',
      'access callback' => '_mica_datasets_node_access',
      'access arguments' => array(1,'dataset','update'),
      'page callback' => 'mica_datasets_dataset_studies_edit_page',
      'page arguments' => array(1),
      'type' => MENU_LOCAL_ACTION,
      'file' => 'mica_datasets.pages.inc',
  );

  $items['node/%node/variables'] = array(
      'title' => 'Edit Variables',
      'access callback' => '_mica_datasets_node_access',
      'access arguments' => array(1,'dataset','update'),
      'page callback' => 'mica_datasets_dataset_variables_edit_page',
      'page arguments' => array(1),
      'type' => MENU_LOCAL_ACTION,
      'file' => 'mica_datasets.pages.inc',
  );

  // queries
  $items['node/%node/queries'] = array(
      'title' => 'Queries',
      'access callback' => '_mica_datasets_node_queries_access',
      'access arguments' => array(1,'view'),
      'page callback' => 'mica_datasets_dataset_queries_page',
      'page arguments' => array(1),
      'weight' => 7,
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
      'file' => 'mica_datasets.pages.query.inc',
  );

  $items['node/%node/queries/add'] = array(
      'title' => 'Add Query',
      'access callback' => '_mica_datasets_node_access',
      'access arguments' => array(1,'dataset','view'),
      'page callback' => 'mica_datasets_dataset_query_edit_page',
      'page arguments' => array(1,NULL),
      'weight' => 7,
      'type' => MENU_LOCAL_ACTION,
      'file' => 'mica_datasets.pages.query.inc',
  );

  $items['mica/dataset/%node'] = array(
    'title callback' => 'node_page_title',
    'title arguments' => array(2),
    'page callback' => 'mica_datasets_dataset_page',
    'page arguments' => array(2),
    'access callback' => 'node_access',
    'access arguments' => array('view', 2),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'mica_datasets.pages.inc',
  );
  $items['mica/dataset/%node/query/%mica_dataset_query'] = array(
      'title callback' => '_mica_datasets_query_title',
      'title arguments' => array(2,4),
      'access callback' => '_mica_datasets_query_access',
      'access arguments' => array(4,'view'),
      'page callback' => 'mica_datasets_dataset_query_page',
      'page arguments' => array(2,4),
      'file' => 'mica_datasets.pages.query.inc',
  );
  $items['mica/dataset/%node/query/%/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['mica/dataset/%node/query/%mica_dataset_query/edit'] = array(
      'title' => 'Edit',
      'access callback' => '_mica_datasets_query_access',
      'access arguments' => array(2,4,'update'),
      'page callback' => 'mica_datasets_dataset_query_edit_page',
      'page arguments' => array(2,4),
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
      'file' => 'mica_datasets.pages.query.inc',
  );
  $items['mica/dataset/%node/query/%mica_dataset_query/run'] = array(
      'title' => 'Run',
      'access callback' => '_mica_datasets_query_access',
      'access arguments' => array(2,4,'view'),
      'page callback' => 'mica_datasets_dataset_query_run_page',
      'page arguments' => array(2,4),
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
      'file' => 'mica_datasets.pages.query.inc',
  );
  $items['mica/dataset/%node/query/%mica_dataset_query/delete'] = array(
      'title' => 'Delete',
      'access callback' => '_mica_datasets_query_access',
      'access arguments' => array(2,4,'update'),
      'page callback' => 'mica_datasets_dataset_query_delete_page',
      'page arguments' => array(2,4),
      'weight' => 8,
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
      'file' => 'mica_datasets.pages.query.inc',
  );

  // query term
  $items['mica/dataset/%node/query/%mica_dataset_query/term/%mica_dataset_query_term'] = array(
      'title callback' => '_mica_datasets_query_term_title',
      'title arguments' => array(2,4,6),
      'access callback' => TRUE,
      'access callback' => '_mica_datasets_query_access',
      'access arguments' => array(2,4,'update'),
      'page callback' => 'mica_datasets_dataset_query_term_page',
      'page arguments' => array(2,4,6),
      'file' => 'mica_datasets.pages.query.inc',
  );
  $items['mica/dataset/%node/query/%mica_dataset_query/term/%mica_dataset_query_term/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['mica/dataset/%node/query/%mica_dataset_query/term/%mica_dataset_query_term/edit'] = array(
      'title' => 'Edit',
      'access callback' => '_mica_datasets_query_term_access',
      'access arguments' => array(2,4,6,'update'),
      'page callback' => 'mica_datasets_dataset_query_term_edit_page',
      'page arguments' => array(2,4,6),
      'weight' => 1,
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
      'file' => 'mica_datasets.pages.query.inc',
  );
  $items['mica/dataset/%node/query/%mica_dataset_query/term/%mica_dataset_query_term/delete'] = array(
      'title' => 'Delete',
      'access callback' => '_mica_datasets_query_term_access',
      'access arguments' => array(2,4,6,'update'),
      'page callback' => 'mica_datasets_dataset_query_term_delete_page',
      'page arguments' => array(2,4,6),
      'weight' => 2,
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
      'file' => 'mica_datasets.pages.query.inc',
  );

  $items['variables/autocomplete/%'] = array(
      'access callback' => TRUE,
      'page callback' => 'variables_autocomplete',
      'page arguments' => array(2),
      'type' => MENU_CALLBACK,
      'file' => 'mica_datasets.pages.query.inc',
  );

  // dataset connector entity edit
  $items['mica/dataset/connector/%/%node/%node/edit'] = array(
      'title' => 'Dataset Connection',
      'access callback' => '_mica_datasets_node_access',
      'access arguments' => array(4,'dataset','update'),
      'page callback' => 'mica_datasets_dataset_connection_page',
      'page arguments' => array(3,4,5),
      'weight' => 0,
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
      'file' => 'mica_datasets.pages.inc',
  );
  $items['mica/ajax/dataset/%node/%node/edit'] = array(
      'title' => 'Dataset Connection Edit',
      'delivery callback' => 'ajax_deliver',
      'theme callback' => 'ajax_base_page_theme',
      'access callback' => '_mica_datasets_node_access',
      'access arguments' => array(4,'study','update'),
      'page callback' => 'mica_dataset_edit_ajax_form_callback',
      'page arguments' => array(3,4),
      'type' => MENU_CALLBACK,
      'file' => 'mica_datasets.pages.inc',
  );

  // Mica administration
  $items['admin/config/system/mica'] = array(
      'title' => 'Mica', 
      'description' => 'Manage Mica Unit.',  
      'access callback' => 'user_access',
      'access arguments' => array(0),
      'page callback' => 'unit_certificate_page',
      'page arguments' => array(0),
      'file' => 'mica_datasets.pages.unit.inc', 
      'type' => MENU_NORMAL_ITEM,  
  );
  $items['admin/config/system/mica/configure'] = array(
      'title' => 'Configure key pair',
      'access callback' => 'user_access', 
      'access arguments' => array(0),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('unit_form'),
      'file' => 'mica_datasets.pages.unit.inc',   
      'type' => MENU_LOCAL_ACTION,
  );

  return $items;
}

/**
 * Get the title for the query.
 * 
 * @param node $dataset_node
 * @param mica_dataset_query $query
 */
function _mica_datasets_query_title($dataset_node, $query) {
  return $query->name;
}

/**
 * Get the title for the query term.
 * 
 * @param node $dataset_node
 * @param mica_dataset_query $query
 * @param mica_dataset_query_term $term
 */
function _mica_datasets_query_term_title($dataset_node, $query, $term) {
  $variable_node = node_load($term->variable_id);
  return $variable_node->title;
}

/**
 * Check node type (if provided) and node access.
 *
 * @param node $node
 * @param string $bundle
 * @param string $op
 */
function _mica_datasets_node_access($node, $bundle = NULL, $op = 'update') {
  if (!is_object($node)) {
    $node = node_load($node);
  }
  // Make sure the user can view the original node content.
  if ($bundle != NULL) {
    return $node->type == $bundle && node_access($op, $node);
  }
  else {
    return node_access($op, $node);
  }
}

/**
 * Check whether queries tab is accessible: requires to have access to dataset node and having participant variables
 * defined for this dataset.
 *
 * @param node $dataset_node
 * @param string $op
 */
function _mica_datasets_node_queries_access($dataset_node, $op = 'update') {
  if (_mica_datasets_node_access($dataset_node, 'dataset', $op)) {
    if (mica_dataset_dataset_participant_variables($dataset_node->nid) !== FALSE) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Check for query accessibility: associated dataset is accessible and user is the query author,
 * or query is published for viewing.
 *
 * @param node $dataset_node
 * @param mica_dataset_query $query
 * @param string $op
 */
function _mica_datasets_query_access($dataset_node, $query, $op = 'update') {
  global $user;
  if (!is_object($query)) {
    $query = mica_dataset_query_load($query);
  }

  // consistency check
  if ($dataset_node->nid != $query->dataset_id) {
    return FALSE;
  }

  if (!_mica_datasets_node_access($dataset_node, 'dataset', $op)) {
    return FALSE;
  }

  if ($query->user_id == $user->uid) {
    return TRUE;
  }

  if ($op == 'view') {
    return $query->published;
  }

  return FALSE;
}

/**
 * Check for query term access: associated query must be accessible.
 *
 * @param node $dataset_node
 * @param mica_dataset_query $query
 * @param mica_dataset_query_term $query_term
 * @param string $op
 */
function _mica_datasets_query_term_access($dataset_node, $query, $query_term, $op  = 'update') {
  if (!is_object($query_term)) {
    $query_term = mica_dataset_query_term_load($query_term);
  }
  if (!is_object($query)) {
    $query = mica_dataset_query_load($query);
  }

  // consistency check
  if ($query->id != $query_term->query_id) {
    return FALSE;
  }

  return _mica_datasets_query_access($dataset_node, $query, $op);
}

/**
 * Implements hook_form().
 */
function mica_datasets_form($node, &$form_state) {
  return node_content_form($node, $form_state);
}

/**
 * Implements hook_insert()
 */
function mica_datasets_insert($node) {
  _mica_datasets_ensure_viewreference_arguments($node);
}

function _mica_datasets_ensure_viewreference_arguments(&$node) {
  if ($node->type === 'dataset') {
    foreach (array('field_dataset_studies', 'field_dataset_variables') as $field_name) {
      $field = $node->$field_name;
      if ($field[$node->language][0]['arguments'] != $node->nid) {
        $field[$node->language][0]['arguments'] = $node->nid;
        $node->$field_name = $field;
      }
    }
  }
}

/**
 * Implements hook_node_delete()
 */
function mica_datasets_node_delete($node) {
  if ($node->type === 'dataset') {
    // todo MICA-129
  }
}
/**
 * Implements hook_node_validate()
 */
function mica_datasets_node_validate($node, $form, &$form_state) {
  // check dataset node title is unique
  if (!isset($node->nid) && $node->type === 'dataset') {
    module_load_include('inc', 'mica', 'includes/relations');
    if (mica_node_title_exists($node->type, $node->title)) {
      form_set_error('title',t('Dataset name \'!title\' is already given.', array('!title' => $node->title)));
    }
  }
}

/**
 * Implements hook_field_attach_form()
 */
function mica_datasets_field_attach_form($entity_type, $entity, &$form, &$form_state, $langcode) {
  if ($entity_type == 'node' && $entity->type == 'dataset') {
    $form['field_dataset_studies']['#attributes']['style'] = array('display:none;');
    $form['field_dataset_variables']['#attributes']['style'] = array('display:none;');
  }
}

/**
 * Implements hook_entity_info().
 */
function mica_datasets_entity_info() {
  $info['mica_dataset_connector'] = array(
    'label' => t('Dataset connector'),
    'controller class' => 'EntityAPIController',
    'metadata controller class' => FALSE,
    'entity class' => 'MicaDatasetConnector',
    'base table' => 'mica_dataset_connector',
    'uri callback' => 'mica_dataset_connector_url',
    'module' => 'mica_dataset',
    'exportable' => FALSE,
    'entity keys' => array(
      'id' => 'id',
      'label' => 'name',
      'name' => 'machine_name',
  ),
  );

  $info['mica_dataset_query'] = array(
    'label' => t('Dataset query'),
    'controller class' => 'EntityAPIController',
    'metadata controller class' => FALSE,
    'entity class' => 'MicaDatasetQuery',
    'base table' => 'mica_dataset_query',
    'uri callback' => 'mica_dataset_query_url',
    'module' => 'mica_dataset',
    'exportable' => FALSE,
    'entity keys' => array(
      'id' => 'id',
      'label' => 'name',
  ),
  );

  $info['mica_dataset_query_term'] = array(
    'label' => t('Dataset query term'),
    'controller class' => 'EntityAPIController',
    'metadata controller class' => FALSE,
    'entity class' => 'MicaDatasetQueryTerm',
    'base table' => 'mica_dataset_query_term',
    'uri callback' => 'mica_dataset_query_term_url',
    'module' => 'mica_dataset',
    'exportable' => FALSE,
    'entity keys' => array(
      'id' => 'id',
      'label' => 'name',
  ),
  );

  return $info;
}

/**
 * Implements hook_entity_property_info().
 */
function mica_datasets_entity_property_info() {
  $info['mica_dataset_connector']['properties'] = array(
    'id' => array(
      'label' => t('ID'),
      'type' => 'integer',
      'description' => t('The primary identifier for a connector.'),
  ),
    'name' => array(
      'label' => t('Name'),
      'type' => 'text',
      'description' => t('The displayed name for a connector.'),
      'required' => TRUE,
  ),
    'machine_name' => array(
      'label' => t('Machine name'),
      'type' => 'token',
      'description' => t('The internally used machine name for a connector.'),
      'required' => TRUE,
  ),
    'description' => array(
      'label' => t('Description'),
      'type' => 'text',
      'description' => t('The displayed description for a connector.'),
      'sanitize' => 'filter_xss',
  ),
    'dataset_id' => array(
      'label' => t('Dataset ID'),
      'type' => 'integer',
      'description' => t('The primary identifier for the Dataset node.'),
  ),
    'study_id' => array(
      'label' => t('Study ID'),
      'type' => 'integer',
      'description' => t('The primary identifier for the Study node.'),
  ),
    'class' => array(
      'label' => t('Connection class'),
      'type' => 'text',
      'description' => t('The ID of the connection class to use for this server.'),
      'required' => TRUE,
  ),
    'enabled' => array(
      'label' => t('Enabled'),
      'type' => 'boolean',
      'description' => t('A flag indicating whether the connector is enabled.'),
  ),
  );

  $info['mica_dataset_query']['properties'] = array(
    'id' => array(
      'label' => t('ID'),
      'type' => 'integer',
      'description' => t('The primary identifier for a query.'),
  ),
    'name' => array(
      'label' => t('Name'),
      'type' => 'text',
      'description' => t('The displayed name for a query.'),
      'required' => TRUE,
  ),
    'machine_name' => array(
      'label' => t('Machine name'),
      'type' => 'token',
      'description' => t('The internally used machine name for a query.'),
      'required' => TRUE,
  ),
    'description' => array(
      'label' => t('Description'),
      'type' => 'text',
      'description' => t('The displayed description for a query.'),
      'sanitize' => 'filter_xss',
  ),
    'dataset_id' => array(
      'label' => t('Dataset ID'),
      'type' => 'integer',
      'description' => t('The primary identifier for the Dataset node.'),
  ),
    'user_id' => array(
      'label' => t('User ID'),
      'type' => 'integer',
      'description' => t('The primary identifier for the user.'),
  ),
    'published' => array(
      'label' => t('Published'),
      'type' => 'boolean',
      'description' => t('A flag indicating whether the query is published.'),
  ),
  );

  $info['mica_dataset_query_term']['properties'] = array(
    'id' => array(
      'label' => t('ID'),
      'type' => 'integer',
      'description' => t('The primary identifier for a query term.'),
  ),
    'query_id' => array(
      'label' => t('Query ID'),
      'type' => 'integer',
      'description' => t('The query identifier for a query term.'),
  ),
    'variable_id' => array(
      'label' => t('Participant Variable ID'),
      'type' => 'integer',
      'description' => t('The variable identifier for a query term.'),
  ),
    'weight' => array(
      'label' => t('Weight'),
      'type' => 'integer',
      'description' => t('The weight of a term in its query.'),
  ),
    'depth' => array(
      'label' => t('Depth'),
      'type' => 'integer',
      'description' => t('The depth of a term in its query.'),
  ),
  );


  return $info;
}

//
// Mica Dataset Connector
//

/**
 * Load the dataset connector corresponding to the specified dataset and study ids.
 *
 * @param $dataset_id
 * @param $study_id
 * @param $enabled
 *
 * @return MicaDatasetConnector
 *   A connector or FALSE if not found.
 */
function mica_dataset_connector_query($dataset_id, $study_id, $enabled = NULL) {
  $q = db_select('mica_dataset_connector', 'c');
  $q->addField('c', 'id');
  $q->condition('c.dataset_id', $dataset_id, '=');
  $q->condition('c.study_id', $study_id, '=');
  if (isset($enabled)) {
    $q->condition('c.enabled', $enabled, '=');
  }
  $q->range(0,1);
  $result = $q->execute();

  $rval = $result->fetchField();

  return $rval ? mica_dataset_connector_load($rval) : FALSE;
}

/**
 * Load the dataset connectors corresponding to the specified dataset id.
 *
 * @param $dataset_id
 * @param $enabled
 *
 * @return MicaDatasetConnector
 *   An array of connectors (may be empty).
 */
function mica_dataset_connector_query_multiple($dataset_id, $enabled = NULL) {
  $q = db_select('mica_dataset_connector', 'c');
  $q->addField('c', 'id');
  $q->condition('c.dataset_id', $dataset_id, '=');
  if (isset($enabled)) {
    $q->condition('c.enabled', $enabled, '=');
  }
  $result = $q->execute();

  $connectors = array();

  while($record = $result->fetchAssoc()) {
    $connectors[] = mica_dataset_connector_load($record['id']);
  }

  return $connectors;
}

/**
 * Load the dataset connector with the specified id.
 *
 * @param $id
 *   The dataset connector's id.
 * @param $reset
 *   Whether to reset the internal cache.
 *
 * @return MicaDatasetConnector
 *   An object representing the connector with the specified id.
 */
function mica_dataset_connector_load($id, $reset = FALSE) {
  $ret = mica_dataset_connector_load_multiple(array($id), array(), $reset);
  return $ret ? reset($ret) : FALSE;
}

/**
 * Load multiple connectors at once, determined by IDs or machine names, or by
 * other conditions.
 *
 * @see entity_load()
 *
 * @param $ids
 *   An array of connector IDs or machine names.
 * @param $conditions
 *   An array of conditions on the {mica_dataset_connector} table in the form
 *   'field' => $value.
 * @param $reset
 *   Whether to reset the internal entity_load cache.
 *
 * @return array
 *   An array of connector objects keyed by machine name.
 */
function mica_dataset_connector_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('mica_dataset_connector', $ids, $conditions, $reset);
}

/**
 * Entity uri callback.
 */
function mica_dataset_connector_url(MicaDatasetConnector $connector) {
  return array(
    'path' => 'admin/config/system/mica/connector/' . $connector->machine_name,
    'options' => array(),
  );
}

/**
 * Inserts a new dataset connector into the database.
 *
 * @param array $values
 *   An array containing the values to be inserted.
 *
 * @return
 *   The newly inserted connector's id, or FALSE on error.
 */
function mica_dataset_connector_insert(array $values) {
  $connector = new MicaDatasetConnector($values);
  $connector->is_new = TRUE;
  $connector->save();
  return $connector->id;
}

/**
 * Load all node of type 'participant_variable' associated with a dataset
 * @param $dataset nid
 */
function mica_dataset_dataset_participant_variables($dataset) {
  // Get field information
  $field = field_info_field('field_dataset');
  $query = new EntityFieldQuery;
  $query->entityCondition('entity_type', 'node')
  ->entityCondition('bundle', 'participant_variable')
  ->fieldCondition($field, 'nid', $dataset);

  $entities = $query->execute();

  if (!empty($entities)) {
    $nodes = node_load_multiple(array_keys($entities['node']));
    return $nodes;
  }
  return FALSE;
}

/**
 * Returns either a list of all available connection infos, or a specific one.
 *
 * @see hook_mica_datasets_connection_info()
 *
 * @param $id
 *   The ID of the connection info to retrieve.
 *
 * @return array
 *   If $id was not specified, an array of all available service classes.
 *   Otherwise, either the service info with the specified id (if it exists),
 *   or NULL.
 */
function mica_datasets_get_connection_info($id = NULL) {
  $connections = &drupal_static(__FUNCTION__);

  if (!isset($connections)) {
    $connections = module_invoke_all('mica_datasets_connection_info');
  }

  if (isset($id)) {
    return isset($connections[$id]) ? $connections[$id] : NULL;
  }
  return $connections;
}

//
// Mica Dataset Query
//

/**
 * Load the dataset queries corresponding to the specified dataset and user id.
 *
 * @param $dataset_id
 * @param $user_id
 * @param $published
 *
 * @return MicaDatasetQuery
 *   An array of query objects or FALSE if not found.
 */
function mica_dataset_query_query($dataset_id, $user_id = NULL, $published = NULL) {
  $q = db_select('mica_dataset_query', 'c');
  $q->addField('c', 'id');
  $q->condition('c.dataset_id', $dataset_id, '=');
  if (isset($user_id)) {
    $q->condition('c.user_id', $user_id, '=');
  }
  if (isset($published)) {
    $q->condition('c.published', $published, '=');
  }
  $result = $q->execute();

  $rval = array();
  while($record = $result->fetchAssoc()) {
    $rval[] = $record['id'];
  }

  return !empty($rval) ? mica_dataset_query_load_multiple($rval) : FALSE;
}


/**
 * Load the dataset query with the specified id.
 *
 * @param $id
 *   The dataset query's id.
 * @param $reset
 *   Whether to reset the internal cache.
 *
 * @return MicaDatasetQuery
 *   An object representing the query with the specified id.
 */
function mica_dataset_query_load($id, $reset = FALSE) {
  $ret = mica_dataset_query_load_multiple(array($id), array(), $reset);
  return $ret ? reset($ret) : FALSE;
}

/**
 * Load multiple queries at once, determined by IDs or machine names, or by
 * other conditions.
 *
 * @see entity_load()
 *
 * @param $ids
 *   An array of query IDs or machine names.
 * @param $conditions
 *   An array of conditions on the {mica_dataset_query} table in the form
 *   'field' => $value.
 * @param $reset
 *   Whether to reset the internal entity_load cache.
 *
 * @return array
 *   An array of query objects keyed by machine name.
 */
function mica_dataset_query_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('mica_dataset_query', $ids, $conditions, $reset);
}

/**
 * Entity uri callback.
 */
function mica_dataset_query_url(MicaDatasetQuery $query) {
  return array(
    'path' => 'admin/config/system/mica/query/' . $query->id,
    'options' => array(),
  );
}

/**
 * Inserts a new dataset query into the database.
 *
 * @param array $values
 *   An array containing the values to be inserted.
 *
 * @return
 *   The newly inserted server's id, or FALSE on error.
 */
function mica_dataset_query_insert(array $values) {
  $query = new MicaDatasetQuery($values);
  $query->is_new = TRUE;
  $query->save();
  return $query->id;
}

//
// Mica Dataset Query Term
//

/**
 * Load the dataset query terms corresponding to the specified query id, ordered by weight.
 * 
 * @param $query_id
 */
function mica_dataset_query_term_query($query_id) {
  $q = db_select('mica_dataset_query_term', 'c');
  $q->addField('c', 'id');
  $q->condition('c.query_id', $query_id, '=');
  $q->orderBy('c.weight', 'ASC');
  $result = $q->execute();

  $rval = array();
  while($record = $result->fetchAssoc()) {
    $rval[] = $record['id'];
  }

  return !empty($rval) ? mica_dataset_query_term_load_multiple($rval) : FALSE;
}

/**
 * Load the dataset query term with the specified id.
 *
 * @param $id
 *   The dataset query term's id.
 * @param $reset
 *   Whether to reset the internal cache.
 *
 * @return MicaDatasetQueryTerm
 *   An object representing the query term with the specified id.
 */
function mica_dataset_query_term_load($id, $reset = FALSE) {
  $ret = mica_dataset_query_term_load_multiple(array($id), array(), $reset);
  return $ret ? reset($ret) : FALSE;
}

/**
 * Load multiple query terms at once, determined by IDs or machine names, or by
 * other conditions.
 *
 * @see entity_load()
 *
 * @param $ids
 *   An array of query term IDs or machine names.
 * @param $conditions
 *   An array of conditions on the {mica_dataset_query_term} table in the form
 *   'field' => $value.
 * @param $reset
 *   Whether to reset the internal entity_load cache.
 *
 * @return array
 *   An array of query objects keyed by machine name.
 */
function mica_dataset_query_term_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('mica_dataset_query_term', $ids, $conditions, $reset);
}

/**
 * Entity uri callback.
 */
function mica_dataset_query_term_url(MicaDatasetQueryTerm $query_term) {
  return array(
    'path' => 'admin/config/system/mica/query/' . $query_term->query_id . '/term/' . $query_term->id,
    'options' => array(),
  );
}

/**
 * Inserts a new dataset query term into the database.
 *
 * @param array $values
 *   An array containing the values to be inserted.
 *
 * @return
 *   The newly inserted query term's id, or FALSE on error.
 */
function mica_dataset_query_term_insert(array $values) {
  $query_term = new MicaDatasetQueryTerm($values);
  $query_term->is_new = TRUE;
  $query_term->save();
  return $query_term->id;
}

//
// Feeds
//

/**
 * implements hook_feeds_after_parse
 * used to extract the dataset_id from the importer and set it on the mapper
 * so that nodes created have a link to their dataset. This method also creates
 * a guid for each participant_variable (dataset_id:title
 */
function mica_datasets_feeds_after_parse(FeedsSource $source, FeedsParserResult $result) {
  if(get_class($source->importer->processor) == 'FeedsNodeProcessor') {
    $config = $source->importer->processor->getConfig();
    if($config['content_type'] == 'participant_variable') {
      debug($config);
      $src_config = $source->getConfigFor($source->importer->fetcher);
      $dataset_id = NULL;
      if(isset($src_config['mica_dataset_connector'])) {
        $nid = $src_config['mica_dataset_connector'];
        $connector_node = mica_dataset_connector_load($nid);
        $dataset_id = $connector_node->dataset_id;
        $titleSource = _find_source_for_target($source->importer->processor, 'title');
        foreach ($result->items as &$item) {
          $item['dataset_id'] = $dataset_id;
          $item['uid'] = $dataset_id . ":" . $item[$titleSource];
        }
        unset($item);
      }
    }
  }
}

/**
 * Returns the name of the source for a specified target.
 * @param FeedsProcessor $processor
 * @param String $target the nane of the target field (e.g.: 'title')
 * @return the name of source item mapped to the target (e.g.: 'jsonpath:0')
 */
function _find_source_for_target(FeedsProcessor $processor, $target) {
  $config = $processor->getConfig();
  foreach($config['mappings'] as $map) {
    if($map['target'] == $target) {
      return $map['source'];
    }
  }
  throw new Exception("could not find source for $target", 500);
}
